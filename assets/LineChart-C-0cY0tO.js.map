{"version":3,"file":"LineChart-C-0cY0tO.js","sources":["../../src/components/charts/LineChart.tsx"],"sourcesContent":["import { memo } from 'react';\n\nimport { Line } from 'react-chartjs-2';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\nimport { Section } from '@telegram-apps/telegram-ui';\n\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\ninterface LineChartProps {\n  data: {\n    labels: string[];\n    datasets: {\n      label: string;\n      data: number[];\n      borderColor: string;\n      backgroundColor: string;\n      fill?: boolean;\n      yAxisID?: string;\n      borderDash?: number[];\n    }[];\n  };\n  title?: string;\n  extraPaymentInfo?: {\n    hasExtraPayment: boolean;\n    amount: number;\n    type: string;\n    isRegular?: boolean;\n  }[];\n}\n\nconst LineChart = ({ data, title, extraPaymentInfo }: LineChartProps) => {\n  const { formatCurrency, t } = useLocalization();\n\n  return (\n    <Section header={title}>\n      <Line\n        data={data}\n        options={{\n          responsive: true,\n          maintainAspectRatio: true,\n          interaction: {\n            mode: 'index',\n            intersect: false,\n          },\n          plugins: {\n            legend: {\n              position: 'bottom',\n              labels: {\n                usePointStyle: true,\n              },\n            },\n            tooltip: {\n              callbacks: {\n                label: function(context) {\n                  let label = context.dataset.label || '';\n                  if (label) {\n                    label += ': ';\n                  }\n                  if (context.parsed.y !== null) {\n                    label += formatCurrency(context.parsed.y);\n                  }\n                  return label;\n                },\n                afterBody: function(tooltipItems) {\n                  if (!extraPaymentInfo) return [];\n                  \n                  const index = tooltipItems[0].dataIndex;\n                  const info = extraPaymentInfo[index];\n                  \n                  if (info && info.hasExtraPayment) {\n                    const typeLabel = info.type === 'reduceTerm' ? t('typeReduceTerm') : t('typeReducePayment');\n                    const tooltipLines = [\n                      `${t('extraPayment')}: ${formatCurrency(info.amount)}`,\n                      `${t('earlyPaymentType')}: ${typeLabel}`\n                    ];\n                    \n                    // Add indicator for regular payments\n                    if (info.isRegular) {\n                      tooltipLines.push(`${t('regularPayment')}: ${t('yes')}`);\n                    }\n                    \n                    return tooltipLines;\n                  }\n                  return [];\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true,\n              position: 'left',\n              title: {\n                display: true,\n                text: t('paymentAmount')\n              },\n              beginAtZero: true,\n            },\n            y1: {\n              type: 'linear',\n              display: true,\n              position: 'right',\n              title: {\n                display: true,\n                text: t('balance')\n              },\n              beginAtZero: true,\n              grid: {\n                drawOnChartArea: false,\n              },\n            },\n          },\n        }}\n      />\n    </Section>\n  );\n};\n\nexport default memo(LineChart);\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","memo","data","title","extraPaymentInfo","formatCurrency","t","useLocalization","jsx","Section","header","children","Line","options","responsive","maintainAspectRatio","interaction","mode","intersect","plugins","legend","position","labels","usePointStyle","tooltip","callbacks","label","context","dataset","parsed","y","afterBody","tooltipItems","index","dataIndex","info","hasExtraPayment","typeLabel","type","tooltipLines","amount","isRegular","push","scales","display","text","beginAtZero","y1","grid","drawOnChartArea"],"mappings":"6RAmBAA,EAAQC,SACNC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAyBF,MAyFeC,EAAAA,EAAAA,MAzFG,EAAGC,OAAMC,QAAOC,uBAChC,MAAMC,eAAEA,EAAAC,EAAgBA,GAAMC,IAG5B,OAAAC,EAAAA,IAACC,EAAQ,CAAAC,OAAQP,EACfQ,SAAAH,EAAAA,IAACI,EAAA,CACCV,OACAW,QAAS,CACPC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,CACXC,KAAM,QACNC,WAAW,GAEbC,QAAS,CACPC,OAAQ,CACNC,SAAU,SACVC,OAAQ,CACNC,eAAe,IAGnBC,QAAS,CACPC,UAAW,CACTC,MAAO,SAASC,GACV,IAAAD,EAAQC,EAAQC,QAAQF,OAAS,GAO9B,OANHA,IACOA,GAAA,MAEc,OAArBC,EAAQE,OAAOC,IACRJ,GAAArB,EAAesB,EAAQE,OAAOC,IAElCJ,CACT,EACAK,UAAW,SAASC,GACd,IAAC5B,EAAkB,MAAO,GAExB,MAAA6B,EAAQD,EAAa,GAAGE,UACxBC,EAAO/B,EAAiB6B,GAE1B,GAAAE,GAAQA,EAAKC,gBAAiB,CAC1B,MAAAC,EAA0B,eAAdF,EAAKG,KAAwBhC,EAAE,kBAAoBA,EAAE,qBACjEiC,EAAe,CACnB,GAAGjC,EAAE,oBAAoBD,EAAe8B,EAAKK,UAC7C,GAAGlC,EAAE,wBAAwB+B,KAQxB,OAJHF,EAAKM,WACMF,EAAAG,KAAK,GAAGpC,EAAE,sBAAsBA,EAAE,UAG1CiC,CAAA,CAET,MAAO,EAAC,KAKhBI,OAAQ,CACNb,EAAG,CACDQ,KAAM,SACNM,SAAS,EACTvB,SAAU,OACVlB,MAAO,CACLyC,SAAS,EACTC,KAAMvC,EAAE,kBAEVwC,aAAa,GAEfC,GAAI,CACFT,KAAM,SACNM,SAAS,EACTvB,SAAU,QACVlB,MAAO,CACLyC,SAAS,EACTC,KAAMvC,EAAE,YAEVwC,aAAa,EACbE,KAAM,CACJC,iBAAiB,SAM7B"}