{"version":3,"mappings":"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","names":["m","require$$0","client","createRoot","hydrateRoot","memo","error","children","jsx","Error","message","JSON","stringify","ErrorBoundary","Component","state","static","componentDidCatch","this","setState","render","props","fallback","Fallback","platform","retrieveLaunchParams","tgWebAppPlatform","isDark","useSignal","miniApp","AppRoot","appearance","includes","Outlet","Skeleton","visible","style","height","LoanForm","lazy","import","__VITE_PRELOAD__","MortageResult","__vitePreload","router","createBrowserRouter","path","element","Layout","index","Suspense","LoadingFallback","basename","RouterProvider","Router","translations","en","appTitle","mustBeNumber","mustBeGreaterThan","mustBeLessThan","invalidDate","endDateAfterStart","invalidNumber","mustBePositive","dayOfMonth","loanDetails","homeValue","downPayment","loanAmount","interestRate","loanTerm","startDate","paymentType","annuityPayment","differentiatedPayment","paymentDay","paymentDayMonthly","paymentDaySpecific","paymentSummary","monthlyPayment","totalInterest","totalCost","planPayoffDate","actualPayoffDate","earlyPayment","earlyPaymentAmount","earlyPaymentMonth","earlyPaymentDate","earlyPaymentType","typeReduceTerm","typeReducePayment","addEarlyPayment","earlyPaymentList","remove","paymentHistory","totalEarlyPayments","errorPaymentAmount","errorPaymentMonth","errorPaymentDate","regularPayment","regularPaymentAmount","startMonth","endMonth","addRegularPayment","yes","finalPayment","originalPayment","savings","monthsSaved","totalSavings","amortization","paymentSchedule","month","date","payment","principal","interest","extraPayment","balance","previous","next","showingPayments","graphicalView","paymentBreakdown","amortizationSchedule","paymentAmount","paymentDistribution","interestSavings","newTotalInterest","interestSaved","monthlyPaymentBreakdown","totalPaymentBreakdown","mortgageComparison","original","withEarlyPayments","errorHomeValue","errorDownPayment","errorDownPaymentMax","errorInterestRate","errorLoanTerm","calculate","reset","years","months","ru","LocalizationContext","createContext","useLocalization","context","useContext","LocalizationProvider","language","setLanguage","useState","launchParams","tgWebAppData","user","language_code","console","getUserLanguage","Provider","value","t","key","params","enTranslations","translation","Object","entries","reduce","acc","paramKey","paramValue","replace","String","formatCurrency","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","format","formatNumber","formatDate","Date","toLocaleDateString","InterestCalculationMethod","calculateMonthlyPayment","annualInterestRate","termInYears","paymentNumber","fixedPrincipalPortion","calculateDifferentiatedMonthlyPayment","monthlyRate","numberOfPayments","Math","pow","daysBetween","endDate","diffTime","abs","getTime","round","daysInYear","year","getFullYear","calculateInterestForPeriod","method","days","fallbackDays","calculateMortgage","totalPayments","i","payoffDate","loanTermYears","setFullYear","toISOString","split","calculatePayoffDate","LocalMortgageService","result","effectiveInterestRate","generateAmortizationSchedule","earlyPayments","regularPayments","interestCalculationMethod","ACTUAL_365","originalMonthlyPayment","sortedEarlyPayments","sort","a","b","earlyPaymentsByDate","Map","forEach","set","amount","type","schedule","currentMonthlyPayment","startDateObj","originalTotalInterest","remainingBalance","hadReducePaymentType","currentDate","remainingTerm","paymentDate","setMonth","getMonth","lastDay","getDate","adjustedDay","min","setDate","newBalance","dateStr","extraPaymentType","isRegularPayment","has","get","currentPaymentDate","remainingMonths","estimatedRemainingPayments","ceil","log","push","max","summary","originalTerm","newTerm","length","finalMonthlyPayment","ServerMortgageService","_apiBaseUrl","constructor","apiBaseUrl","_params","mortgageConfig","mortgageService","createMortgageService","warn","MortgageContext","MortgageProvider","setLoanDetails","setEarlyPayments","setRegularPayments","mortgageResults","setMortgageResults","amortizationResult","setAmortizationResult","useEffect","then","results","catch","useMortgage","ErrorBoundaryFallback","App","Placeholder","header","description","alt","src","display","width","root","ReactDOM","document","getElementById","debug","tgWebAppStartParam","async","options","setDebug","initSDK","eruda","default","init","position","x","window","innerWidth","y","mockForMacOS","firstThemeSent","mockTelegramEnv","onEvent","event","tp","themeParamsState","tgWebAppThemeParams","emitEvent","theme_params","left","top","right","bottom","restoreInitData","mountSync","Promise","all","viewport","mount","backButton","isSupported","bindViewportCssVars","bindMiniAppCssVars","bindThemeParamsCssVars","swipeBehavior","disableVertical","closingBehavior","enableConfirmation","enableClosingConfirmation","Root","e","EnvUnsupported"],"ignoreList":[0],"sources":["../../node_modules/react-dom/client.js","../../src/components/ErrorBoundaryFallback.tsx","../../src/components/ErrorBoundary.tsx","../../src/components/Layout.tsx","../../src/components/LoadingFallback.tsx","../../src/navigation/Router.tsx","../../src/components/App.tsx","../../src/localization/translations.ts","../../src/providers/LocalizationProvider.tsx","../../src/utils/financialMath.ts","../../src/utils/mortgageCalculator.ts","../../src/services/mortgage/LocalMortgageService.ts","../../src/utils/amortizationSchedule.ts","../../src/services/mortgage/ServerMortgageService.ts","../../src/config/mortgage.ts","../../src/services/mortgage/MortgageServiceFactory.ts","../../src/providers/MortgageProvider.tsx","../../src/components/Root.tsx","../../src/components/EnvUnsupported.tsx","../../src/index.tsx","../../src/init.ts"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import { memo } from 'react';\n\nconst ErrorBoundaryFallback = ({ error }: { error: unknown }) => {\n  return (\n    <div>\n      <p>An unhandled error occurred:</p>\n      <blockquote>\n        <code>\n          {error instanceof Error\n            ? error.message\n            : typeof error === 'string'\n            ? error\n            : JSON.stringify(error)}\n        </code>\n      </blockquote>\n    </div>\n  );\n};\n\nexport default memo(ErrorBoundaryFallback);\n","import {\n  Component,\n  type ComponentType,\n  type GetDerivedStateFromError,\n  type PropsWithChildren,\n  type ReactNode,\n} from 'react';\n\nexport interface ErrorBoundaryProps extends PropsWithChildren {\n  fallback?: ReactNode | ComponentType<{ error: unknown }>;\n}\n\ninterface ErrorBoundaryState {\n  error?: unknown;\n}\n\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  state: ErrorBoundaryState = {};\n\n  // eslint-disable-next-line max-len\n  static getDerivedStateFromError: GetDerivedStateFromError<ErrorBoundaryProps, ErrorBoundaryState> = (error) => ({ error });\n\n  componentDidCatch(error: Error) {\n    this.setState({ error });\n  }\n\n  render() {\n    const {\n      state: {\n        error,\n      },\n      props: {\n        fallback: Fallback,\n        children,\n      },\n    } = this;\n\n    return 'error' in this.state\n      ? typeof Fallback === 'function'\n        ? <Fallback error={error} />\n        : Fallback\n      : children;\n  }\n}\n\nexport default ErrorBoundary;\n\n","import { memo } from 'react';\n\nimport {\n  retrieveLaunchParams,\n  useSignal,\n  miniApp,\n} from '@telegram-apps/sdk-react';\nimport { AppRoot } from '@telegram-apps/telegram-ui';\nimport { Outlet } from 'react-router-dom';\n\nconst Layout = () => {\n  const platform = retrieveLaunchParams().tgWebAppPlatform;\n  const isDark = useSignal(miniApp.isDark);\n\n  return (\n    <AppRoot\n      appearance={isDark ? 'dark' : 'light'}\n      platform={['macos', 'ios'].includes(platform) ? 'ios' : 'base'}\n    >\n      <Outlet />\n    </AppRoot>\n  );\n};\n\nexport default memo(Layout);\n","import { memo } from 'react';\nimport { Skeleton } from '@telegram-apps/telegram-ui';\n\nconst LoadingFallback = () => {\n  return <Skeleton visible style={{ height: '100vh' }} />;\n};\n\nexport default memo(LoadingFallback);\n","import { memo, lazy, Suspense } from 'react';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\n\nimport Layout from '@/components/Layout.tsx';\nimport LoadingFallback from '@/components/LoadingFallback';\n\n// Lazy load route components\nconst LoanForm = lazy(() => import('@/forms/LoanForm/LoanForm'));\nconst MortageResult = lazy(() => import('@/components/MortageResult'));\n\nconst Router = () => {\n  const router = createBrowserRouter(\n    [\n      {\n        path: '/',\n        element: <Layout />,\n        children: [\n          { \n            index: true, \n            element: (\n              <Suspense fallback={<LoadingFallback />}>\n                <LoanForm />\n              </Suspense>\n            ) \n          },\n          { \n            path: '/result', \n            element: (\n              <Suspense fallback={<LoadingFallback />}>\n                <MortageResult />\n              </Suspense>\n            ) \n          },\n        ],\n      },\n    ],\n    {\n      basename: '/mortage-calc-tma/',\n    }\n  );\n\n  return <RouterProvider router={router} />;\n};\n\nexport default memo(Router);\n","import { memo } from 'react';\n\nimport Router from '@/navigation/Router';\n\nconst App = () => {\n\n  return (\n    <Router />\n  );\n};\n\nexport default memo(App);\n","export const translations = {\n  en: {\n    // App\n    appTitle: 'Mortgage Calculator',\n\n    // Validation\n    mustBeNumber: '{field} must be a number',\n    mustBeGreaterThan: '{field} must be greater than {value}',\n    mustBeLessThan: '{field} must be less than or equal to {value}',\n    invalidDate: '{field} has an invalid date format',\n    endDateAfterStart: '{endField} must be after {startField}',\n    invalidNumber: 'Must be a valid number',\n    mustBePositive: 'Must be a positive number',\n    dayOfMonth: 'Day must be between 1 and 31',\n\n    // Loan Details\n    loanDetails: 'Loan Details',\n    homeValue: 'Home Value',\n    downPayment: 'Down Payment',\n    loanAmount: 'Loan Amount',\n    interestRate: 'Interest Rate',\n    loanTerm: 'Loan Term (years)',\n    startDate: 'Start Date',\n    paymentType: 'Payment Type',\n    annuityPayment: 'Annuity',\n    differentiatedPayment: 'Differentiated',\n    paymentDay: 'Payment Day',\n    paymentDayMonthly: 'Same day as start date',\n    paymentDaySpecific: 'Specific day of month',\n\n    // Results\n    paymentSummary: 'Payment Summary',\n    monthlyPayment: 'Monthly Payment',\n    totalInterest: 'Total Interest',\n    totalCost: 'Total Cost',\n    planPayoffDate: 'Plan Payoff Date',\n    actualPayoffDate: 'Actual Payoff Date',\n\n    // Early Payment\n    earlyPayment: 'Early Payment',\n    earlyPaymentAmount: 'Additional Amount',\n    earlyPaymentMonth: 'Month of Payment',\n    earlyPaymentDate: 'Date of Payment',\n    earlyPaymentType: 'Payment Type',\n    typeReduceTerm: 'Reduce Term',\n    typeReducePayment: 'Reduce Payment',\n    addEarlyPayment: 'Add Early Payment',\n    earlyPaymentList: 'Scheduled Early Payments',\n    remove: 'Remove',\n    paymentHistory: 'Early Payments',\n    totalEarlyPayments: 'Total Early Payments',\n    errorPaymentAmount: 'Payment amount must be greater than 0',\n    errorPaymentMonth: 'Payment month must be within the loan term',\n    errorPaymentDate: 'Payment date must be within the loan term',\n\n    // Regular Payment\n    regularPayment: 'Regular Payment',\n    regularPaymentAmount: 'Regular Payment Amount',\n    startMonth: 'Start Month',\n    endMonth: 'End Month (Optional)',\n    addRegularPayment: 'Add Regular Payment',\n    yes: 'Yes',\n\n    // Results with Early Payments\n    finalPayment: 'Final Payment',\n    originalPayment: 'Original Payment',\n    savings: 'Interest Savings',\n    monthsSaved: 'Months Saved',\n    totalSavings: 'Total Interest Savings',\n\n    // Payment Schedule\n    amortization: 'Amortization Schedule',\n    paymentSchedule: 'Payment Schedule',\n    month: 'Month',\n    date: 'Date',\n    payment: 'Payment',\n    principal: 'Principal',\n    interest: 'Interest',\n    extraPayment: 'Extra Payment',\n    balance: 'Balance',\n    previous: 'Previous',\n    next: 'Next',\n    showingPayments: 'Showing payments {from}-{to} of {total}',\n\n    // Charts\n    graphicalView: 'Graphical View',\n    paymentBreakdown: 'Payment Breakdown',\n    amortizationSchedule: 'Amortization Schedule',\n    paymentAmount: 'Payment Amount',\n    paymentDistribution: 'Payment Distribution',\n    interestSavings: 'Interest Savings',\n    newTotalInterest: 'New Total Interest',\n    interestSaved: 'Interest Saved',\n    monthlyPaymentBreakdown: 'Monthly Payment Breakdown',\n    totalPaymentBreakdown: 'Total Payment Breakdown',\n    mortgageComparison: 'Mortgage Comparison',\n    original: 'Original Mortgage',\n    withEarlyPayments: 'With Early Payments',\n\n    // Validation\n    errorHomeValue: 'Home value must be greater than 0',\n    errorDownPayment: 'Down payment must be greater than 0',\n    errorDownPaymentMax: 'Down payment must be less than home value',\n    errorInterestRate: 'Interest rate must be greater than 0',\n    errorLoanTerm: 'Loan term must be greater than 0',\n\n    // Common\n    calculate: 'Calculate',\n    reset: 'Reset',\n    years: 'years',\n    months: 'months',\n  },\n  ru: {\n    // App\n    appTitle: 'Ипотечный калькулятор',\n\n    // Validation\n    mustBeNumber: '{field} должен быть числом',\n    mustBeGreaterThan: '{field} должен быть больше {value}',\n    mustBeLessThan: '{field} должен быть меньше или равен {value}',\n    invalidDate: '{field} имеет неверный формат даты',\n    endDateAfterStart: '{endField} должен быть после {startField}',\n    invalidNumber: 'Должно быть действительным числом',\n    mustBePositive: 'Должно быть положительным числом',\n    dayOfMonth: 'День должен быть между 1 и 31',\n\n    // Loan Details\n    loanDetails: 'Детали кредита',\n    homeValue: 'Стоимость недвижимости',\n    downPayment: 'Первоначальный взнос',\n    loanAmount: 'Сумма кредита',\n    interestRate: 'Процентная ставка',\n    loanTerm: 'Срок кредита (лет)',\n    startDate: 'Дата начала',\n    paymentType: 'Тип платежа',\n    annuityPayment: 'Аннуитетный',\n    differentiatedPayment: 'Дифференцированный',\n    paymentDay: 'День платежа',\n    paymentDayMonthly: 'В тот же день, что и дата начала',\n    paymentDaySpecific: 'Конкретный день месяца',\n\n    // Results\n    paymentSummary: 'Сводка по платежам',\n    monthlyPayment: 'Ежемесячный платеж',\n    totalInterest: 'Общий процент',\n    totalCost: 'Общая стоимость',\n    planPayoffDate: 'Плановая дата погашения',\n    actualPayoffDate: 'Фактическая дата погашения',\n\n    // Early Payment\n    earlyPayment: 'Досрочное погашение',\n    earlyPaymentAmount: 'Дополнительная сумма',\n    earlyPaymentMonth: 'Месяц платежа',\n    earlyPaymentDate: 'Дата платежа',\n    earlyPaymentType: 'Тип платежа',\n    typeReduceTerm: 'Сократить срок',\n    typeReducePayment: 'Уменьшить платеж',\n    addEarlyPayment: 'Добавить досрочный платеж',\n    earlyPaymentList: 'Запланированные досрочные платежи',\n    remove: 'Удалить',\n    paymentHistory: 'Досрочные платежи',\n    totalEarlyPayments: 'Всего досрочных платежей',\n    errorPaymentAmount: 'Сумма платежа должна быть больше 0',\n    errorPaymentMonth: 'Месяц платежа должен быть в пределах срока кредита',\n    errorPaymentDate: 'Дата платежа должна быть в пределах срока кредита',\n\n    // Regular Payment\n    regularPayment: 'Регулярный платеж',\n    regularPaymentAmount: 'Сумма регулярного платежа',\n    startMonth: 'Месяц начала',\n    endMonth: 'Месяц окончания (Опционально)',\n    addRegularPayment: 'Добавить регулярный платеж',\n    yes: 'Да',\n\n    // Results with Early Payments\n    finalPayment: 'Итоговый платеж',\n    originalPayment: 'Первоначальный платеж',\n    savings: 'Экономия на процентах',\n    monthsSaved: 'Сэкономлено месяцев',\n    totalSavings: 'Общая экономия на процентах',\n\n    // Payment Schedule\n    amortization: 'График платежей',\n    paymentSchedule: 'График платежей',\n    month: 'Месяц',\n    date: 'Дата',\n    payment: 'Платеж',\n    principal: 'Основной долг',\n    interest: 'Проценты',\n    extraPayment: 'Досрочный платеж',\n    balance: 'Остаток',\n    previous: 'Назад',\n    next: 'Вперед',\n    showingPayments: 'Платежи {from}-{to} из {total}',\n\n    // Charts\n    graphicalView: 'Графическое представление',\n    paymentBreakdown: 'Структура платежа',\n    amortizationSchedule: 'График погашения',\n    paymentAmount: 'Сумма платежа',\n    paymentDistribution: 'Распределение платежей',\n    interestSavings: 'Экономия на процентах',\n    newTotalInterest: 'Новая общая сумма процентов',\n    interestSaved: 'Сэкономленные проценты',\n    monthlyPaymentBreakdown: 'Ежемесячная структура платежей',\n    totalPaymentBreakdown: 'Общая структура платежей',\n    mortgageComparison: 'Сравнение ипотеки',\n    original: 'Первоначальная ипотека',\n    withEarlyPayments: 'С досрочными платежами',\n\n    // Validation\n    errorHomeValue: 'Стоимость недвижимости должна быть больше 0',\n    errorDownPayment: 'Первоначальный взнос должен быть больше 0',\n    errorDownPaymentMax:\n      'Первоначальный взнос должен быть меньше стоимости жилья',\n    errorInterestRate: 'Процентная ставка должна быть больше 0',\n    errorLoanTerm: 'Срок кредита должен быть больше 0',\n\n    // Common\n    calculate: 'Рассчитать',\n    reset: 'Сбросить',\n    years: 'лет',\n    months: 'месяцев',\n  },\n};\n","import React, { createContext, useContext, useState } from 'react';\nimport { retrieveLaunchParams } from '@telegram-apps/sdk-react';\nimport { translations } from '@/localization/translations';\n\n// Define supported languages\nexport type SupportedLanguage = 'en' | 'ru';\n\n// Define the context interface\ninterface LocalizationContextType {\n  language: SupportedLanguage;\n  setLanguage: (lang: SupportedLanguage) => void;\n  t: (key: string, params?: Record<string, string | number>) => string;\n  formatCurrency: (value: number) => string;\n  formatNumber: (value: number) => string;\n  formatDate: (date: Date | string) => string;\n}\n\n// Create the context\nconst LocalizationContext = createContext<LocalizationContextType | undefined>(undefined);\n\n// Create a hook for using the localization context\nexport const useLocalization = () => {\n  const context = useContext(LocalizationContext);\n  if (!context) {\n    throw new Error('useLocalization must be used within a LocalizationProvider');\n  }\n  return context;\n};\n\n// Create the provider component\nexport const LocalizationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  // Get the user's language from Telegram\n  const getUserLanguage = (): SupportedLanguage => {\n    try {\n      const launchParams = retrieveLaunchParams();\n      const userLang = launchParams.tgWebAppData?.user?.language_code || 'en';\n      \n      // Check if the language is supported, otherwise fallback to English\n      return userLang === 'ru' ? 'ru' : 'en';\n    } catch (error) {\n      console.error('Error retrieving user language:', error);\n      return 'en';\n    }\n  };\n\n  // Initialize language state\n  const [language, setLanguage] = useState<SupportedLanguage>(getUserLanguage());\n\n  // Translation function\n  const t = (key: string, params?: Record<string, string | number>): string => {\n    // Type assertion to allow string indexing\n    const langTranslations = translations[language] as Record<string, string>;\n    const enTranslations = translations.en as Record<string, string>;\n    \n    const translation = langTranslations[key] || enTranslations[key] || key;\n    \n    if (params) {\n      return Object.entries(params).reduce((acc, [paramKey, paramValue]) => {\n        return acc.replace(`{${paramKey}}`, String(paramValue));\n      }, translation);\n    }\n    \n    return translation;\n  };\n\n  // Format currency based on language\n  const formatCurrency = (value: number): string => {\n    if (language === 'ru') {\n      return new Intl.NumberFormat('ru-RU', {\n        style: 'currency',\n        currency: 'RUB',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }).format(value);\n    }\n    \n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  // Format number based on language\n  const formatNumber = (value: number): string => {\n    return new Intl.NumberFormat(language === 'ru' ? 'ru-RU' : 'en-US').format(value);\n  };\n\n  // Format date based on language\n  const formatDate = (date: Date | string): string => {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString(language === 'ru' ? 'ru-RU' : 'en-US');\n  };\n\n  return (\n    <LocalizationContext.Provider\n      value={{\n        language,\n        setLanguage,\n        t,\n        formatCurrency,\n        formatNumber,\n        formatDate\n      }}\n    >\n      {children}\n    </LocalizationContext.Provider>\n  );\n};\n","/**\n * Types of interest calculation methods\n * Preparation for future functionality expansion\n */\nexport enum InterestCalculationMethod {\n  ACTUAL_365 = 'ACTUAL_365', // Current method\n  THIRTY_360 = 'THIRTY_360',\n  ACTUAL_ACTUAL = 'ACTUAL_ACTUAL',\n}\n\n/**\n * Types of loan payments\n */\nexport type PaymentType = 'annuity' | 'differentiated';\n\n/**\n * Calculate monthly payment for a differentiated loan\n * In differentiated payments, the principal portion is fixed, and the interest portion decreases over time\n */\nexport function calculateDifferentiatedMonthlyPayment(\n  principal: number,\n  annualInterestRate: number,\n  termInYears: number,\n  paymentNumber: number = 1 // 1-based payment number\n): number {\n  const monthlyRate = annualInterestRate / 100 / 12;\n  const numberOfPayments = termInYears * 12;\n  const fixedPrincipalPortion = principal / numberOfPayments;\n  const remainingPrincipal = principal - (fixedPrincipalPortion * (paymentNumber - 1));\n  const interestPortion = remainingPrincipal * monthlyRate;\n  \n  return fixedPrincipalPortion + interestPortion;\n}\n\n/**\n * Calculate monthly payment for a loan\n */\nexport function calculateMonthlyPayment(\n  principal: number,\n  annualInterestRate: number,\n  termInYears: number,\n  paymentType: PaymentType = 'annuity',\n  paymentNumber: number = 1\n): number {\n  if (paymentType === 'differentiated') {\n    return calculateDifferentiatedMonthlyPayment(principal, annualInterestRate, termInYears, paymentNumber);\n  }\n  \n  // Annuity payment calculation\n  // Monthly interest rate (annual rate divided by 12 and converted to decimal)\n  const monthlyRate = annualInterestRate / 100 / 12;\n  \n  // Total number of payments (years * 12 months)\n  const numberOfPayments = termInYears * 12;\n  \n  // Calculate monthly payment using the amortization formula\n  // M = P * (r * (1 + r)^n) / ((1 + r)^n - 1)\n  return (\n    (principal * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / \n    (Math.pow(1 + monthlyRate, numberOfPayments) - 1)\n  );\n}\n\n/**\n * Calculate the number of days between two dates\n */\nexport function daysBetween(startDate: Date, endDate: Date): number {\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n  const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n  return Math.round(diffTime / oneDay);\n}\n\n/**\n * Calculate the number of days in a year (accounts for leap years)\n */\nexport function daysInYear(date: Date): number {\n  const year = date.getFullYear();\n  return ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? 366 : 365;\n}\n\n/**\n * Calculate interest for a period based on calculation method\n * Currently only ACTUAL_365 is implemented, others are reserved for future\n */\nexport function calculateInterestForPeriod(\n  balance: number,\n  annualInterestRate: number,\n  startDate: Date,\n  endDate: Date,\n  method: InterestCalculationMethod = InterestCalculationMethod.ACTUAL_365\n): number {\n  switch (method) {\n    case InterestCalculationMethod.ACTUAL_365:\n      const days = daysBetween(startDate, endDate);\n      const yearDays = daysInYear(startDate);\n      const dailyRate = annualInterestRate / 100 / yearDays;\n      return balance * dailyRate * days;\n    \n    // Reserved for future calculation methods\n    case InterestCalculationMethod.THIRTY_360:\n    case InterestCalculationMethod.ACTUAL_ACTUAL:\n    default:\n      // For now, use ACTUAL_365 for all methods\n      const fallbackDays = daysBetween(startDate, endDate);\n      const fallbackYearDays = daysInYear(startDate);\n      const fallbackDailyRate = annualInterestRate / 100 / fallbackYearDays;\n      return balance * fallbackDailyRate * fallbackDays;\n  }\n}\n\n/**\n * Calculate the payoff date based on start date and loan term\n */\nexport function calculatePayoffDate(startDate: string, loanTermYears: number): string {\n  const date = new Date(startDate);\n  date.setFullYear(date.getFullYear() + loanTermYears);\n  return date.toISOString().split('T')[0];\n}\n\n/**\n * Get the last day of a month\n */\nexport function getLastDayOfMonth(year: number, month: number): number {\n  // month is 0-based in JavaScript Date (0 = January, 11 = December)\n  // Create a date for the first day of the next month, then subtract one day\n  return new Date(year, month + 1, 0).getDate();\n}\n\n/**\n * Adjust payment day to handle months with fewer days\n * If the specified day is greater than the number of days in the month,\n * return the last day of the month\n */\nexport function adjustPaymentDay(date: Date, paymentDay: number): Date {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const lastDay = getLastDayOfMonth(year, month);\n  \n  // If payment day is greater than the last day of the month, use the last day\n  const adjustedDay = Math.min(paymentDay, lastDay);\n  \n  const result = new Date(date);\n  result.setDate(adjustedDay);\n  return result;\n}\n","import {\n  calculateMonthlyPayment,\n  calculatePayoffDate,\n  PaymentType,\n} from './financialMath';\n\nexport interface MortgageParams {\n  loanAmount: number;\n  interestRate: number;\n  loanTerm: number; // in years\n  startDate: string;\n  paymentType?: PaymentType; // Preparation for future extension\n  paymentDay?: number; // Preparation for future extension - day of monthly payment\n}\n\nexport interface MortgageResults {\n  monthlyPayment: number;\n  totalInterest: number;\n  totalCost: number;\n  payoffDate: string;\n  loanTerm: number;\n  // Additional fields for future extensions\n  effectiveInterestRate?: number; // Effective interest rate\n  paymentType: PaymentType;\n}\n\n/**\n * Calculate mortgage results based on input parameters\n */\nexport function calculateMortgage(params: MortgageParams): MortgageResults {\n  const { \n    loanAmount, \n    interestRate, \n    loanTerm, \n    startDate,\n    paymentType = 'annuity', // Default to annuity payments\n    // paymentDay\n  } = params;\n  \n  // Calculate monthly payment\n  const monthlyPayment = calculateMonthlyPayment(loanAmount, interestRate, loanTerm, paymentType);\n  \n  // Calculate total cost based on payment type\n  let totalCost: number;\n  \n  if (paymentType === 'differentiated') {\n    // For differentiated payments, we need to calculate each payment separately\n    // and sum them up, since they decrease over time\n    let totalPayments = 0;\n    const numberOfPayments = loanTerm * 12;\n    \n    for (let i = 1; i <= numberOfPayments; i++) {\n      totalPayments += calculateMonthlyPayment(loanAmount, interestRate, loanTerm, paymentType, i);\n    }\n    \n    totalCost = totalPayments;\n  } else {\n    // For annuity payments, all payments are the same\n    totalCost = monthlyPayment * loanTerm * 12;\n  }\n  \n  // Calculate total interest (total cost - loan amount)\n  const totalInterest = totalCost - loanAmount;\n  \n  // Calculate payoff date\n  const payoffDate = calculatePayoffDate(startDate, loanTerm);\n  \n  return {\n    monthlyPayment,\n    totalInterest,\n    totalCost,\n    payoffDate,\n    loanTerm,\n    paymentType\n  };\n}\n","import { calculateMortgage } from '@/utils/mortgageCalculator';\nimport { generateAmortizationSchedule } from '@/utils/amortizationSchedule';\nimport { \n  IMortgageService, \n  MortgageCalculationParams, \n  MortgageCalculationResults,\n  AmortizationScheduleResults\n} from './IMortgageService';\n\n/**\n * Local implementation of the mortgage service\n * This implementation uses the local utility functions for calculations\n */\nexport class LocalMortgageService implements IMortgageService {\n  /**\n   * Calculate mortgage results based on input parameters\n   * @param params Mortgage calculation parameters\n   * @returns Mortgage calculation results\n   */\n  async calculateMortgage(params: MortgageCalculationParams): Promise<MortgageCalculationResults> {\n    // Use the existing utility function\n    const result = calculateMortgage({\n      loanAmount: params.loanAmount,\n      interestRate: params.interestRate,\n      loanTerm: params.loanTerm,\n      startDate: params.startDate,\n      paymentType: params.paymentType,\n      paymentDay: params.paymentDay\n    });\n\n    return {\n      monthlyPayment: result.monthlyPayment,\n      totalInterest: result.totalInterest,\n      totalCost: result.totalCost,\n      payoffDate: result.payoffDate,\n      loanTerm: result.loanTerm,\n      paymentType: result.paymentType,\n      effectiveInterestRate: result.effectiveInterestRate\n    };\n  }\n\n  /**\n   * Generate an amortization schedule for a loan\n   * @param params Mortgage calculation parameters\n   * @returns Amortization schedule results\n   */\n  async generateAmortizationSchedule(params: MortgageCalculationParams): Promise<AmortizationScheduleResults> {\n    // Use the existing utility function\n    const result = generateAmortizationSchedule({\n      loanAmount: params.loanAmount,\n      interestRate: params.interestRate,\n      loanTerm: params.loanTerm,\n      startDate: params.startDate,\n      paymentType: params.paymentType,\n      paymentDay: params.paymentDay,\n      earlyPayments: params.earlyPayments || [],\n      regularPayments: params.regularPayments || []\n    });\n\n    return result as AmortizationScheduleResults;\n  }\n}\n","import {\n  calculateInterestForPeriod,\n  InterestCalculationMethod,\n  PaymentType,\n} from './financialMath';\n\nexport interface AmortizationScheduleItem {\n  month: number;\n  date: string;\n  payment: number;\n  principal: number;\n  interest: number;\n  totalInterest: number;\n  balance: number;\n  extraPayment?: number;\n  extraPaymentType?: 'reduceTerm' | 'reducePayment';\n  isRegularPayment?: boolean; // Flag to indicate if this is a regular early payment\n}\n\nexport interface AmortizationScheduleParams {\n  loanAmount: number;\n  interestRate: number;\n  loanTerm: number; // in years\n  startDate: string;\n  paymentType?: PaymentType; // Preparation for future extension\n  paymentDay?: number; // Preparation for future extension - day of monthly payment\n  interestCalculationMethod?: InterestCalculationMethod; // Interest calculation method\n  earlyPayments?: Array<{\n    id: string;\n    date: string; // ISO date string format YYYY-MM-DD\n    amount: number;\n    type: 'reduceTerm' | 'reducePayment';\n  }>;\n  regularPayments?: Array<{\n    id: string;\n    amount: number;\n    startMonth: string; // Month to start regular payments\n    endMonth?: string;  // Month to end regular payments (optional)\n    type: 'reduceTerm' | 'reducePayment'; // Recalculation type\n  }>;\n}\n\nexport interface AmortizationScheduleResult {\n  schedule: AmortizationScheduleItem[];\n  summary: {\n    originalTerm: number; // in months\n    newTerm: number; // in months\n    originalTotalInterest: number;\n    newTotalInterest: number;\n    originalMonthlyPayment: number;\n    finalMonthlyPayment: number;\n    totalSavings: number;\n    paymentType: PaymentType; // Payment type\n  };\n}\n\n/**\n * Generate an amortization schedule for a loan, including early payments\n */\nexport function generateAmortizationSchedule(\n  params: AmortizationScheduleParams\n): AmortizationScheduleResult {\n  const { \n    loanAmount, \n    interestRate, \n    loanTerm, \n    startDate, \n    earlyPayments = [],\n    regularPayments = [],\n    paymentType = 'annuity', // Default to annuity payments\n    interestCalculationMethod = InterestCalculationMethod.ACTUAL_365 // Default to current method\n  } = params;\n  \n  // Total number of payments (years * 12 months)\n  const numberOfPayments = loanTerm * 12;\n  \n  // Calculate original monthly payment based on payment type\n  const monthlyRate = interestRate / 100 / 12;\n  let originalMonthlyPayment: number;\n  \n  if (paymentType === 'differentiated') {\n    // For differentiated payments, calculate the first payment (which will be the highest)\n    const fixedPrincipalPortion = loanAmount / numberOfPayments;\n    const firstInterestPortion = loanAmount * monthlyRate;\n    originalMonthlyPayment = fixedPrincipalPortion + firstInterestPortion;\n  } else {\n    // For annuity payments, use the amortization formula\n    originalMonthlyPayment = \n      (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / \n      (Math.pow(1 + monthlyRate, numberOfPayments) - 1);\n  }\n  \n  // Map early payments to their corresponding payment dates\n  // Sort early payments by date first to ensure they're processed in chronological order\n  const sortedEarlyPayments = [...earlyPayments].sort((a, b) => \n    new Date(a.date).getTime() - new Date(b.date).getTime()\n  );\n  \n  const earlyPaymentsByDate = new Map<string, {\n    amount: number;\n    type: 'reduceTerm' | 'reducePayment';\n  }>();\n  \n  sortedEarlyPayments.forEach(payment => {\n    earlyPaymentsByDate.set(payment.date, {\n      amount: payment.amount,\n      type: payment.type\n    });\n  });\n  \n  // Generate the amortization schedule\n  const schedule: AmortizationScheduleItem[] = [];\n  let balance = loanAmount;\n  let totalInterest = 0;\n  let currentMonthlyPayment = originalMonthlyPayment;\n  const startDateObj = new Date(startDate);\n  \n  // Calculate original total interest (without early payments)\n  let originalTotalInterest: number;\n  \n  if (paymentType === 'differentiated') {\n    // For differentiated payments, calculate the sum of all interest payments\n    let totalPayments = 0;\n    let remainingBalance = loanAmount;\n    const fixedPrincipalPortion = loanAmount / numberOfPayments;\n    \n    for (let i = 0; i < numberOfPayments; i++) {\n      const interestPortion = remainingBalance * monthlyRate;\n      totalPayments += fixedPrincipalPortion + interestPortion;\n      remainingBalance -= fixedPrincipalPortion;\n    }\n    \n    originalTotalInterest = totalPayments - loanAmount;\n  } else {\n    // For annuity payments, all payments are the same\n    originalTotalInterest = (originalMonthlyPayment * numberOfPayments) - loanAmount;\n  }\n  \n  // Track if we've had a reducePayment type early payment\n  let hadReducePaymentType = false;\n  \n  let currentDate = new Date(startDateObj);\n  let month = 1;\n  let remainingTerm = numberOfPayments; // Track remaining term separately\n  \n  while (month <= remainingTerm && balance > 0.01) {\n  // Calculate payment date based on payment day setting\n  const paymentDate = new Date(currentDate);\n  paymentDate.setMonth(currentDate.getMonth() + 1);\n  \n  // If a specific payment day is set, adjust the payment date\n  if (params.paymentDay !== undefined) {\n    const year = paymentDate.getFullYear();\n    const month = paymentDate.getMonth();\n    const lastDay = new Date(year, month + 1, 0).getDate();\n    // If payment day is greater than the last day of the month, use the last day\n    const adjustedDay = Math.min(params.paymentDay, lastDay);\n    paymentDate.setDate(adjustedDay);\n  }\n    \n    // Calculate interest for this period using the selected calculation method\n    const interest = calculateInterestForPeriod(\n      balance,\n      interestRate,\n      currentDate,\n      paymentDate,\n      interestCalculationMethod\n    );\n    \n    // Calculate principal and payment based on payment type\n    let principal: number;\n    let payment: number;\n    \n    if (paymentType === 'differentiated') {\n      // For differentiated payments, recalculate the payment for each month\n      // The principal portion is fixed, and the interest portion decreases over time\n      const numberOfPayments = loanTerm * 12;\n      const fixedPrincipalPortion = loanAmount / numberOfPayments;\n      principal = fixedPrincipalPortion;\n      payment = principal + interest;\n      currentMonthlyPayment = payment; // Update for this month\n    } else {\n      // For annuity payments, the total payment is fixed\n      // The principal portion increases over time, and the interest portion decreases\n      principal = currentMonthlyPayment - interest;\n      payment = currentMonthlyPayment;\n    }\n    \n    // Update the balance\n    let newBalance = balance - principal;\n    \n    // Format the date as ISO string (YYYY-MM-DD)\n    const dateStr = paymentDate.toISOString().split('T')[0];\n    \n    // Check if there's an early payment for this date\n    let extraPayment = 0;\n    let extraPaymentType: 'reduceTerm' | 'reducePayment' | undefined;\n    let isRegularPayment = false;\n    \n    if (earlyPaymentsByDate.has(dateStr)) {\n      const earlyPayment = earlyPaymentsByDate.get(dateStr)!;\n      extraPayment = earlyPayment.amount;\n      extraPaymentType = earlyPayment.type;\n    }\n    \n    // Check if this date falls within any regular payment ranges\n    const currentPaymentDate = new Date(dateStr);\n    \n    // Process all regular payments\n    for (const regularPayment of regularPayments) {\n      const startMonth = new Date(regularPayment.startMonth);\n      const endMonth = regularPayment.endMonth ? new Date(regularPayment.endMonth) : null;\n      \n      // Check if the current date is within the regular payment range\n      const isAfterStart = currentPaymentDate >= startMonth;\n      const isBeforeEnd = !endMonth || currentPaymentDate <= endMonth;\n      \n      if (isAfterStart && isBeforeEnd) {\n        // If there's already an early payment for this date, add the regular payment amount\n        if (extraPayment > 0) {\n          extraPayment += regularPayment.amount;\n          // Use the regular payment type as it takes precedence\n          extraPaymentType = regularPayment.type;\n        } else {\n          extraPayment = regularPayment.amount;\n          extraPaymentType = regularPayment.type;\n        }\n        isRegularPayment = true;\n      }\n    }\n    \n    // Apply extra payment\n    if (extraPayment > 0) {\n      newBalance -= extraPayment;\n      \n      if (newBalance > 0) {\n        // If payment type is to reduce payment, recalculate the monthly payment\n        // but keep the original term\n        if (extraPaymentType === 'reducePayment') {\n          // Mark that we've had a reducePayment type\n          hadReducePaymentType = true;\n          \n          // For reducePayment, we need to calculate the remaining term from the current month\n          const remainingMonths = numberOfPayments - month + 1;\n          \n          // Update the remaining term\n          remainingTerm = remainingMonths;\n          \n          // Recalculate monthly payment for the remaining term\n          currentMonthlyPayment = \n            (newBalance * monthlyRate * Math.pow(1 + monthlyRate, remainingMonths)) / \n            (Math.pow(1 + monthlyRate, remainingMonths) - 1);\n        }\n        // If payment type is to reduce term, keep the same monthly payment\n        // which will naturally reduce the term as the balance decreases faster\n        else if (extraPaymentType === 'reduceTerm') {\n          // Keep the current monthly payment the same\n          // This will result in paying off the loan faster (reducing the term)\n          \n          // Estimate the new remaining term based on the new balance and current payment\n          // This is an approximation to help with the loop termination condition\n          const estimatedRemainingPayments = Math.ceil(\n            Math.log(currentMonthlyPayment / (currentMonthlyPayment - newBalance * monthlyRate)) / \n            Math.log(1 + monthlyRate)\n          );\n          \n          // Update the remaining term (reduce it)\n          // If we've had a reducePayment type before, we need to make sure we're using\n          // the correct remaining term calculation\n          if (hadReducePaymentType) {\n            // We've already reduced the payment, now we're reducing the term\n            remainingTerm = Math.min(remainingTerm, estimatedRemainingPayments);\n          } else {\n            // We're just reducing the term\n            remainingTerm = Math.min(remainingTerm, month + estimatedRemainingPayments);\n          }\n        }\n      }\n    }\n    \n    // Update total interest\n    totalInterest += interest;\n    \n    // Add this month to the schedule\n    schedule.push({\n      month,\n      date: dateStr,\n      payment: currentMonthlyPayment,\n      principal,\n      interest,\n      totalInterest,\n      balance: Math.max(0, newBalance),\n      extraPayment: extraPayment > 0 ? extraPayment : undefined,\n      extraPaymentType: extraPayment > 0 ? extraPaymentType : undefined,\n      isRegularPayment: isRegularPayment\n    });\n    \n    // Update balance for next iteration\n    balance = newBalance;\n    \n    // Move to next month\n    currentDate = paymentDate;\n    month++;\n  }\n  \n  // Calculate summary statistics\n  const newTerm = schedule.length;\n  const newTotalInterest = totalInterest;\n  const finalMonthlyPayment = schedule[schedule.length - 1].payment;\n  \n  // Calculate total savings - this should only include interest savings\n  // The true savings is the difference between the total interest that would have been paid\n  // without early payments and the total interest actually paid\n  const totalSavings = originalTotalInterest - newTotalInterest;\n  \n  return {\n    schedule,\n    summary: {\n      originalTerm: numberOfPayments,\n      newTerm,\n      originalTotalInterest,\n      newTotalInterest,\n      originalMonthlyPayment,\n      finalMonthlyPayment,\n      totalSavings,\n      paymentType\n    }\n  };\n}\n","import { \n  IMortgageService, \n  MortgageCalculationParams, \n  MortgageCalculationResults,\n  AmortizationScheduleResults\n} from './IMortgageService';\n\n/**\n * Server implementation of the mortgage service\n * This implementation communicates with a server API for calculations\n * Currently this is a placeholder for future implementation\n */\nexport class ServerMortgageService implements IMortgageService {\n  // This field is used in the commented-out code examples\n  // @ts-ignore - This field is used in the commented-out code examples\n  private readonly _apiBaseUrl: string;\n\n  /**\n   * Create a new server mortgage service\n   * @param apiBaseUrl The base URL for the mortgage API\n   */\n  constructor(apiBaseUrl?: string) {\n    this._apiBaseUrl = apiBaseUrl || '/api/mortgage';\n  }\n\n  /**\n   * Calculate mortgage results based on input parameters\n   * @param params Mortgage calculation parameters\n   * @returns Mortgage calculation results\n   */\n  async calculateMortgage(_params: MortgageCalculationParams): Promise<MortgageCalculationResults> {\n    try {\n      // In a real implementation, this would make an API call to the server\n      // For now, we'll throw an error to indicate this is not implemented yet\n      throw new Error('Server implementation not available yet');\n      \n      // Example of how this would be implemented:\n      // const response = await fetch(`${this._apiBaseUrl}/calculate`, {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json',\n      //   },\n      //   body: JSON.stringify(_params),\n      // });\n      // \n      // if (!response.ok) {\n      //   throw new Error(`API error: ${response.status}`);\n      // }\n      // \n      // return await response.json();\n    } catch (error) {\n      console.error('Error calculating mortgage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate an amortization schedule for a loan\n   * @param params Mortgage calculation parameters\n   * @returns Amortization schedule results\n   */\n  async generateAmortizationSchedule(_params: MortgageCalculationParams): Promise<AmortizationScheduleResults> {\n    try {\n      // In a real implementation, this would make an API call to the server\n      // For now, we'll throw an error to indicate this is not implemented yet\n      throw new Error('Server implementation not available yet');\n      \n      // Example of how this would be implemented:\n      // const response = await fetch(`${this._apiBaseUrl}/amortization`, {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json',\n      //   },\n      //   body: JSON.stringify(_params),\n      // });\n      // \n      // if (!response.ok) {\n      //   throw new Error(`API error: ${response.status}`);\n      // }\n      // \n      // return await response.json();\n    } catch (error) {\n      console.error('Error generating amortization schedule:', error);\n      throw error;\n    }\n  }\n}\n","/**\n * Configuration for the mortgage service\n */\nexport const mortgageConfig = {\n  /**\n   * The type of mortgage service to use\n   * 'local': Use the local implementation (calculations done in the browser)\n   * 'server': Use the server implementation (calculations done on the server)\n   */\n  serviceType: 'local' as 'local' | 'server',\n\n  /**\n   * The base URL for the mortgage API\n   * Only used when serviceType is 'server'\n   */\n  apiBaseUrl: '/api/mortgage',\n};\n","import { IMortgageService } from './IMortgageService';\nimport { LocalMortgageService } from './LocalMortgageService';\nimport { ServerMortgageService } from './ServerMortgageService';\nimport { mortgageConfig } from '@/config/mortgage';\n\n/**\n * Factory for creating mortgage service instances\n * This factory makes it easy to switch between different implementations\n */\nexport class MortgageServiceFactory {\n  /**\n   * Create a mortgage service instance\n   * @param type The type of mortgage service to create\n   * @returns A mortgage service instance\n   */\n  static createMortgageService(type: 'local' | 'server' = 'local', apiBaseUrl?: string): IMortgageService {\n    switch (type) {\n      case 'local':\n        return new LocalMortgageService();\n      case 'server':\n        try {\n          return new ServerMortgageService(apiBaseUrl);\n        } catch (error) {\n          console.warn('Error creating server implementation, falling back to local implementation:', error);\n          return new LocalMortgageService();\n        }\n      default:\n        return new LocalMortgageService();\n    }\n  }\n}\n\n/**\n * Default mortgage service instance\n * This is a singleton instance that can be used throughout the application\n */\nexport const mortgageService = MortgageServiceFactory.createMortgageService(\n  mortgageConfig.serviceType,\n  mortgageConfig.apiBaseUrl\n);\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { PaymentType } from '@/utils/financialMath';\nimport { \n  mortgageService, \n  MortgageCalculationResults, \n  AmortizationScheduleResults \n} from '@/services/mortgage';\n\nexport interface EarlyPayment {\n  id: string;\n  date: string; // ISO date string format YYYY-MM-DD\n  amount: number;\n  type: 'reduceTerm' | 'reducePayment';\n}\n\nexport interface RegularPayment {\n  id: string;\n  amount: number;\n  startMonth: string; // Month to start regular payments\n  endMonth?: string;  // Month to end regular payments (optional)\n  type: 'reduceTerm' | 'reducePayment'; // Recalculation type\n}\n\nexport interface LoanDetailsValues {\n  loanAmount: number;\n  interestRate: number;\n  loanTerm: number;\n  startDate: string;\n  paymentType: PaymentType;\n  paymentDay: number;\n}\n\ninterface MortgageContextType {\n  loanDetails: LoanDetailsValues | null;\n  setLoanDetails: (values: LoanDetailsValues) => void;\n  earlyPayments: EarlyPayment[];\n  setEarlyPayments: (payments: EarlyPayment[]) => void;\n  regularPayments: RegularPayment[];\n  setRegularPayments: (payments: RegularPayment[]) => void;\n  mortgageResults: MortgageCalculationResults | null;\n  amortizationResult: AmortizationScheduleResults | null;\n  setMortgageResults: (mortage: MortgageCalculationResults) => void;\n  setAmortizationResult: (amortization: AmortizationScheduleResults) => void;\n}\n\nconst MortgageContext = createContext<MortgageContextType | undefined>(undefined);\n\nexport function MortgageProvider({ children }: { children: React.ReactNode }) {\n  const [loanDetails, setLoanDetails] = useState<LoanDetailsValues | null>(null);\n  const [earlyPayments, setEarlyPayments] = useState<EarlyPayment[]>([]);\n  const [regularPayments, setRegularPayments] = useState<RegularPayment[]>([]);\n  const [mortgageResults, setMortgageResults] = useState<MortgageCalculationResults | null>(null);\n  const [amortizationResult, setAmortizationResult] = useState<AmortizationScheduleResults | null>(null);\n\n  useEffect(() => {\n    if (loanDetails) {\n      try {\n        // Use the mortgage service to calculate mortgage results\n        mortgageService.calculateMortgage({\n          ...loanDetails,\n          earlyPayments,\n          regularPayments\n        }).then(results => {\n          setMortgageResults(results);\n        }).catch(error => {\n          console.error('Error calculating mortgage results:', error);\n        });\n      } catch (error) {\n        console.error('Error calculating mortgage results:', error);\n      }\n    }\n  }, [loanDetails]);\n  \n  // Generate amortization schedule when loan details, early payments, or regular payments change\n  useEffect(() => {\n    if (loanDetails) {\n      try {\n        // Use the mortgage service to generate amortization schedule\n        mortgageService.generateAmortizationSchedule({\n          ...loanDetails,\n          earlyPayments,\n          regularPayments\n        }).then(result => {\n          setAmortizationResult(result);\n        }).catch(error => {\n          console.error('Error generating amortization schedule:', error);\n        });\n      } catch (error) {\n        console.error('Error generating amortization schedule:', error);\n      }\n    }\n  }, [loanDetails, earlyPayments, regularPayments]);\n\n  return (\n    <MortgageContext.Provider\n      value={{\n        loanDetails,\n        setLoanDetails,\n        earlyPayments,\n        setEarlyPayments,\n        regularPayments,\n        setRegularPayments,\n        mortgageResults,\n        amortizationResult,\n        setMortgageResults,\n        setAmortizationResult\n      }}\n    >\n      {children}\n    </MortgageContext.Provider>\n  );\n}\n\nexport function useMortgage() {\n  const context = useContext(MortgageContext);\n  if (!context) {\n    throw new Error('useMortgage must be used within a MortgageProvider');\n  }\n  return context;\n}\n","import { memo } from 'react';\n\nimport ErrorBoundaryFallback from '@/components/ErrorBoundaryFallback';\nimport ErrorBoundary from '@/components/ErrorBoundary.tsx';\nimport App from '@/components/App.tsx';\n\nimport { LocalizationProvider } from '@/providers/LocalizationProvider';\nimport { MortgageProvider } from '@/providers/MortgageProvider';\n\nconst Root = () => {\n  return (\n    <ErrorBoundary fallback={ErrorBoundaryFallback}>\n      <LocalizationProvider>\n        <MortgageProvider>\n          <App />\n        </MortgageProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default memo(Root);\n","import { memo } from 'react';\n\nimport { retrieveLaunchParams, useSignal, miniApp } from '@telegram-apps/sdk-react';\nimport { Placeholder, AppRoot } from '@telegram-apps/telegram-ui';\n\nconst EnvUnsupported = () => {\n  const platform = retrieveLaunchParams().tgWebAppPlatform;\n  const isDark = useSignal(miniApp.isDark)\n\n  return (\n    <AppRoot\n      appearance={isDark ? 'dark' : 'light'}\n      platform={['macos', 'ios'].includes(platform) ? 'ios' : 'base'}\n    >\n      <Placeholder\n        header=\"Oops\"\n        description=\"You are using too old Telegram client to run this application\"\n      >\n        <img\n          alt=\"Telegram sticker\"\n          src=\"https://xelene.me/telegram.gif\"\n          style={{ display: 'block', width: '144px', height: '144px' }}\n        />\n      </Placeholder>\n    </AppRoot>\n  );\n};\n\nexport default memo(EnvUnsupported);","// Include Telegram UI styles first to allow our code override the package CSS.\nimport '@telegram-apps/telegram-ui/dist/styles.css';\n\nimport ReactDOM from 'react-dom/client';\nimport { retrieveLaunchParams } from '@telegram-apps/sdk-react';\n\nimport Root from '@/components/Root';\nimport EnvUnsupported from '@/components/EnvUnsupported';\nimport { init } from '@/init.ts';\n\nimport './index.css';\n\n// Mock the environment in case, we are outside Telegram.\nimport './mockEnv.ts';\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\ntry {\n  const launchParams = retrieveLaunchParams();\n  const { tgWebAppPlatform: platform } = launchParams;\n  const debug =\n    (launchParams.tgWebAppStartParam || '').includes('platformer_debug') ||\n    import.meta.env.DEV;\n\n  // Configure all application dependencies.\n  await init({\n    debug,\n    eruda: debug && ['ios', 'android'].includes(platform),\n    mockForMacOS: platform === 'macos',\n  }).then(() => {\n    root.render(<Root />);\n  });\n} catch (e) {\n  console.log(e);\n  root.render(<EnvUnsupported />);\n}\n","import {\n  setDebug,\n  restoreInitData,\n  init as initSDK,\n  bindThemeParamsCssVars,\n  bindViewportCssVars,\n  mockTelegramEnv,\n  type ThemeParams,\n  themeParamsState,\n  retrieveLaunchParams,\n  emitEvent,\n  bindMiniAppCssVars,\n  miniApp,\n  viewport,\n  enableClosingConfirmation,\n  swipeBehavior,\n  closingBehavior,\n  backButton,\n} from '@telegram-apps/sdk-react';\n\n/**\n * Initializes the application and configures its dependencies.\n */\nexport async function init(options: {\n  debug: boolean;\n  eruda: boolean;\n  mockForMacOS: boolean;\n}): Promise<void> {\n  // Set @telegram-apps/sdk-react debug mode and initialize it.\n  setDebug(options.debug);\n  initSDK();\n\n  // Add Eruda if needed.\n  options.eruda && void import('eruda').then(({ default: eruda }) => {\n    eruda.init();\n    eruda.position({ x: window.innerWidth - 50, y: 0 });\n  });\n\n  // Telegram for macOS has a ton of bugs, including cases, when the client doesn't\n  // even response to the \"web_app_request_theme\" method. It also generates an incorrect\n  // event for the \"web_app_request_safe_area\" method.\n  if (options.mockForMacOS) {\n    let firstThemeSent = false;\n    mockTelegramEnv({\n      onEvent(event, next) {\n        if (event[0] === 'web_app_request_theme') {\n          let tp: ThemeParams = {};\n          if (firstThemeSent) {\n            tp = themeParamsState();\n          } else {\n            firstThemeSent = true;\n            tp ||= retrieveLaunchParams().tgWebAppThemeParams;\n          }\n          return emitEvent('theme_changed', { theme_params: tp });\n        }\n\n        if (event[0] === 'web_app_request_safe_area') {\n          return emitEvent('safe_area_changed', { left: 0, top: 0, right: 0, bottom: 0 });\n        }\n\n        next();\n      },\n    });\n  }\n\n  // Mount all components used in the project.\n  restoreInitData();\n  miniApp.mountSync()\n  await Promise.all([\n    viewport.mount().then(() => {\n      backButton.isSupported() && backButton.mount();\n      bindViewportCssVars();\n      bindMiniAppCssVars();\n      bindThemeParamsCssVars();\n      swipeBehavior.mount();\n      swipeBehavior.disableVertical();\n      closingBehavior.mount();\n      closingBehavior.enableConfirmation();\n      enableClosingConfirmation();\n\n    }),\n  ]);\n}"],"file":"assets/index-Cp98w5qd.js"}