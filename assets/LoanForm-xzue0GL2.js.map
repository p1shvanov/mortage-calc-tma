{"version":3,"file":"LoanForm-xzue0GL2.js","sources":["../../src/components/ui/Input.tsx","../../src/components/ui/InputNumberFormat.tsx","../../src/components/ui/Select.tsx","../../src/types/form.ts","../../src/schemas/loanDetails.ts","../../src/schemas/earlyPayment.ts","../../src/schemas/regularPayment.ts","../../src/schemas/formSchema.ts","../../src/hooks/useLoanForm.ts","../../src/utils/unformatFormValues.ts","../../src/components/form/LoanDetailsForm.tsx","../../src/components/form/EarlyPaymentsForm.tsx","../../src/components/form/RegularPaymentsForm.tsx","../../src/forms/LoanForm/LoanForm.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport {\n  Caption,\n  Spinner,\n  Input as TGInput,\n  InputProps as TGInputProps,\n} from '@telegram-apps/telegram-ui';\nimport type { AnyFieldApi } from '@tanstack/react-form';\n\nexport type InputPropsType = {\n  field: AnyFieldApi;\n} & TGInputProps;\n\nconst Input = forwardRef<HTMLInputElement, InputPropsType>(\n  (props, forwardedRef) => {\n    const { field, ...rest } = props;\n\n    const { isTouched, errors, isValidating } = field.state.meta;\n\n    return (\n      <>\n        <TGInput\n          {...rest}\n          ref={forwardedRef}\n          id={field.name}\n          name={field.name}\n          value={field.state.value}\n          onBlur={field.handleBlur}\n          onChange={(e) => field.handleChange(e.target.value)}\n          status={errors.length ? 'error' : 'default'}\n          after={isValidating ? <Spinner size='s' /> : rest.after}\n        />\n        {isTouched && errors.length ? (\n          <Caption\n            style={{\n              color: 'var(--tg-theme-destructive-text-color)',\n              padding: '0 24px',\n            }}\n          >\n            {errors.map((error) => error.message).join(', ')}\n          </Caption>\n        ) : null}\n      </>\n    );\n  }\n);\n\nexport default Input;\n","import { FC } from 'react';\nimport { InputNumberFormat as RIInputNumberFormat, InputNumberFormatProps as RIInputNumberFormatProps } from '@react-input/number-format';\nimport Input, { InputPropsType } from './Input';\n\n\nexport type InputNumberFormatPropsType = InputPropsType & RIInputNumberFormatProps\n\nconst InputNumberFormat: FC<InputNumberFormatPropsType> = (props) => {\n    return (\n        <RIInputNumberFormat {...props} component={Input} />\n    );\n};\n\nexport default InputNumberFormat;","import { forwardRef } from 'react';\nimport {\n  Caption,\n  Select as TGSelect,\n  SelectProps as TGSelectProps,\n} from '@telegram-apps/telegram-ui';\n\nimport type { AnyFieldApi } from '@tanstack/react-form';\n\nexport type SelectOptionType = {\n  label: string;\n  value: string;\n};\n\nexport type SelectPropsType = {\n  field: AnyFieldApi;\n  options: SelectOptionType[];\n} & Omit<TGSelectProps, 'children'>;\n\nconst Select = forwardRef<HTMLSelectElement, SelectPropsType>((props) => {\n  const { field, options, ...rest } = props;\n  const { isTouched, errors } = field.state.meta;\n\n  return (\n    <>\n      <TGSelect\n        {...rest}\n        id={field.name}\n        name={field.name}\n        value={field.state.value}\n        onBlur={field.handleBlur}\n        onChange={(e) => field.handleChange(e.target.value)}\n      >\n        {options.map(({ value, label }) => (\n          <option key={value} value={value}>\n            {label}\n          </option>\n        ))}\n      </TGSelect>\n      {isTouched && errors.length ? (\n        <Caption\n          style={{\n            color: 'var(--tg-theme-destructive-text-color)',\n            padding: '0 24px',\n          }}\n        >\n          {errors.join(', ')}\n        </Caption>\n      ) : null}\n    </>\n  );\n});\n\nexport default Select;\n","export type EarlyPaymentType = {\n  id: string;\n  date: string;\n  amount: string;\n  type: 'reduceTerm' | 'reducePayment';\n};\n\nexport type RegularPaymentType = {\n  id: string;\n  amount: string;\n  startMonth: string; // Month to start regular payments\n  endMonth: string;   // Month to end regular payments (optional)\n  type: 'reduceTerm' | 'reducePayment'; // Recalculation type\n};\n\nexport type LoanDetailsType = {\n  loanAmount: string;\n  interestRate: string;\n  loanTerm: string;\n  startDate: string;\n  paymentType: 'annuity' | 'differentiated';\n  paymentDay: string;\n  earlyPayments: EarlyPaymentType[];\n  regularPayments: RegularPaymentType[];\n};\n\nexport const defaultLoanDetails: LoanDetailsType = {\n  loanAmount: '',\n  interestRate: '',\n  loanTerm: '',\n  startDate: new Date().toISOString().split('T')[0],\n  paymentType: 'annuity',\n  paymentDay: new Date().getDate().toLocaleString(),\n  earlyPayments: [],\n  regularPayments: [],\n};\n","import { z } from 'zod';\nimport { unformat } from '@react-input/number-format';\n\n// Early payment schema\nexport const earlyPaymentSchema = z.object({\n  id: z.string(),\n  date: z.string().refine((date) => {\n    const paymentDate = new Date(date);\n    return !isNaN(paymentDate.getTime());\n  }, 'Invalid date format'),\n  amount: z.string()\n    .transform((val) => {\n      const unformatted = unformat(val);\n      return parseFloat(unformatted);\n    })\n    .refine((val) => !isNaN(val), 'Amount must be a number')\n    .refine((val) => val > 0, 'Amount must be greater than 0'),\n  type: z.enum(['reduceTerm', 'reducePayment']),\n});\n\n// Main loan details schema\nexport const loanDetailsSchema = z.object({\n  loanAmount: z.string()\n    .transform((val) => {\n      const unformatted = unformat(val);\n      return parseFloat(unformatted);\n    })\n    .refine((val) => !isNaN(val), 'Loan amount must be a number')\n    .refine((val) => val > 0, 'Loan amount must be greater than 0')\n    .refine((val) => val <= 1000000000, 'Loan amount is too large'),\n\n  interestRate: z.string()\n    .transform((val) => {\n      const unformatted = unformat(val);\n      return parseFloat(unformatted);\n    })\n    .refine((val) => !isNaN(val), 'Interest rate must be a number')\n    .refine((val) => val > 0, 'Interest rate must be greater than 0')\n    .refine((val) => val <= 100, 'Interest rate cannot exceed 100%'),\n\n  loanTerm: z.string()\n    .transform((val) => {\n      const unformatted = unformat(val);\n      return parseFloat(unformatted);\n    })\n    .refine((val) => !isNaN(val), 'Loan term must be a number')\n    .refine((val) => val > 0, 'Loan term must be greater than 0')\n    .refine((val) => val <= 50, 'Loan term cannot exceed 50 years'),\n\n  startDate: z.string()\n    .refine((date) => {\n      const startDate = new Date(date);\n      return !isNaN(startDate.getTime());\n    }, 'Invalid start date'),\n\n  paymentType: z.enum(['annuity', 'differentiated']),\n  \n  paymentDay: z.string()\n    .transform((val) => parseInt(val))\n    .refine((val) => !isNaN(val), 'Payment day must be a number')\n    .refine((val) => val >= 1 && val <= 31, 'Payment day must be between 1 and 31'),\n\n});\n\n// Type for the validated loan details\nexport type ValidatedLoanDetails = z.infer<typeof loanDetailsSchema>;\n","import { z } from 'zod';\nimport { unformat } from '@react-input/number-format';\n\nexport const earlyPaymentSchema = z.object({\n  date: z.string().refine((date) => {\n    const paymentDate = new Date(date);\n    return !isNaN(paymentDate.getTime());\n  }, 'Invalid date format'),\n  amount: z.string()\n    .transform((val) => {\n      const unformatted = unformat(val);\n      return parseFloat(unformatted);\n    })\n    .refine((val) => !isNaN(val), 'Amount must be a number')\n    .refine((val) => val > 0, 'Amount must be greater than 0'),\n  type: z.enum(['reduceTerm', 'reducePayment']),\n});\n\nexport type EarlyPaymentInput = z.infer<typeof earlyPaymentSchema>;\n","import { z } from 'zod';\nimport { unformat } from '@react-input/number-format';\n\nexport const regularPaymentSchema = z.object({\n  id: z.string(),\n  amount: z.string()\n    .transform((val) => {\n      const unformatted = unformat(val);\n      return parseFloat(unformatted);\n    })\n    .refine((val) => !isNaN(val), 'Amount must be a number')\n    .refine((val) => val > 0, 'Amount must be greater than 0'),\n  startMonth: z.string().refine((date) => {\n    const paymentDate = new Date(date);\n    return !isNaN(paymentDate.getTime());\n  }, 'Invalid date format'),\n  endMonth: z.string().refine((date) => {\n    const paymentDate = new Date(date);\n    return !isNaN(paymentDate.getTime());\n  }, 'Invalid date format'),\n  type: z.enum(['reduceTerm', 'reducePayment']),\n}).refine((data) => {\n  // Check that endMonth is after startMonth\n  const startDate = new Date(data.startMonth);\n  const endDate = new Date(data.endMonth);\n  \n  return endDate >= startDate;\n}, {\n  message: 'End month must be after start month',\n  path: ['endMonth'],\n});\n\nexport type RegularPaymentInput = z.infer<typeof regularPaymentSchema>;\n","import { z } from 'zod';\nimport { loanDetailsSchema } from './loanDetails';\nimport { earlyPaymentSchema } from './earlyPayment';\nimport { regularPaymentSchema } from './regularPayment';\n\nexport const formSchema = z.object({\n  loanAmount: loanDetailsSchema.shape.loanAmount,\n  interestRate: loanDetailsSchema.shape.interestRate,\n  loanTerm: loanDetailsSchema.shape.loanTerm,\n  startDate: loanDetailsSchema.shape.startDate,\n  paymentType: loanDetailsSchema.shape.paymentType,\n  paymentDay: loanDetailsSchema.shape.paymentDay,\n  earlyPayments: z.array(earlyPaymentSchema.extend({ id: z.string() })),\n  regularPayments: z.array(regularPaymentSchema),\n});\n\nexport type FormSchemaType = z.infer<typeof formSchema>;\n","import { createFormHook, formOptions, createFormHookContexts } from '@tanstack/react-form';\nimport { defaultLoanDetails } from '@/types/form';\nimport { unformatFormValues } from '@/utils/unformatFormValues';\nimport { useMortgage } from '@/providers/MortgageProvider';\nimport { useNavigate } from 'react-router-dom';\nimport { formSchema } from '@/schemas/formSchema';\n\nexport const { fieldContext, formContext, useFieldContext, useFormContext } = createFormHookContexts();\n\nexport const { useAppForm, withForm } = createFormHook({\n  fieldContext,\n  formContext,\n  fieldComponents: {},\n  formComponents: {},\n});\n\nexport const formOpts = formOptions({\n  defaultValues: defaultLoanDetails,\n});\n\nexport const useLoanForm = () => {\n  const { setLoanDetails, setEarlyPayments, setRegularPayments } = useMortgage();\n  const navigate = useNavigate();\n  return useAppForm({\n    ...formOpts,\n  validators: {\n    onChange: formSchema,\n  },\n    onSubmit: async ({ value }) => {\n      try {\n        const loanDetails = unformatFormValues(value);\n        const { earlyPayments, regularPayments, ...rest } = loanDetails;\n        setLoanDetails(rest);\n        setEarlyPayments(earlyPayments);\n        setRegularPayments(regularPayments);\n        navigate('result');\n      } catch (error) {\n        console.error('Form submission error:', error);\n      }\n    },\n  });\n};\n","import { unformat } from '@react-input/number-format';\nimport { LoanDetailsType } from '@/types/form';\n\n/**\n * Transforms form values from strings to numbers\n * @param values Form values with string types\n * @returns Transformed values with number types\n */\nexport function unformatFormValues(values: LoanDetailsType) {\n  return {\n    loanAmount: parseFloat(unformat(values.loanAmount)),\n    interestRate: parseFloat(unformat(values.interestRate)),\n    loanTerm: parseFloat(unformat(values.loanTerm)),\n    startDate: values.startDate,\n    paymentType: values.paymentType,\n    paymentDay: parseInt(values.paymentDay),\n    earlyPayments: values.earlyPayments.map((earlyPayment) => ({\n      ...earlyPayment,\n      amount: parseFloat(unformat(earlyPayment.amount))\n    })),\n    regularPayments: values.regularPayments.map((regularPayment) => ({\n      ...regularPayment,\n      amount: parseFloat(unformat(regularPayment.amount))\n    })),\n  }\n}\n","import { memo } from 'react';\nimport { List, Section } from '@telegram-apps/telegram-ui';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport InputNumberFormat from '@/components/ui/InputNumberFormat';\nimport Select from '@/components/ui/Select';\nimport Input from '@/components/ui/Input';\nimport { formOpts, withForm } from '@/hooks/useLoanForm';\n\nconst LoanDetailsForm = withForm({\n  ...formOpts,\n  render: function Render({ form }) {\n    const { t, language } = useLocalization();\n\n    return (\n      <Section header={t('loanDetails')}>\n        <List>\n          <form.Field\n            name={'loanAmount'}\n            children={(field) => (\n              <InputNumberFormat\n                header={t('loanAmount')}\n                placeholder={t('loanAmount')}\n                field={field}\n                inputMode='decimal'\n                maximumFractionDigits={2}\n              />\n            )}\n          />\n          <form.Field\n            name={'interestRate'}\n            children={(field) => (\n              <InputNumberFormat\n                header={t('interestRate')}\n                placeholder={t('interestRate')}\n                field={field}\n                format='percent'\n                inputMode='decimal'\n                maximumFractionDigits={2}\n              />\n            )}\n          />\n          <form.Field\n            name={'loanTerm'}\n            children={(field) => (\n              <InputNumberFormat\n                format='unit'\n                unit='year'\n                locales={language}\n                header={t('loanTerm')}\n                placeholder={t('loanTerm')}\n                field={field}\n                inputMode='numeric'\n                maximumIntegerDigits={2}\n              />\n            )}\n          />\n          <form.Field\n            name={'startDate'}\n            children={(field) => (\n              <Input\n                header={t('startDate')}\n                placeholder={t('startDate')}\n                field={field}\n                type='date'\n              />\n            )}\n          />\n          <form.Field\n            name={'paymentType'}\n            children={(field) => (\n              <Select\n                header={t('paymentType')}\n                field={field}\n                options={[\n                  {\n                    label: t('annuityPayment'),\n                    value: 'annuity',\n                  },\n                  {\n                    label: t('differentiatedPayment'),\n                    value: 'differentiated',\n                  },\n                ]}\n              />\n            )}\n          />\n          <form.Field\n            name={'paymentDay'}\n            children={(field) => (\n              <Select\n                header={t('paymentDay')}\n                field={field}\n                options={Array.from({ length: 31 }, (_, i) => i + 1).map(\n                  (day) => ({\n                    label: String(day),\n                    value: String(day),\n                  })\n                )}\n              />\n            )}\n          />\n        </List>\n      </Section>\n    );\n  },\n});\n\nexport default memo(LoanDetailsForm);\n","import { memo, useState } from 'react';\nimport { Accordion, Badge, Button, List, Section } from '@telegram-apps/telegram-ui';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport InputNumberFormat from '@/components/ui/InputNumberFormat';\nimport Select from '@/components/ui/Select';\nimport Input from '@/components/ui/Input';\nimport { formOpts, withForm } from '@/hooks/useLoanForm';\n\nconst EarlyPaymentsForm = withForm({\n  ...formOpts,\n  render: function Render({ form }) {\n    const [open, setOpen] = useState(false);\n    const { t } = useLocalization();\n\n    return (\n      <Section>\n        <form.Field name='earlyPayments' mode='array'>\n          {(field) => {\n            return (\n              <Accordion\n                expanded={open}\n                onChange={() => setOpen((prev) => !prev)}\n              >\n                <Accordion.Summary>\n                  {t('earlyPayment')}\n                  {Boolean(field.state.value.length) && (\n                    <Badge large type='dot'>\n                      {field.state.value.length}\n                    </Badge>\n                  )}\n                </Accordion.Summary>\n                <Accordion.Content style={{ background: 'transparent' }}>\n                  <Section>\n                    {field.state.value.map((_, i) => {\n                      return (\n                        <List key={i}>\n                          <form.Field\n                            name={`earlyPayments[${i}].amount`}\n                            children={(field) => (\n                              <InputNumberFormat\n                                header={t('earlyPaymentAmount')}\n                                placeholder={t('earlyPaymentAmount')}\n                                field={field}\n                                inputMode='decimal'\n                                maximumFractionDigits={2}\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`earlyPayments[${i}].date`}\n                            children={(field) => (\n                              <Input\n                                header={t('earlyPaymentDate')}\n                                placeholder={t('earlyPaymentDate')}\n                                field={field}\n                                type='date'\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`earlyPayments[${i}].type`}\n                            children={(field) => (\n                              <Select\n                                header={t('earlyPaymentType')}\n                                field={field}\n                                options={[\n                                  {\n                                    label: t('typeReduceTerm'),\n                                    value: 'reduceTerm',\n                                  },\n                                  {\n                                    label: t('typeReducePayment'),\n                                    value: 'reducePayment',\n                                  },\n                                ]}\n                              />\n                            )}\n                          />\n                          <form.Subscribe\n                            selector={(state) => [\n                              state.isFieldsValid,\n                              state.isValid,\n                            ]}\n                            children={([isFieldsValid, isValid]) => (\n                              <Button\n                                size='s'\n                                mode='outline'\n                                disabled={!isFieldsValid || !isValid}\n                                stretched\n                                onClick={() => field.removeValue(i)}\n                              >\n                                {t('remove')}\n                              </Button>\n                            )}\n                          />\n                        </List>\n                      );\n                    })}\n                    <form.Subscribe\n                      selector={(state) => [state.isFieldsValid, state.isValid]}\n                      children={([isFieldsValid, isValid]) => (\n                        <Button\n                          disabled={!isFieldsValid || !isValid}\n                          stretched\n                          onClick={() =>\n                            field.pushValue({\n                              amount: '',\n                              date: new Date().toISOString().split('T')[0],\n                              id: Date.now().toString(),\n                              type: 'reduceTerm',\n                            })\n                          }\n                        >\n                          {t('addEarlyPayment')}\n                        </Button>\n                      )}\n                    />\n                  </Section>\n                </Accordion.Content>\n              </Accordion>\n            );\n          }}\n        </form.Field>\n      </Section>\n    );\n  },\n});\n\nexport default memo(EarlyPaymentsForm); ","import { memo, useState } from 'react';\nimport { Accordion, Badge, Button, List, Section } from '@telegram-apps/telegram-ui';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport InputNumberFormat from '@/components/ui/InputNumberFormat';\nimport Select from '@/components/ui/Select';\nimport Input from '@/components/ui/Input';\nimport { formOpts, withForm } from '@/hooks/useLoanForm';\n\n/**\n * Form component for regular payments\n * Allows users to set up recurring monthly payments with a specified amount,\n * date range, and recalculation type (reduce term or reduce payment)\n */\nconst RegularPaymentsForm = withForm({\n  ...formOpts,\n  render: function Render({ form }) {\n    const [open, setOpen] = useState(false);\n    const { t } = useLocalization();\n\n    return (\n      <Section>\n        <form.Field name='regularPayments' mode='array'>\n          {(field) => {\n            return (\n              <Accordion\n                expanded={open}\n                onChange={() => setOpen((prev) => !prev)}\n              >\n                <Accordion.Summary>\n                  {t('regularPayment')}\n                  {Boolean(field.state.value.length) && (\n                    <Badge large type='dot'>\n                      {field.state.value.length}\n                    </Badge>\n                  )}\n                </Accordion.Summary>\n                <Accordion.Content style={{ background: 'transparent' }}>\n                  <Section>\n                    {field.state.value.map((_, i) => {\n                      return (\n                        <List key={i}>\n                          <form.Field\n                            name={`regularPayments[${i}].amount`}\n                            children={(field) => (\n                              <InputNumberFormat\n                                header={t('regularPaymentAmount')}\n                                placeholder={t('regularPaymentAmount')}\n                                field={field}\n                                inputMode='decimal'\n                                maximumFractionDigits={2}\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`regularPayments[${i}].startMonth`}\n                            children={(field) => (\n                              <Input\n                                header={t('startMonth')}\n                                placeholder={t('startMonth')}\n                                field={field}\n                                type='date'\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`regularPayments[${i}].endMonth`}\n                            children={(field) => (\n                              <Input\n                                header={t('endMonth')}\n                                placeholder={t('endMonth')}\n                                field={field}\n                                type='date'\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`regularPayments[${i}].type`}\n                            children={(field) => (\n                              <Select\n                                header={t('earlyPaymentType')}\n                                field={field}\n                                options={[\n                                  {\n                                    label: t('typeReduceTerm'),\n                                    value: 'reduceTerm',\n                                  },\n                                  {\n                                    label: t('typeReducePayment'),\n                                    value: 'reducePayment',\n                                  },\n                                ]}\n                              />\n                            )}\n                          />\n                          <form.Subscribe\n                            selector={(state) => [\n                              state.isFieldsValid,\n                              state.isValid,\n                            ]}\n                            children={([isFieldsValid, isValid]) => (\n                              <Button\n                                size='s'\n                                mode='outline'\n                                disabled={!isFieldsValid || !isValid}\n                                stretched\n                                onClick={() => field.removeValue(i)}\n                              >\n                                {t('remove')}\n                              </Button>\n                            )}\n                          />\n                        </List>\n                      );\n                    })}\n                    <form.Subscribe\n                      selector={(state) => [state.isFieldsValid, state.isValid]}\n                      children={([isFieldsValid, isValid]) => (\n                        <Button\n                          disabled={!isFieldsValid || !isValid}\n                          stretched\n                          onClick={() => {\n                            const today = new Date();\n                            const nextMonth = new Date(today);\n                            nextMonth.setMonth(today.getMonth() + 1);\n                            \n                            field.pushValue({\n                              amount: '',\n                              startMonth: today.toISOString().split('T')[0],\n                              endMonth: nextMonth.toISOString().split('T')[0],\n                              id: Date.now().toString(),\n                              type: 'reduceTerm',\n                            });\n                          }}\n                        >\n                          {t('addRegularPayment')}\n                        </Button>\n                      )}\n                    />\n                  </Section>\n                </Accordion.Content>\n              </Accordion>\n            );\n          }}\n        </form.Field>\n      </Section>\n    );\n  },\n});\n\nexport default memo(RegularPaymentsForm);\n","import { FC, memo } from 'react';\n\nimport { List, Section, Button } from '@telegram-apps/telegram-ui';\n\nimport LoanDetailsForm from '@/components/form/LoanDetailsForm';\nimport EarlyPaymentsForm from '@/components/form/EarlyPaymentsForm';\nimport RegularPaymentsForm from '@/components/form/RegularPaymentsForm';\n\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { useLoanForm } from '@/hooks/useLoanForm';\nimport Page from '@/components/Page';\n\nconst LoanForm: FC = () => {\n  const { t } = useLocalization();\n  const form = useLoanForm();\n\n  return (\n    <Page back={false}>\n      <List\n        Component='form'\n        onSubmit={(event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          form.handleSubmit();\n        }}\n      >\n        <LoanDetailsForm form={form} />\n        <EarlyPaymentsForm form={form} />\n        <RegularPaymentsForm form={form} />\n        <Section>\n          <form.Subscribe\n            selector={(state) => [state.canSubmit, state.isSubmitting]}\n            children={([canSubmit, isSubmitting]) => (\n              <Button\n                type='submit'\n                stretched\n                disabled={!canSubmit}\n                loading={isSubmitting}\n              >\n                {t('calculate')}\n              </Button>\n            )}\n          />\n        </Section>\n      </List>\n    </Page>\n  );\n};\n\nexport default memo(LoanForm);\n"],"names":["Input","forwardRef","props","forwardedRef","field","rest","isTouched","errors","isValidating","state","meta","jsxs","Fragment","children","jsx","TGInput","ref","id","name","value","onBlur","handleBlur","onChange","e","handleChange","target","status","length","after","Spinner","size","Caption","style","color","padding","map","error","message","join","InputNumberFormat","RIInputNumberFormat","component","Select","options","TGSelect","label","defaultLoanDetails","loanAmount","interestRate","loanTerm","startDate","Date","toISOString","split","paymentType","paymentDay","getDate","toLocaleString","earlyPayments","regularPayments","z","object","string","date","refine","paymentDate","isNaN","getTime","amount","transform","val","unformatted","unformat","parseFloat","type","enum","loanDetailsSchema","parseInt","earlyPaymentSchema","regularPaymentSchema","startMonth","endMonth","data","path","formSchema","shape","array","extend","fieldContext","formContext","createFormHookContexts","useAppForm","withForm","createFormHook","fieldComponents","formComponents","formOpts","formOptions","defaultValues","useLoanForm","setLoanDetails","setEarlyPayments","setRegularPayments","useMortgage","navigate","useNavigate","validators","onSubmit","async","loanDetails","values","earlyPayment","regularPayment","console","LoanDetailsForm","render","form","t","language","useLocalization","Section","header","List","Field","placeholder","inputMode","maximumFractionDigits","format","unit","locales","maximumIntegerDigits","Array","from","_","i","day","String","memo","EarlyPaymentsForm","open","setOpen","useState","mode","Accordion","expanded","prev","Summary","Boolean","Badge","large","Content","background","Subscribe","selector","isFieldsValid","isValid","Button","disabled","stretched","onClick","removeValue","pushValue","now","toString","RegularPaymentsForm","today","nextMonth","setMonth","getMonth","Page","back","Component","event","preventDefault","stopPropagation","handleSubmit","canSubmit","isSubmitting","loading"],"mappings":"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"}