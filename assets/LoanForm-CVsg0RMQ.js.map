{"version":3,"file":"LoanForm-CVsg0RMQ.js","sources":["../../src/components/ui/Input.tsx","../../src/components/ui/InputNumberFormat.tsx","../../src/components/ui/Select.tsx","../../src/types/form.ts","../../src/validation/createLocalizedSchemas.ts","../../src/hooks/useLocalizedSchemas.ts","../../src/hooks/useLoanForm.ts","../../src/schemas/localizedSchemas.ts","../../src/utils/unformatFormValues.ts","../../src/components/form/LoanDetailsForm.tsx","../../src/components/form/EarlyPaymentsForm.tsx","../../src/components/form/RegularPaymentsForm.tsx","../../src/forms/LoanForm/LoanForm.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport {\n  Caption,\n  Spinner,\n  Input as TGInput,\n  InputProps as TGInputProps,\n} from '@telegram-apps/telegram-ui';\nimport type { AnyFieldApi } from '@tanstack/react-form';\n\nexport type InputPropsType = {\n  field: AnyFieldApi;\n} & TGInputProps;\n\nconst Input = forwardRef<HTMLInputElement, InputPropsType>(\n  (props, forwardedRef) => {\n    const { field, ...rest } = props;\n\n    const { isTouched, errors, isValidating } = field.state.meta;\n\n    return (\n      <>\n        <TGInput\n          {...rest}\n          ref={forwardedRef}\n          id={field.name}\n          name={field.name}\n          value={field.state.value}\n          onBlur={field.handleBlur}\n          onChange={(e) => field.handleChange(e.target.value)}\n          status={errors.length ? 'error' : 'default'}\n          after={isValidating ? <Spinner size='s' /> : rest.after}\n        />\n        {isTouched && errors.length ? (\n          <Caption\n            style={{\n              color: 'var(--tg-theme-destructive-text-color)',\n              padding: '0 24px',\n            }}\n          >\n            {errors.map((error) => error.message).join(', ')}\n          </Caption>\n        ) : null}\n      </>\n    );\n  }\n);\n\nexport default Input;\n","import { FC } from 'react';\nimport { InputNumberFormat as RIInputNumberFormat, InputNumberFormatProps as RIInputNumberFormatProps } from '@react-input/number-format';\nimport Input, { InputPropsType } from './Input';\n\n\nexport type InputNumberFormatPropsType = InputPropsType & RIInputNumberFormatProps\n\nconst InputNumberFormat: FC<InputNumberFormatPropsType> = (props) => {\n    return (\n        <RIInputNumberFormat {...props} component={Input} />\n    );\n};\n\nexport default InputNumberFormat;","import { forwardRef } from 'react';\nimport {\n  Caption,\n  Select as TGSelect,\n  SelectProps as TGSelectProps,\n} from '@telegram-apps/telegram-ui';\n\nimport type { AnyFieldApi } from '@tanstack/react-form';\n\nexport type SelectOptionType = {\n  label: string;\n  value: string;\n};\n\nexport type SelectPropsType = {\n  field: AnyFieldApi;\n  options: SelectOptionType[];\n} & Omit<TGSelectProps, 'children'>;\n\nconst Select = forwardRef<HTMLSelectElement, SelectPropsType>((props) => {\n  const { field, options, ...rest } = props;\n  const { isTouched, errors } = field.state.meta;\n\n  return (\n    <>\n      <TGSelect\n        {...rest}\n        id={field.name}\n        name={field.name}\n        value={field.state.value}\n        onBlur={field.handleBlur}\n        onChange={(e) => field.handleChange(e.target.value)}\n      >\n        {options.map(({ value, label }) => (\n          <option key={value} value={value}>\n            {label}\n          </option>\n        ))}\n      </TGSelect>\n      {isTouched && errors.length ? (\n        <Caption\n          style={{\n            color: 'var(--tg-theme-destructive-text-color)',\n            padding: '0 24px',\n          }}\n        >\n          {errors.join(', ')}\n        </Caption>\n      ) : null}\n    </>\n  );\n});\n\nexport default Select;\n","export type EarlyPaymentType = {\n  id: string;\n  date: string;\n  amount: string;\n  type: 'reduceTerm' | 'reducePayment';\n};\n\nexport type RegularPaymentType = {\n  id: string;\n  amount: string;\n  startMonth: string; // Month to start regular payments\n  endMonth: string;   // Month to end regular payments (optional)\n  type: 'reduceTerm' | 'reducePayment'; // Recalculation type\n};\n\nexport type LoanDetailsType = {\n  loanAmount: string;\n  interestRate: string;\n  loanTerm: string;\n  startDate: string;\n  paymentType: 'annuity' | 'differentiated';\n  paymentDay: string;\n  earlyPayments: EarlyPaymentType[];\n  regularPayments: RegularPaymentType[];\n};\n\nexport const defaultLoanDetails: LoanDetailsType = {\n  loanAmount: '',\n  interestRate: '',\n  loanTerm: '',\n  startDate: new Date().toISOString().split('T')[0],\n  paymentType: 'annuity',\n  paymentDay: new Date().getDate().toLocaleString(),\n  earlyPayments: [],\n  regularPayments: [],\n};\n","import { z } from 'zod';\nimport { unformat } from '@react-input/number-format';\n\n// Type for the localization function\ntype TranslationFunction = (key: string, params?: Record<string, string | number>) => string;\n\n/**\n * Creates localized schema factory functions\n * @param t Translation function\n * @returns Object with schema creation functions\n */\nexport const createLocalizedSchemas = (t: TranslationFunction) => {\n  // Create a custom error map for Zod\n  const customErrorMap: z.ZodErrorMap = (issue, ctx) => {\n    // Use the default error map as fallback\n    const defaultError = z.defaultErrorMap(issue, ctx);\n    \n    // Return localized error messages based on error code\n    switch (issue.code) {\n      case z.ZodIssueCode.invalid_type:\n        if (issue.expected === 'number') {\n          return { message: t('invalidNumber') };\n        }\n        break;\n      case z.ZodIssueCode.too_small:\n        if (issue.type === 'number' && issue.minimum === 0) {\n          return { message: t('mustBePositive') };\n        }\n        break;\n      // Add more cases as needed\n    }\n    \n    // Fallback to default error message\n    return defaultError;\n  };\n\n  // Set the error map for this instance\n  z.setErrorMap(customErrorMap);\n\n  // Factory functions for common schema patterns\n  return {\n    /**\n     * Creates a localized number schema with common validations\n     */\n    createNumberSchema: (options: {\n      fieldName: string;\n      min?: number;\n      max?: number;\n    }) => {\n      const { fieldName, min = 0, max } = options;\n      \n      return z.string()\n        .transform((val) => {\n          const unformatted = unformat(val);\n          return parseFloat(unformatted);\n        })\n        .refine((val) => !isNaN(val), t('mustBeNumber', { field: t(fieldName) }))\n        .refine((val) => val > min, t('mustBeGreaterThan', { field: t(fieldName), value: min }))\n        .refine(\n          (val) => max === undefined || val <= max, \n          max !== undefined ? t('mustBeLessThan', { field: t(fieldName), value: max }) : ''\n        );\n    },\n\n    /**\n     * Creates a localized date schema\n     */\n    createDateSchema: (options: {\n      fieldName: string;\n    }) => {\n      const { fieldName } = options;\n      \n      return z.string().refine((date) => {\n        const dateObj = new Date(date);\n        return !isNaN(dateObj.getTime());\n      }, t('invalidDate', { field: t(fieldName) }));\n    },\n\n    /**\n     * Creates a localized date range validation\n     */\n    createDateRangeRefinement: (options: {\n      startField: string;\n      endField: string;\n      endIsOptional?: boolean;\n    }) => {\n      const { startField, endField, endIsOptional = false } = options;\n      \n      return (data: any) => {\n        // If end date is optional and not provided, validation passes\n        if (endIsOptional && !data[endField]) return true;\n        \n        const startDate = new Date(data[startField]);\n        const endDate = new Date(data[endField]);\n        \n        return endDate >= startDate;\n      };\n    },\n\n    /**\n     * Returns localized date range error message\n     */\n    getDateRangeErrorMessage: (options: {\n      startField: string;\n      endField: string;\n    }) => {\n      const { startField, endField } = options;\n      \n      return {\n        message: t('endDateAfterStart', { \n          startField: t(startField), \n          endField: t(endField) \n        }),\n        path: [endField],\n      };\n    }\n  };\n};\n","import { useMemo } from 'react';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { createLocalizedSchemas } from '@/validation/createLocalizedSchemas';\n\n/**\n * Hook that provides localized schema factory functions\n * @returns Object with schema creation functions\n */\nexport const useLocalizedSchemas = () => {\n  const { t, language } = useLocalization();\n  \n  // Create localized schemas using the current language\n  const schemas = useMemo(() => {\n    return createLocalizedSchemas(t);\n  }, [t, language]);\n  \n  return schemas;\n};\n","import { createFormHook, formOptions, createFormHookContexts } from '@tanstack/react-form';\nimport { defaultLoanDetails } from '@/types/form';\nimport { unformatFormValues } from '@/utils/unformatFormValues';\nimport { useMortgage } from '@/providers/MortgageProvider';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocalizedFormSchemas } from '@/schemas/localizedSchemas';\n\nexport const { fieldContext, formContext, useFieldContext, useFormContext } = createFormHookContexts();\n\nexport const { useAppForm, withForm } = createFormHook({\n  fieldContext,\n  formContext,\n  fieldComponents: {},\n  formComponents: {},\n});\n\nexport const formOpts = formOptions({\n  defaultValues: defaultLoanDetails,\n});\n\nexport const useLoanForm = () => {\n  const { setLoanDetails, setEarlyPayments, setRegularPayments } = useMortgage();\n  const navigate = useNavigate();\n  const { formSchema } = useLocalizedFormSchemas();\n  \n  return useAppForm({\n    ...formOpts,\n  validators: {\n    onChange: formSchema,\n  },\n    onSubmit: async ({ value }) => {\n      try {\n        const loanDetails = unformatFormValues(value);\n        const { earlyPayments, regularPayments, ...rest } = loanDetails;\n        setLoanDetails(rest);\n        setEarlyPayments(earlyPayments);\n        setRegularPayments(regularPayments);\n        navigate('result');\n      } catch (error) {\n        console.error('Form submission error:', error);\n      }\n    },\n  });\n};\n","import { z } from 'zod';\nimport { useLocalizedSchemas } from '@/hooks/useLocalizedSchemas';\n\n/**\n * Hook that provides localized schemas for form validation\n * @returns Object with localized schemas\n */\nexport const useLocalizedFormSchemas = () => {\n  const schemas = useLocalizedSchemas();\n  \n  // Loan details schema\n  const loanDetailsSchema = z.object({\n    loanAmount: schemas.createNumberSchema({\n      fieldName: 'loanAmount',\n      min: 0,\n      max: 1000000000\n    }),\n    \n    interestRate: schemas.createNumberSchema({\n      fieldName: 'interestRate',\n      min: 0,\n      max: 100\n    }),\n    \n    loanTerm: schemas.createNumberSchema({\n      fieldName: 'loanTerm',\n      min: 0,\n      max: 50\n    }),\n    \n    startDate: schemas.createDateSchema({\n      fieldName: 'startDate'\n    }),\n    \n    paymentType: z.enum(['annuity', 'differentiated']),\n    \n    paymentDay: z.string()\n      .transform((val) => parseInt(val))\n      .refine((val) => !isNaN(val), 'validation.mustBeNumber')\n      .refine((val) => val >= 1 && val <= 31, 'validation.dayOfMonth'),\n  });\n  \n  // Early payment schema\n  const earlyPaymentSchema = z.object({\n    date: schemas.createDateSchema({\n      fieldName: 'earlyPaymentDate'\n    }),\n    \n    amount: schemas.createNumberSchema({\n      fieldName: 'earlyPaymentAmount',\n      min: 0\n    }),\n    \n    type: z.enum(['reduceTerm', 'reducePayment']),\n  });\n  \n  // Regular payment schema\n  const regularPaymentSchema = z.object({\n    id: z.string(),\n    \n    amount: schemas.createNumberSchema({\n      fieldName: 'regularPaymentAmount',\n      min: 0\n    }),\n    \n    startMonth: schemas.createDateSchema({\n      fieldName: 'startMonth'\n    }),\n    \n    endMonth: schemas.createDateSchema({\n      fieldName: 'endMonth'\n    }),\n    \n    type: z.enum(['reduceTerm', 'reducePayment']),\n  }).refine(\n    schemas.createDateRangeRefinement({\n      startField: 'startMonth',\n      endField: 'endMonth'\n    }),\n    schemas.getDateRangeErrorMessage({\n      startField: 'startMonth',\n      endField: 'endMonth'\n    })\n  );\n  \n  // Regular early payment schema\n  const regularEarlyPaymentSchema = z.object({\n    amount: schemas.createNumberSchema({\n      fieldName: 'regularPaymentAmount',\n      min: 0\n    }),\n    \n    startMonth: schemas.createDateSchema({\n      fieldName: 'startMonth'\n    }),\n    \n    endMonth: schemas.createDateSchema({\n      fieldName: 'endMonth'\n    }).optional(),\n    \n    type: z.enum(['reduceTerm', 'reducePayment']),\n  }).refine(\n    schemas.createDateRangeRefinement({\n      startField: 'startMonth',\n      endField: 'endMonth',\n      endIsOptional: true\n    }),\n    schemas.getDateRangeErrorMessage({\n      startField: 'startMonth',\n      endField: 'endMonth'\n    })\n  );\n  \n  // Main form schema\n  const formSchema = z.object({\n    loanAmount: loanDetailsSchema.shape.loanAmount,\n    interestRate: loanDetailsSchema.shape.interestRate,\n    loanTerm: loanDetailsSchema.shape.loanTerm,\n    startDate: loanDetailsSchema.shape.startDate,\n    paymentType: loanDetailsSchema.shape.paymentType,\n    paymentDay: loanDetailsSchema.shape.paymentDay,\n    earlyPayments: z.array(earlyPaymentSchema.extend({ id: z.string() })),\n    regularPayments: z.array(regularPaymentSchema),\n  });\n  \n  return {\n    loanDetailsSchema,\n    earlyPaymentSchema,\n    regularPaymentSchema,\n    regularEarlyPaymentSchema,\n    formSchema\n  };\n};\n\n// Types for the validated schemas\nexport type LocalizedLoanDetailsSchema = ReturnType<typeof useLocalizedFormSchemas>['loanDetailsSchema'];\nexport type LocalizedEarlyPaymentSchema = ReturnType<typeof useLocalizedFormSchemas>['earlyPaymentSchema'];\nexport type LocalizedRegularPaymentSchema = ReturnType<typeof useLocalizedFormSchemas>['regularPaymentSchema'];\nexport type LocalizedRegularEarlyPaymentSchema = ReturnType<typeof useLocalizedFormSchemas>['regularEarlyPaymentSchema'];\nexport type LocalizedFormSchema = ReturnType<typeof useLocalizedFormSchemas>['formSchema'];\n\n// Type for the validated form data\nexport type LocalizedFormSchemaType = z.infer<LocalizedFormSchema>;\n","import { unformat } from '@react-input/number-format';\nimport { LoanDetailsType } from '@/types/form';\n\n/**\n * Transforms form values from strings to numbers\n * @param values Form values with string types\n * @returns Transformed values with number types\n */\nexport function unformatFormValues(values: LoanDetailsType) {\n  return {\n    loanAmount: parseFloat(unformat(values.loanAmount)),\n    interestRate: parseFloat(unformat(values.interestRate)),\n    loanTerm: parseFloat(unformat(values.loanTerm)),\n    startDate: values.startDate,\n    paymentType: values.paymentType,\n    paymentDay: parseInt(values.paymentDay),\n    earlyPayments: values.earlyPayments.map((earlyPayment) => ({\n      ...earlyPayment,\n      amount: parseFloat(unformat(earlyPayment.amount))\n    })),\n    regularPayments: values.regularPayments.map((regularPayment) => ({\n      ...regularPayment,\n      amount: parseFloat(unformat(regularPayment.amount))\n    })),\n  }\n}\n","import { memo } from 'react';\nimport { List, Section } from '@telegram-apps/telegram-ui';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport InputNumberFormat from '@/components/ui/InputNumberFormat';\nimport Select from '@/components/ui/Select';\nimport Input from '@/components/ui/Input';\nimport { formOpts, withForm } from '@/hooks/useLoanForm';\n\nconst LoanDetailsForm = withForm({\n  ...formOpts,\n  render: function Render({ form }) {\n    const { t, language } = useLocalization();\n\n    return (\n      <Section header={t('loanDetails')}>\n        <List>\n          <form.Field\n            name={'loanAmount'}\n            children={(field) => (\n              <InputNumberFormat\n                header={t('loanAmount')}\n                placeholder={t('loanAmount')}\n                field={field}\n                inputMode='decimal'\n                maximumFractionDigits={2}\n              />\n            )}\n          />\n          <form.Field\n            name={'interestRate'}\n            children={(field) => (\n              <InputNumberFormat\n                header={t('interestRate')}\n                placeholder={t('interestRate')}\n                field={field}\n                format='percent'\n                inputMode='decimal'\n                maximumFractionDigits={2}\n              />\n            )}\n          />\n          <form.Field\n            name={'loanTerm'}\n            children={(field) => (\n              <InputNumberFormat\n                format='unit'\n                unit='year'\n                locales={language}\n                header={t('loanTerm')}\n                placeholder={t('loanTerm')}\n                field={field}\n                inputMode='numeric'\n                maximumIntegerDigits={2}\n              />\n            )}\n          />\n          <form.Field\n            name={'startDate'}\n            children={(field) => (\n              <Input\n                header={t('startDate')}\n                placeholder={t('startDate')}\n                field={field}\n                type='date'\n              />\n            )}\n          />\n          <form.Field\n            name={'paymentType'}\n            children={(field) => (\n              <Select\n                header={t('paymentType')}\n                field={field}\n                options={[\n                  {\n                    label: t('annuityPayment'),\n                    value: 'annuity',\n                  },\n                  {\n                    label: t('differentiatedPayment'),\n                    value: 'differentiated',\n                  },\n                ]}\n              />\n            )}\n          />\n          <form.Field\n            name={'paymentDay'}\n            children={(field) => (\n              <Select\n                header={t('paymentDay')}\n                field={field}\n                options={Array.from({ length: 31 }, (_, i) => i + 1).map(\n                  (day) => ({\n                    label: String(day),\n                    value: String(day),\n                  })\n                )}\n              />\n            )}\n          />\n        </List>\n      </Section>\n    );\n  },\n});\n\nexport default memo(LoanDetailsForm);\n","import { memo, useState } from 'react';\nimport { Accordion, Badge, Button, List, Section } from '@telegram-apps/telegram-ui';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport InputNumberFormat from '@/components/ui/InputNumberFormat';\nimport Select from '@/components/ui/Select';\nimport Input from '@/components/ui/Input';\nimport { formOpts, withForm } from '@/hooks/useLoanForm';\n\nconst EarlyPaymentsForm = withForm({\n  ...formOpts,\n  render: function Render({ form }) {\n    const [open, setOpen] = useState(false);\n    const { t } = useLocalization();\n\n    return (\n      <Section>\n        <form.Field name='earlyPayments' mode='array'>\n          {(field) => {\n            return (\n              <Accordion\n                expanded={open}\n                onChange={() => setOpen((prev) => !prev)}\n              >\n                <Accordion.Summary>\n                  {t('earlyPayment')}\n                  {Boolean(field.state.value.length) && (\n                    <Badge large type='dot'>\n                      {field.state.value.length}\n                    </Badge>\n                  )}\n                </Accordion.Summary>\n                <Accordion.Content style={{ background: 'transparent' }}>\n                  <Section>\n                    {field.state.value.map((_, i) => {\n                      return (\n                        <List key={i}>\n                          <form.Field\n                            name={`earlyPayments[${i}].amount`}\n                            children={(field) => (\n                              <InputNumberFormat\n                                header={t('earlyPaymentAmount')}\n                                placeholder={t('earlyPaymentAmount')}\n                                field={field}\n                                inputMode='decimal'\n                                maximumFractionDigits={2}\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`earlyPayments[${i}].date`}\n                            children={(field) => (\n                              <Input\n                                header={t('earlyPaymentDate')}\n                                placeholder={t('earlyPaymentDate')}\n                                field={field}\n                                type='date'\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`earlyPayments[${i}].type`}\n                            children={(field) => (\n                              <Select\n                                header={t('earlyPaymentType')}\n                                field={field}\n                                options={[\n                                  {\n                                    label: t('typeReduceTerm'),\n                                    value: 'reduceTerm',\n                                  },\n                                  {\n                                    label: t('typeReducePayment'),\n                                    value: 'reducePayment',\n                                  },\n                                ]}\n                              />\n                            )}\n                          />\n                          <form.Subscribe\n                            selector={(state) => [\n                              state.isFieldsValid,\n                              state.isValid,\n                            ]}\n                            children={([isFieldsValid, isValid]) => (\n                              <Button\n                                size='s'\n                                mode='outline'\n                                disabled={!isFieldsValid || !isValid}\n                                stretched\n                                onClick={() => field.removeValue(i)}\n                              >\n                                {t('remove')}\n                              </Button>\n                            )}\n                          />\n                        </List>\n                      );\n                    })}\n                    <form.Subscribe\n                      selector={(state) => [state.isFieldsValid, state.isValid]}\n                      children={([isFieldsValid, isValid]) => (\n                        <Button\n                          disabled={!isFieldsValid || !isValid}\n                          stretched\n                          onClick={() =>\n                            field.pushValue({\n                              amount: '',\n                              date: new Date().toISOString().split('T')[0],\n                              id: Date.now().toString(),\n                              type: 'reduceTerm',\n                            })\n                          }\n                        >\n                          {t('addEarlyPayment')}\n                        </Button>\n                      )}\n                    />\n                  </Section>\n                </Accordion.Content>\n              </Accordion>\n            );\n          }}\n        </form.Field>\n      </Section>\n    );\n  },\n});\n\nexport default memo(EarlyPaymentsForm); ","import { memo, useState } from 'react';\nimport { Accordion, Badge, Button, List, Section } from '@telegram-apps/telegram-ui';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport InputNumberFormat from '@/components/ui/InputNumberFormat';\nimport Select from '@/components/ui/Select';\nimport Input from '@/components/ui/Input';\nimport { formOpts, withForm } from '@/hooks/useLoanForm';\n\n/**\n * Form component for regular payments\n * Allows users to set up recurring monthly payments with a specified amount,\n * date range, and recalculation type (reduce term or reduce payment)\n */\nconst RegularPaymentsForm = withForm({\n  ...formOpts,\n  render: function Render({ form }) {\n    const [open, setOpen] = useState(false);\n    const { t } = useLocalization();\n\n    return (\n      <Section>\n        <form.Field name='regularPayments' mode='array'>\n          {(field) => {\n            return (\n              <Accordion\n                expanded={open}\n                onChange={() => setOpen((prev) => !prev)}\n              >\n                <Accordion.Summary>\n                  {t('regularPayment')}\n                  {Boolean(field.state.value.length) && (\n                    <Badge large type='dot'>\n                      {field.state.value.length}\n                    </Badge>\n                  )}\n                </Accordion.Summary>\n                <Accordion.Content style={{ background: 'transparent' }}>\n                  <Section>\n                    {field.state.value.map((_, i) => {\n                      return (\n                        <List key={i}>\n                          <form.Field\n                            name={`regularPayments[${i}].amount`}\n                            children={(field) => (\n                              <InputNumberFormat\n                                header={t('regularPaymentAmount')}\n                                placeholder={t('regularPaymentAmount')}\n                                field={field}\n                                inputMode='decimal'\n                                maximumFractionDigits={2}\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`regularPayments[${i}].startMonth`}\n                            children={(field) => (\n                              <Input\n                                header={t('startMonth')}\n                                placeholder={t('startMonth')}\n                                field={field}\n                                type='date'\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`regularPayments[${i}].endMonth`}\n                            children={(field) => (\n                              <Input\n                                header={t('endMonth')}\n                                placeholder={t('endMonth')}\n                                field={field}\n                                type='date'\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`regularPayments[${i}].type`}\n                            children={(field) => (\n                              <Select\n                                header={t('earlyPaymentType')}\n                                field={field}\n                                options={[\n                                  {\n                                    label: t('typeReduceTerm'),\n                                    value: 'reduceTerm',\n                                  },\n                                  {\n                                    label: t('typeReducePayment'),\n                                    value: 'reducePayment',\n                                  },\n                                ]}\n                              />\n                            )}\n                          />\n                          <form.Subscribe\n                            selector={(state) => [\n                              state.isFieldsValid,\n                              state.isValid,\n                            ]}\n                            children={([isFieldsValid, isValid]) => (\n                              <Button\n                                size='s'\n                                mode='outline'\n                                disabled={!isFieldsValid || !isValid}\n                                stretched\n                                onClick={() => field.removeValue(i)}\n                              >\n                                {t('remove')}\n                              </Button>\n                            )}\n                          />\n                        </List>\n                      );\n                    })}\n                    <form.Subscribe\n                      selector={(state) => [state.isFieldsValid, state.isValid]}\n                      children={([isFieldsValid, isValid]) => (\n                        <Button\n                          disabled={!isFieldsValid || !isValid}\n                          stretched\n                          onClick={() => {\n                            const today = new Date();\n                            const nextMonth = new Date(today);\n                            nextMonth.setMonth(today.getMonth() + 1);\n                            \n                            field.pushValue({\n                              amount: '',\n                              startMonth: today.toISOString().split('T')[0],\n                              endMonth: nextMonth.toISOString().split('T')[0],\n                              id: Date.now().toString(),\n                              type: 'reduceTerm',\n                            });\n                          }}\n                        >\n                          {t('addRegularPayment')}\n                        </Button>\n                      )}\n                    />\n                  </Section>\n                </Accordion.Content>\n              </Accordion>\n            );\n          }}\n        </form.Field>\n      </Section>\n    );\n  },\n});\n\nexport default memo(RegularPaymentsForm);\n","import { FC, memo } from 'react';\n\nimport { List, Section, Button } from '@telegram-apps/telegram-ui';\n\nimport LoanDetailsForm from '@/components/form/LoanDetailsForm';\nimport EarlyPaymentsForm from '@/components/form/EarlyPaymentsForm';\nimport RegularPaymentsForm from '@/components/form/RegularPaymentsForm';\n\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { useLoanForm } from '@/hooks/useLoanForm';\nimport Page from '@/components/Page';\n\nconst LoanForm: FC = () => {\n  const { t } = useLocalization();\n  const form = useLoanForm();\n\n  return (\n    <Page back={false}>\n      <List\n        Component='form'\n        onSubmit={(event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          form.handleSubmit();\n        }}\n      >\n        <LoanDetailsForm form={form} />\n        <EarlyPaymentsForm form={form} />\n        <RegularPaymentsForm form={form} />\n        <Section>\n          <form.Subscribe\n            selector={(state) => [state.canSubmit, state.isSubmitting]}\n            children={([canSubmit, isSubmitting]) => (\n              <Button\n                type='submit'\n                stretched\n                disabled={!canSubmit}\n                loading={isSubmitting}\n              >\n                {t('calculate')}\n              </Button>\n            )}\n          />\n        </Section>\n      </List>\n    </Page>\n  );\n};\n\nexport default memo(LoanForm);\n"],"names":["Input","forwardRef","props","forwardedRef","field","rest","isTouched","errors","isValidating","state","meta","jsxs","Fragment","children","jsx","TGInput","ref","id","name","value","onBlur","handleBlur","onChange","e","handleChange","target","status","length","after","Spinner","size","Caption","style","color","padding","map","error","message","join","InputNumberFormat","RIInputNumberFormat","component","Select","options","TGSelect","label","defaultLoanDetails","loanAmount","interestRate","loanTerm","startDate","Date","toISOString","split","paymentType","paymentDay","getDate","toLocaleString","earlyPayments","regularPayments","useLocalizedSchemas","t","language","useLocalization","schemas","useMemo","z","setErrorMap","issue","ctx","defaultError","defaultErrorMap","code","ZodIssueCode","invalid_type","expected","too_small","type","minimum","createNumberSchema","fieldName","min","max","string","transform","val","unformatted","unformat","parseFloat","refine","isNaN","createDateSchema","date","dateObj","getTime","createDateRangeRefinement","startField","endField","endIsOptional","data","getDateRangeErrorMessage","path","createLocalizedSchemas","fieldContext","formContext","createFormHookContexts","useAppForm","withForm","createFormHook","fieldComponents","formComponents","formOpts","formOptions","defaultValues","useLoanForm","setLoanDetails","setEarlyPayments","setRegularPayments","useMortgage","navigate","useNavigate","formSchema","loanDetailsSchema","object","enum","parseInt","earlyPaymentSchema","amount","regularPaymentSchema","startMonth","endMonth","regularEarlyPaymentSchema","optional","shape","array","extend","useLocalizedFormSchemas","validators","onSubmit","async","loanDetails","values","earlyPayment","regularPayment","console","LoanDetailsForm","render","form","Section","header","List","Field","placeholder","inputMode","maximumFractionDigits","format","unit","locales","maximumIntegerDigits","Array","from","_","i","day","String","memo","EarlyPaymentsForm","open","setOpen","useState","mode","Accordion","expanded","prev","Summary","Boolean","Badge","large","Content","background","Subscribe","selector","isFieldsValid","isValid","Button","disabled","stretched","onClick","removeValue","pushValue","now","toString","RegularPaymentsForm","today","nextMonth","setMonth","getMonth","Page","back","Component","event","preventDefault","stopPropagation","handleSubmit","canSubmit","isSubmitting","loading"],"mappings":"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"}