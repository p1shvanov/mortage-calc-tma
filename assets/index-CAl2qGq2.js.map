{"version":3,"mappings":"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","names":["m","require$$0","client","createRoot","hydrateRoot","memo","error","children","jsx","Error","message","JSON","stringify","ErrorBoundary","Component","state","static","componentDidCatch","this","setState","render","props","fallback","Fallback","translations","en","appTitle","mustBeNumber","mustBeGreaterThan","mustBeLessThan","invalidDate","endDateAfterStart","invalidNumber","mustBePositive","dayOfMonth","loanDetails","homeValue","downPayment","loanAmount","interestRate","loanTerm","startDate","paymentType","annuityPayment","differentiatedPayment","paymentDay","paymentDayMonthly","paymentDaySpecific","paymentSummary","monthlyPayment","totalInterest","totalCost","planPayoffDate","actualPayoffDate","earlyPayment","earlyPaymentAmount","earlyPaymentMonth","earlyPaymentDate","earlyPaymentType","typeReduceTerm","typeReducePayment","addEarlyPayment","earlyPaymentList","remove","paymentHistory","totalEarlyPayments","errorPaymentAmount","errorPaymentMonth","errorPaymentDate","regularPayment","regularPaymentAmount","startMonth","endMonth","addRegularPayment","insufficientPayment","yes","finalPayment","originalPayment","savings","monthsSaved","totalSavings","amortization","paymentSchedule","month","date","payment","principal","interest","extraPayment","balance","previous","next","showingPayments","graphicalView","paymentBreakdown","amortizationSchedule","paymentAmount","paymentDistribution","interestSavings","newTotalInterest","interestSaved","monthlyPaymentBreakdown","totalPaymentBreakdown","mortgageComparison","original","withEarlyPayments","errorHomeValue","errorDownPayment","errorDownPaymentMax","errorInterestRate","errorLoanTerm","calculate","reset","years","months","ru","LocalizationContext","createContext","useLocalization","context","useContext","LocalizationProvider","language","setLanguage","useState","launchParams","retrieveLaunchParams","tgWebAppData","user","language_code","console","getUserLanguage","Provider","value","t","key","params","enTranslations","translation","Object","entries","reduce","acc","paramKey","paramValue","replace","String","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatNumber","formatDate","Date","toLocaleDateString","InterestCalculationMethod","calculateMonthlyPayment","annualInterestRate","termInYears","paymentNumber","fixedPrincipalPortion","calculateDifferentiatedMonthlyPayment","monthlyRate","numberOfPayments","Math","pow","daysBetween","endDate","diffTime","abs","getTime","round","daysInYear","year","getFullYear","calculateInterestForPeriod","method","days","fallbackDays","calculateMortgage","totalPayments","i","payoffDate","loanTermYears","setFullYear","toISOString","split","calculatePayoffDate","LocalMortgageService","result","effectiveInterestRate","generateAmortizationSchedule","earlyPayments","regularPayments","interestCalculationMethod","ACTUAL_365","originalMonthlyPayment","sortedEarlyPayments","sort","a","b","earlyPaymentsByDate","Map","forEach","set","amount","type","schedule","currentMonthlyPayment","startDateObj","originalTotalInterest","remainingBalance","hadReducePaymentType","currentDate","remainingTerm","paymentDate","setMonth","getMonth","lastDay","getDate","adjustedDay","min","setDate","newBalance","dateStr","extraPaymentType","isRegularPayment","has","get","currentPaymentDate","excessAmount","remainingMonths","estimatedRemainingPayments","ceil","log","push","max","regularPaymentMessage","summary","originalTerm","newTerm","length","finalMonthlyPayment","ServerMortgageService","_apiBaseUrl","constructor","apiBaseUrl","_params","mortgageConfig","mortgageService","createMortgageService","warn","MortgageContext","MortgageProvider","setLoanDetails","setEarlyPayments","setRegularPayments","mortgageResults","setMortgageResults","amortizationResult","setAmortizationResult","useEffect","then","results","catch","useMortgage","LineChart","lazy","import","__VITE_PRELOAD__","PieChart","BarChart","DoughnutChart","RadarChart","useMemo","map","item","toString","padStart","slice","principals","interests","balances","extraPaymentInfo","hasExtraPayment","isRegular","lineChartData","labels","datasets","label","data","borderColor","backgroundColor","fill","yAxisID","borderDash","pieChartData","totalPrincipal","sum","borderWidth","comparisonPieChartData","some","originalInterest","newInterest","barChartData","interval","floor","filteredMonths","filter","_","filteredPrincipals","filteredInterests","doughnutChartData","totalExtraPayments","hoverOffset","radarChartData","normalizedNewTerm","normalizedNewInterest","normalizedFinalPayment","pointBackgroundColor","jsxs","Fragment","Suspense","Skeleton","visible","title","Icon28Stats","_param","restProps","_extends","_object_destructuring_empty","_jsx","_object_spread_props","_object_spread","width","height","xmlns","fillRule","clipRule","d","Table","className","styles","tableContainer","table","TableHead","tableHead","TableBody","tableBody","TableRow","highlight","tableRow","TableCell","header","tableHeader","Caption","weight","tableCell","Text","useSignal","viewportState","currentPage","setCurrentPage","selectedItemIndex","setSelectedItemIndex","isModalOpened","setIsModalOpened","firstPayment","totalPages","startIndex","endIndex","currentItems","Section","Modal","onOpenChange","open","nested","Header","large","from","to","total","index","Boolean","IconButton","size","onClick","handleIconClick","marginLeft","color","Footer","centered","Pagination","siblingCount","boundaryCount","page","count","onChange","hasEarlyPayments","footer","Cell","readOnly","before","subtitle","subhead","tabPanel","tabs","defaultTab","activeTab","setActiveTab","id","activeChild","React","Children","toArray","find","child","isValidElement","SegmentedControl","tab","SegmentedControlItem","selected","icon","IconContainer","back","navigate","useNavigate","inset","viewport","safeAreaInsets","contentInset","contentSafeAreaInsets","backButton","show","hide","paddingTop","top","paddingLeft","left","paddingRight","right","Input","forwardRef","forwardedRef","field","rest","isTouched","errors","isValidating","meta","TGInput","ref","name","onBlur","handleBlur","e","handleChange","target","status","after","Spinner","padding","join","InputNumberFormat","RIInputNumberFormat","component","Select","options","TGSelect","defaultLoanDetails","toLocaleString","useLocalizedSchemas","schemas","z","setErrorMap","issue","ctx","defaultError","defaultErrorMap","code","ZodIssueCode","invalid_type","expected","too_small","minimum","createNumberSchema","fieldName","string","transform","val","unformatted","unformat","parseFloat","refine","isNaN","createDateSchema","dateObj","createDateRangeRefinement","startField","endField","endIsOptional","getDateRangeErrorMessage","path","createLocalizedSchemas","fieldContext","formContext","createFormHookContexts","useAppForm","withForm","createFormHook","fieldComponents","formComponents","formOpts","formOptions","defaultValues","useLoanForm","formSchema","loanDetailsSchema","object","enum","parseInt","earlyPaymentSchema","regularPaymentSchema","regularEarlyPaymentSchema","optional","shape","array","extend","useLocalizedFormSchemas","async","cloudStorage","isSupported","keys","getKeys","test","getItem","alert","validators","onSubmit","values","setItem","LoanDetailsForm","form","List","Field","placeholder","inputMode","unit","locales","maximumIntegerDigits","Array","day","EarlyPaymentsForm","setOpen","mode","Accordion","expanded","prev","Summary","Badge","Content","background","Subscribe","selector","isFieldsValid","isValid","Button","disabled","stretched","removeValue","pushValue","now","RegularPaymentsForm","today","nextMonth","Page","event","preventDefault","stopPropagation","handleSubmit","canSubmit","isSubmitting","loading","isRecord","v","isArray","classNames","entry","applyMods","element","mod","computeClassnames","mods","bem","block","elem","RGB","Link","propsOnClick","useCallback","search","pathname","hash","targetUrl","URL","window","location","currentUrl","protocol","host","openLink","RouterLink","DisplayData","rows","idx","valueNode","isRGB","Checkbox","checked","multiline","getUserRows","routes","LoanForm","ResultsDisplay","TabView","TabPanel","ChartsContainer","PaymentSchedule","initDataRaw","_initDataRaw","initDataState","_initDataState","initDataRows","userRows","receiverRows","receiver","chatRows","chat","Placeholder","description","alt","src","display","tp","themeParams","toLowerCase","lp","tgWebAppPlatform","tgWebAppShowSettings","tgWebAppVersion","tgWebAppBotInline","tgWebAppStartParam","HashRouter","Routes","route","Route","Navigate","App","isDark","isMiniAppDark","AppRoot","appearance","platform","includes","Router","ErrorBoundaryFallback","miniApp","root","ReactDOM","document","getElementById","debug","setDebug","initSDK","eruda","__vitePreload","default","init","position","x","innerWidth","y","mockForMacOS","firstThemeSent","mockTelegramEnv","onEvent","themeParamsState","tgWebAppThemeParams","emitEvent","theme_params","bottom","restoreInitData","mountSync","Promise","all","mount","bindViewportCssVars","bindMiniAppCssVars","bindThemeParamsCssVars","swipeBehavior","disableVertical","closingBehavior","enableConfirmation","enableClosingConfirmation","Root","EnvUnsupported"],"ignoreList":[0,14],"sources":["../../node_modules/react-dom/client.js","../../src/components/ErrorBoundaryFallback.tsx","../../src/components/ErrorBoundary.tsx","../../src/localization/translations.ts","../../src/providers/LocalizationProvider.tsx","../../src/utils/financialMath.ts","../../src/utils/mortgageCalculator.ts","../../src/services/mortgage/LocalMortgageService.ts","../../src/utils/amortizationSchedule.ts","../../src/services/mortgage/ServerMortgageService.ts","../../src/config/mortgage.ts","../../src/services/mortgage/MortgageServiceFactory.ts","../../src/providers/MortgageProvider.tsx","../../src/components/ChartsContainer.tsx","../../node_modules/@telegram-apps/telegram-ui/dist/icons/28/stats.js","../../src/components/Table.tsx","../../src/components/PaymentSchedule.tsx","../../src/components/ResultsDisplay.tsx","../../src/components/TabPanel.tsx","../../src/components/TabView.tsx","../../src/components/Page.tsx","../../src/pages/MortageResult/MortageResult.tsx","../../src/components/ui/Input.tsx","../../src/components/ui/InputNumberFormat.tsx","../../src/components/ui/Select.tsx","../../src/types/form.ts","../../src/validation/createLocalizedSchemas.ts","../../src/hooks/useLocalizedSchemas.ts","../../src/hooks/useLoanForm.ts","../../src/schemas/localizedSchemas.ts","../../src/utils/unformatFormValues.ts","../../src/components/form/LoanDetailsForm.tsx","../../src/components/form/EarlyPaymentsForm.tsx","../../src/components/form/RegularPaymentsForm.tsx","../../src/pages/LoanForm/LoanForm.tsx","../../src/css/classnames.ts","../../src/css/bem.ts","../../src/components/RGB/RGB.tsx","../../src/components/Link/Link.tsx","../../src/components/DisplayData/DisplayData.tsx","../../src/pages/InitDataPage.tsx","../../src/navigation/routes.tsx","../../src/pages/ThemeParamsPage.tsx","../../src/pages/LaunchParamsPage.tsx","../../src/navigation/Router.tsx","../../src/components/App.tsx","../../src/components/Root.tsx","../../src/components/EnvUnsupported.tsx","../../src/index.tsx","../../src/init.ts"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import { memo } from 'react';\n\nconst ErrorBoundaryFallback = ({ error }: { error: unknown }) => {\n  return (\n    <div>\n      <p>An unhandled error occurred:</p>\n      <blockquote>\n        <code>\n          {error instanceof Error\n            ? error.message\n            : typeof error === 'string'\n            ? error\n            : JSON.stringify(error)}\n        </code>\n      </blockquote>\n    </div>\n  );\n};\n\nexport default memo(ErrorBoundaryFallback);\n","import {\n  Component,\n  type ComponentType,\n  type GetDerivedStateFromError,\n  type PropsWithChildren,\n  type ReactNode,\n} from 'react';\n\nexport interface ErrorBoundaryProps extends PropsWithChildren {\n  fallback?: ReactNode | ComponentType<{ error: unknown }>;\n}\n\ninterface ErrorBoundaryState {\n  error?: unknown;\n}\n\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  state: ErrorBoundaryState = {};\n\n  // eslint-disable-next-line max-len\n  static getDerivedStateFromError: GetDerivedStateFromError<ErrorBoundaryProps, ErrorBoundaryState> = (error) => ({ error });\n\n  componentDidCatch(error: Error) {\n    this.setState({ error });\n  }\n\n  render() {\n    const {\n      state: {\n        error,\n      },\n      props: {\n        fallback: Fallback,\n        children,\n      },\n    } = this;\n\n    return 'error' in this.state\n      ? typeof Fallback === 'function'\n        ? <Fallback error={error} />\n        : Fallback\n      : children;\n  }\n}\n\nexport default ErrorBoundary;\n\n","export const translations = {\n  en: {\n    // App\n    appTitle: 'Mortgage Calculator',\n\n    // Validation\n    mustBeNumber: '{field} must be a number',\n    mustBeGreaterThan: '{field} must be greater than {value}',\n    mustBeLessThan: '{field} must be less than or equal to {value}',\n    invalidDate: '{field} has an invalid date format',\n    endDateAfterStart: '{endField} must be after {startField}',\n    invalidNumber: 'Must be a valid number',\n    mustBePositive: 'Must be a positive number',\n    dayOfMonth: 'Day must be between 1 and 31',\n\n    // Loan Details\n    loanDetails: 'Loan Details',\n    homeValue: 'Home Value',\n    downPayment: 'Down Payment',\n    loanAmount: 'Loan Amount',\n    interestRate: 'Interest Rate',\n    loanTerm: 'Loan Term (years)',\n    startDate: 'Start Date',\n    paymentType: 'Payment Type',\n    annuityPayment: 'Annuity',\n    differentiatedPayment: 'Differentiated',\n    paymentDay: 'Payment Day',\n    paymentDayMonthly: 'Same day as start date',\n    paymentDaySpecific: 'Specific day of month',\n\n    // Results\n    paymentSummary: 'Payment Summary',\n    monthlyPayment: 'Monthly Payment',\n    totalInterest: 'Total Interest',\n    totalCost: 'Total Cost',\n    planPayoffDate: 'Plan Payoff Date',\n    actualPayoffDate: 'Actual Payoff Date',\n\n    // Early Payment\n    earlyPayment: 'Early Payment',\n    earlyPaymentAmount: 'Additional Amount',\n    earlyPaymentMonth: 'Month of Payment',\n    earlyPaymentDate: 'Date of Payment',\n    earlyPaymentType: 'Payment Type',\n    typeReduceTerm: 'Reduce Term',\n    typeReducePayment: 'Reduce Payment',\n    addEarlyPayment: 'Add Early Payment',\n    earlyPaymentList: 'Scheduled Early Payments',\n    remove: 'Remove',\n    paymentHistory: 'Early Payments',\n    totalEarlyPayments: 'Total Early Payments',\n    errorPaymentAmount: 'Payment amount must be greater than 0',\n    errorPaymentMonth: 'Payment month must be within the loan term',\n    errorPaymentDate: 'Payment date must be within the loan term',\n\n    // Regular Payment\n    regularPayment: 'Regular Payment',\n    regularPaymentAmount: 'Regular Payment Amount',\n    startMonth: 'Start Month',\n    endMonth: 'End Month (Optional)',\n    addRegularPayment: 'Add Regular Payment',\n    insufficientPayment: 'Insufficient',\n    yes: 'Yes',\n\n    // Results with Early Payments\n    finalPayment: 'Final Payment',\n    originalPayment: 'Original Payment',\n    savings: 'Interest Savings',\n    monthsSaved: 'Months Saved',\n    totalSavings: 'Total Interest Savings',\n\n    // Payment Schedule\n    amortization: 'Amortization Schedule',\n    paymentSchedule: 'Payment Schedule',\n    month: 'Month',\n    date: 'Date',\n    payment: 'Payment',\n    principal: 'Principal',\n    interest: 'Interest',\n    extraPayment: 'Extra Payment',\n    balance: 'Balance',\n    previous: 'Previous',\n    next: 'Next',\n    showingPayments: 'Showing payments {from}-{to} of {total}',\n\n    // Charts\n    graphicalView: 'Graphical View',\n    paymentBreakdown: 'Payment Breakdown',\n    amortizationSchedule: 'Amortization Schedule',\n    paymentAmount: 'Payment Amount',\n    paymentDistribution: 'Payment Distribution',\n    interestSavings: 'Interest Savings',\n    newTotalInterest: 'New Total Interest',\n    interestSaved: 'Interest Saved',\n    monthlyPaymentBreakdown: 'Monthly Payment Breakdown',\n    totalPaymentBreakdown: 'Total Payment Breakdown',\n    mortgageComparison: 'Mortgage Comparison',\n    original: 'Original Mortgage',\n    withEarlyPayments: 'With Early Payments',\n\n    // Validation\n    errorHomeValue: 'Home value must be greater than 0',\n    errorDownPayment: 'Down payment must be greater than 0',\n    errorDownPaymentMax: 'Down payment must be less than home value',\n    errorInterestRate: 'Interest rate must be greater than 0',\n    errorLoanTerm: 'Loan term must be greater than 0',\n\n    // Common\n    calculate: 'Calculate',\n    reset: 'Reset',\n    years: 'years',\n    months: 'months',\n  },\n  ru: {\n    // App\n    appTitle: 'Ипотечный калькулятор',\n\n    // Validation\n    mustBeNumber: '{field} должен быть числом',\n    mustBeGreaterThan: '{field} должен быть больше {value}',\n    mustBeLessThan: '{field} должен быть меньше или равен {value}',\n    invalidDate: '{field} имеет неверный формат даты',\n    endDateAfterStart: '{endField} должен быть после {startField}',\n    invalidNumber: 'Должно быть действительным числом',\n    mustBePositive: 'Должно быть положительным числом',\n    dayOfMonth: 'День должен быть между 1 и 31',\n\n    // Loan Details\n    loanDetails: 'Детали кредита',\n    homeValue: 'Стоимость недвижимости',\n    downPayment: 'Первоначальный взнос',\n    loanAmount: 'Сумма кредита',\n    interestRate: 'Процентная ставка',\n    loanTerm: 'Срок кредита (лет)',\n    startDate: 'Дата начала',\n    paymentType: 'Тип платежа',\n    annuityPayment: 'Аннуитетный',\n    differentiatedPayment: 'Дифференцированный',\n    paymentDay: 'День платежа',\n    paymentDayMonthly: 'В тот же день, что и дата начала',\n    paymentDaySpecific: 'Конкретный день месяца',\n\n    // Results\n    paymentSummary: 'Сводка по платежам',\n    monthlyPayment: 'Ежемесячный платеж',\n    totalInterest: 'Общий процент',\n    totalCost: 'Общая стоимость',\n    planPayoffDate: 'Плановая дата погашения',\n    actualPayoffDate: 'Фактическая дата погашения',\n\n    // Early Payment\n    earlyPayment: 'Досрочное погашение',\n    earlyPaymentAmount: 'Дополнительная сумма',\n    earlyPaymentMonth: 'Месяц платежа',\n    earlyPaymentDate: 'Дата платежа',\n    earlyPaymentType: 'Тип платежа',\n    typeReduceTerm: 'Сократить срок',\n    typeReducePayment: 'Уменьшить платеж',\n    addEarlyPayment: 'Добавить досрочный платеж',\n    earlyPaymentList: 'Запланированные досрочные платежи',\n    remove: 'Удалить',\n    paymentHistory: 'Досрочные платежи',\n    totalEarlyPayments: 'Всего досрочных платежей',\n    errorPaymentAmount: 'Сумма платежа должна быть больше 0',\n    errorPaymentMonth: 'Месяц платежа должен быть в пределах срока кредита',\n    errorPaymentDate: 'Дата платежа должна быть в пределах срока кредита',\n\n    // Regular Payment\n    regularPayment: 'Регулярный платеж',\n    regularPaymentAmount: 'Сумма регулярного платежа',\n    startMonth: 'Месяц начала',\n    endMonth: 'Месяц окончания (Опционально)',\n    addRegularPayment: 'Добавить регулярный платеж',\n    insufficientPayment: 'Недостаточно',\n    yes: 'Да',\n\n    // Results with Early Payments\n    finalPayment: 'Итоговый платеж',\n    originalPayment: 'Первоначальный платеж',\n    savings: 'Экономия на процентах',\n    monthsSaved: 'Сэкономлено месяцев',\n    totalSavings: 'Общая экономия на процентах',\n\n    // Payment Schedule\n    amortization: 'График платежей',\n    paymentSchedule: 'График платежей',\n    month: 'Месяц',\n    date: 'Дата',\n    payment: 'Платеж',\n    principal: 'Основной долг',\n    interest: 'Проценты',\n    extraPayment: 'Досрочный платеж',\n    balance: 'Остаток',\n    previous: 'Назад',\n    next: 'Вперед',\n    showingPayments: 'Платежи {from}-{to} из {total}',\n\n    // Charts\n    graphicalView: 'Графическое представление',\n    paymentBreakdown: 'Структура платежа',\n    amortizationSchedule: 'График погашения',\n    paymentAmount: 'Сумма платежа',\n    paymentDistribution: 'Распределение платежей',\n    interestSavings: 'Экономия на процентах',\n    newTotalInterest: 'Новая общая сумма процентов',\n    interestSaved: 'Сэкономленные проценты',\n    monthlyPaymentBreakdown: 'Ежемесячная структура платежей',\n    totalPaymentBreakdown: 'Общая структура платежей',\n    mortgageComparison: 'Сравнение ипотеки',\n    original: 'Первоначальная ипотека',\n    withEarlyPayments: 'С досрочными платежами',\n\n    // Validation\n    errorHomeValue: 'Стоимость недвижимости должна быть больше 0',\n    errorDownPayment: 'Первоначальный взнос должен быть больше 0',\n    errorDownPaymentMax:\n      'Первоначальный взнос должен быть меньше стоимости жилья',\n    errorInterestRate: 'Процентная ставка должна быть больше 0',\n    errorLoanTerm: 'Срок кредита должен быть больше 0',\n\n    // Common\n    calculate: 'Рассчитать',\n    reset: 'Сбросить',\n    years: 'лет',\n    months: 'месяцев',\n  },\n};\n","import React, { createContext, useContext, useState } from 'react';\nimport { retrieveLaunchParams } from '@telegram-apps/sdk-react';\nimport { translations } from '@/localization/translations';\n\n// Define supported languages\nexport type SupportedLanguage = 'en' | 'ru';\n\n// Define the context interface\ninterface LocalizationContextType {\n  language: SupportedLanguage;\n  setLanguage: (lang: SupportedLanguage) => void;\n  t: (key: string, params?: Record<string, string | number>) => string;\n  formatCurrency: (value: number) => string;\n  formatNumber: (value: number) => string;\n  formatDate: (date: Date | string) => string;\n}\n\n// Create the context\nconst LocalizationContext = createContext<LocalizationContextType | undefined>(undefined);\n\n// Create a hook for using the localization context\nexport const useLocalization = () => {\n  const context = useContext(LocalizationContext);\n  if (!context) {\n    throw new Error('useLocalization must be used within a LocalizationProvider');\n  }\n  return context;\n};\n\n// Create the provider component\nexport const LocalizationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  // Get the user's language from Telegram\n  const getUserLanguage = (): SupportedLanguage => {\n    try {\n      const launchParams = retrieveLaunchParams();\n      const userLang = launchParams.tgWebAppData?.user?.language_code || 'en';\n      \n      // Check if the language is supported, otherwise fallback to English\n      return userLang === 'ru' ? 'ru' : 'en';\n    } catch (error) {\n      console.error('Error retrieving user language:', error);\n      return 'en';\n    }\n  };\n\n  // Initialize language state\n  const [language, setLanguage] = useState<SupportedLanguage>(getUserLanguage());\n\n  // Translation function\n  const t = (key: string, params?: Record<string, string | number>): string => {\n    // Type assertion to allow string indexing\n    const langTranslations = translations[language] as Record<string, string>;\n    const enTranslations = translations.en as Record<string, string>;\n    \n    const translation = langTranslations[key] || enTranslations[key] || key;\n    \n    if (params) {\n      return Object.entries(params).reduce((acc, [paramKey, paramValue]) => {\n        return acc.replace(`{${paramKey}}`, String(paramValue));\n      }, translation);\n    }\n    \n    return translation;\n  };\n\n  // Format currency based on language\n  const formatCurrency = (value: number): string => {\n    if (language === 'ru') {\n      return new Intl.NumberFormat('ru-RU', {\n        style: 'currency',\n        currency: 'RUB',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }).format(value);\n    }\n    \n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  // Format number based on language\n  const formatNumber = (value: number): string => {\n    return new Intl.NumberFormat(language === 'ru' ? 'ru-RU' : 'en-US').format(value);\n  };\n\n  // Format date based on language\n  const formatDate = (date: Date | string): string => {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString(language === 'ru' ? 'ru-RU' : 'en-US');\n  };\n\n  return (\n    <LocalizationContext.Provider\n      value={{\n        language,\n        setLanguage,\n        t,\n        formatCurrency,\n        formatNumber,\n        formatDate\n      }}\n    >\n      {children}\n    </LocalizationContext.Provider>\n  );\n};\n","/**\n * Types of interest calculation methods\n * Preparation for future functionality expansion\n */\nexport enum InterestCalculationMethod {\n  ACTUAL_365 = 'ACTUAL_365', // Current method\n  THIRTY_360 = 'THIRTY_360',\n  ACTUAL_ACTUAL = 'ACTUAL_ACTUAL',\n}\n\n/**\n * Types of loan payments\n */\nexport type PaymentType = 'annuity' | 'differentiated';\n\n/**\n * Calculate monthly payment for a differentiated loan\n * In differentiated payments, the principal portion is fixed, and the interest portion decreases over time\n */\nexport function calculateDifferentiatedMonthlyPayment(\n  principal: number,\n  annualInterestRate: number,\n  termInYears: number,\n  paymentNumber: number = 1 // 1-based payment number\n): number {\n  const monthlyRate = annualInterestRate / 100 / 12;\n  const numberOfPayments = termInYears * 12;\n  const fixedPrincipalPortion = principal / numberOfPayments;\n  const remainingPrincipal = principal - (fixedPrincipalPortion * (paymentNumber - 1));\n  const interestPortion = remainingPrincipal * monthlyRate;\n  \n  return fixedPrincipalPortion + interestPortion;\n}\n\n/**\n * Calculate monthly payment for a loan\n */\nexport function calculateMonthlyPayment(\n  principal: number,\n  annualInterestRate: number,\n  termInYears: number,\n  paymentType: PaymentType = 'annuity',\n  paymentNumber: number = 1\n): number {\n  if (paymentType === 'differentiated') {\n    return calculateDifferentiatedMonthlyPayment(principal, annualInterestRate, termInYears, paymentNumber);\n  }\n  \n  // Annuity payment calculation\n  // Monthly interest rate (annual rate divided by 12 and converted to decimal)\n  const monthlyRate = annualInterestRate / 100 / 12;\n  \n  // Total number of payments (years * 12 months)\n  const numberOfPayments = termInYears * 12;\n  \n  // Calculate monthly payment using the amortization formula\n  // M = P * (r * (1 + r)^n) / ((1 + r)^n - 1)\n  return (\n    (principal * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / \n    (Math.pow(1 + monthlyRate, numberOfPayments) - 1)\n  );\n}\n\n/**\n * Calculate the number of days between two dates\n */\nexport function daysBetween(startDate: Date, endDate: Date): number {\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n  const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n  return Math.round(diffTime / oneDay);\n}\n\n/**\n * Calculate the number of days in a year (accounts for leap years)\n */\nexport function daysInYear(date: Date): number {\n  const year = date.getFullYear();\n  return ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? 366 : 365;\n}\n\n/**\n * Calculate interest for a period based on calculation method\n * Currently only ACTUAL_365 is implemented, others are reserved for future\n */\nexport function calculateInterestForPeriod(\n  balance: number,\n  annualInterestRate: number,\n  startDate: Date,\n  endDate: Date,\n  method: InterestCalculationMethod = InterestCalculationMethod.ACTUAL_365\n): number {\n  switch (method) {\n    case InterestCalculationMethod.ACTUAL_365:\n      const days = daysBetween(startDate, endDate);\n      const yearDays = daysInYear(startDate);\n      const dailyRate = annualInterestRate / 100 / yearDays;\n      return balance * dailyRate * days;\n    \n    // Reserved for future calculation methods\n    case InterestCalculationMethod.THIRTY_360:\n    case InterestCalculationMethod.ACTUAL_ACTUAL:\n    default:\n      // For now, use ACTUAL_365 for all methods\n      const fallbackDays = daysBetween(startDate, endDate);\n      const fallbackYearDays = daysInYear(startDate);\n      const fallbackDailyRate = annualInterestRate / 100 / fallbackYearDays;\n      return balance * fallbackDailyRate * fallbackDays;\n  }\n}\n\n/**\n * Calculate the payoff date based on start date and loan term\n */\nexport function calculatePayoffDate(startDate: string, loanTermYears: number): string {\n  const date = new Date(startDate);\n  date.setFullYear(date.getFullYear() + loanTermYears);\n  return date.toISOString().split('T')[0];\n}\n\n/**\n * Get the last day of a month\n */\nexport function getLastDayOfMonth(year: number, month: number): number {\n  // month is 0-based in JavaScript Date (0 = January, 11 = December)\n  // Create a date for the first day of the next month, then subtract one day\n  return new Date(year, month + 1, 0).getDate();\n}\n\n/**\n * Adjust payment day to handle months with fewer days\n * If the specified day is greater than the number of days in the month,\n * return the last day of the month\n */\nexport function adjustPaymentDay(date: Date, paymentDay: number): Date {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const lastDay = getLastDayOfMonth(year, month);\n  \n  // If payment day is greater than the last day of the month, use the last day\n  const adjustedDay = Math.min(paymentDay, lastDay);\n  \n  const result = new Date(date);\n  result.setDate(adjustedDay);\n  return result;\n}\n","import {\n  calculateMonthlyPayment,\n  calculatePayoffDate,\n  PaymentType,\n} from './financialMath';\n\nexport interface MortgageParams {\n  loanAmount: number;\n  interestRate: number;\n  loanTerm: number; // in years\n  startDate: string;\n  paymentType?: PaymentType; // Preparation for future extension\n  paymentDay?: number; // Preparation for future extension - day of monthly payment\n}\n\nexport interface MortgageResults {\n  monthlyPayment: number;\n  totalInterest: number;\n  totalCost: number;\n  payoffDate: string;\n  loanTerm: number;\n  // Additional fields for future extensions\n  effectiveInterestRate?: number; // Effective interest rate\n  paymentType: PaymentType;\n}\n\n/**\n * Calculate mortgage results based on input parameters\n */\nexport function calculateMortgage(params: MortgageParams): MortgageResults {\n  const { \n    loanAmount, \n    interestRate, \n    loanTerm, \n    startDate,\n    paymentType = 'annuity', // Default to annuity payments\n    // paymentDay\n  } = params;\n  \n  // Calculate monthly payment\n  const monthlyPayment = calculateMonthlyPayment(loanAmount, interestRate, loanTerm, paymentType);\n  \n  // Calculate total cost based on payment type\n  let totalCost: number;\n  \n  if (paymentType === 'differentiated') {\n    // For differentiated payments, we need to calculate each payment separately\n    // and sum them up, since they decrease over time\n    let totalPayments = 0;\n    const numberOfPayments = loanTerm * 12;\n    \n    for (let i = 1; i <= numberOfPayments; i++) {\n      totalPayments += calculateMonthlyPayment(loanAmount, interestRate, loanTerm, paymentType, i);\n    }\n    \n    totalCost = totalPayments;\n  } else {\n    // For annuity payments, all payments are the same\n    totalCost = monthlyPayment * loanTerm * 12;\n  }\n  \n  // Calculate total interest (total cost - loan amount)\n  const totalInterest = totalCost - loanAmount;\n  \n  // Calculate payoff date\n  const payoffDate = calculatePayoffDate(startDate, loanTerm);\n  \n  return {\n    monthlyPayment,\n    totalInterest,\n    totalCost,\n    payoffDate,\n    loanTerm,\n    paymentType\n  };\n}\n","import { calculateMortgage } from '@/utils/mortgageCalculator';\nimport { generateAmortizationSchedule } from '@/utils/amortizationSchedule';\nimport { \n  IMortgageService, \n  MortgageCalculationParams, \n  MortgageCalculationResults,\n  AmortizationScheduleResults\n} from './IMortgageService';\n\n/**\n * Local implementation of the mortgage service\n * This implementation uses the local utility functions for calculations\n */\nexport class LocalMortgageService implements IMortgageService {\n  /**\n   * Calculate mortgage results based on input parameters\n   * @param params Mortgage calculation parameters\n   * @returns Mortgage calculation results\n   */\n  async calculateMortgage(params: MortgageCalculationParams): Promise<MortgageCalculationResults> {\n    // Use the existing utility function\n    const result = calculateMortgage({\n      loanAmount: params.loanAmount,\n      interestRate: params.interestRate,\n      loanTerm: params.loanTerm,\n      startDate: params.startDate,\n      paymentType: params.paymentType,\n      paymentDay: params.paymentDay\n    });\n\n    return {\n      monthlyPayment: result.monthlyPayment,\n      totalInterest: result.totalInterest,\n      totalCost: result.totalCost,\n      payoffDate: result.payoffDate,\n      loanTerm: result.loanTerm,\n      paymentType: result.paymentType,\n      effectiveInterestRate: result.effectiveInterestRate\n    };\n  }\n\n  /**\n   * Generate an amortization schedule for a loan\n   * @param params Mortgage calculation parameters\n   * @returns Amortization schedule results\n   */\n  async generateAmortizationSchedule(params: MortgageCalculationParams): Promise<AmortizationScheduleResults> {\n    // Use the existing utility function\n    const result = generateAmortizationSchedule({\n      loanAmount: params.loanAmount,\n      interestRate: params.interestRate,\n      loanTerm: params.loanTerm,\n      startDate: params.startDate,\n      paymentType: params.paymentType,\n      paymentDay: params.paymentDay,\n      earlyPayments: params.earlyPayments || [],\n      regularPayments: params.regularPayments || []\n    });\n\n    return result as AmortizationScheduleResults;\n  }\n}\n","import {\n  calculateInterestForPeriod,\n  InterestCalculationMethod,\n  PaymentType,\n} from './financialMath';\n\nexport interface AmortizationScheduleItem {\n  month: number;\n  date: string;\n  payment: number;\n  principal: number;\n  interest: number;\n  totalInterest: number;\n  balance: number;\n  extraPayment?: number;\n  extraPaymentType?: 'reduceTerm' | 'reducePayment';\n  isRegularPayment?: boolean; // Flag to indicate if this is a regular early payment\n  regularPaymentMessage?: string; // Message for regular payments that don't result in early repayment\n}\n\nexport interface AmortizationScheduleParams {\n  loanAmount: number;\n  interestRate: number;\n  loanTerm: number; // in years\n  startDate: string;\n  paymentType?: PaymentType; // Preparation for future extension\n  paymentDay?: number; // Preparation for future extension - day of monthly payment\n  interestCalculationMethod?: InterestCalculationMethod; // Interest calculation method\n  earlyPayments?: Array<{\n    id: string;\n    date: string; // ISO date string format YYYY-MM-DD\n    amount: number;\n    type: 'reduceTerm' | 'reducePayment';\n  }>;\n  regularPayments?: Array<{\n    id: string;\n    amount: number;\n    startMonth: string; // Month to start regular payments\n    endMonth?: string;  // Month to end regular payments (optional)\n    type: 'reduceTerm' | 'reducePayment'; // Recalculation type\n  }>;\n}\n\nexport interface AmortizationScheduleResult {\n  schedule: AmortizationScheduleItem[];\n  summary: {\n    originalTerm: number; // in months\n    newTerm: number; // in months\n    originalTotalInterest: number;\n    newTotalInterest: number;\n    originalMonthlyPayment: number;\n    finalMonthlyPayment: number;\n    totalSavings: number;\n    paymentType: PaymentType; // Payment type\n  };\n}\n\n/**\n * Generate an amortization schedule for a loan, including early payments\n */\nexport function generateAmortizationSchedule(\n  params: AmortizationScheduleParams\n): AmortizationScheduleResult {\n  const { \n    loanAmount, \n    interestRate, \n    loanTerm, \n    startDate, \n    earlyPayments = [],\n    regularPayments = [],\n    paymentType = 'annuity', // Default to annuity payments\n    interestCalculationMethod = InterestCalculationMethod.ACTUAL_365 // Default to current method\n  } = params;\n  \n  // Total number of payments (years * 12 months)\n  const numberOfPayments = loanTerm * 12;\n  \n  // Calculate original monthly payment based on payment type\n  const monthlyRate = interestRate / 100 / 12;\n  let originalMonthlyPayment: number;\n  \n  if (paymentType === 'differentiated') {\n    // For differentiated payments, calculate the first payment (which will be the highest)\n    const fixedPrincipalPortion = loanAmount / numberOfPayments;\n    const firstInterestPortion = loanAmount * monthlyRate;\n    originalMonthlyPayment = fixedPrincipalPortion + firstInterestPortion;\n  } else {\n    // For annuity payments, use the amortization formula\n    originalMonthlyPayment = \n      (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / \n      (Math.pow(1 + monthlyRate, numberOfPayments) - 1);\n  }\n  \n  // Map early payments to their corresponding payment dates\n  // Sort early payments by date first to ensure they're processed in chronological order\n  const sortedEarlyPayments = [...earlyPayments].sort((a, b) => \n    new Date(a.date).getTime() - new Date(b.date).getTime()\n  );\n  \n  const earlyPaymentsByDate = new Map<string, {\n    amount: number;\n    type: 'reduceTerm' | 'reducePayment';\n  }>();\n  \n  sortedEarlyPayments.forEach(payment => {\n    earlyPaymentsByDate.set(payment.date, {\n      amount: payment.amount,\n      type: payment.type\n    });\n  });\n  \n  // Generate the amortization schedule\n  const schedule: AmortizationScheduleItem[] = [];\n  let balance = loanAmount;\n  let totalInterest = 0;\n  let currentMonthlyPayment = originalMonthlyPayment;\n  const startDateObj = new Date(startDate);\n  \n  // Calculate original total interest (without early payments)\n  let originalTotalInterest: number;\n  \n  if (paymentType === 'differentiated') {\n    // For differentiated payments, calculate the sum of all interest payments\n    let totalPayments = 0;\n    let remainingBalance = loanAmount;\n    const fixedPrincipalPortion = loanAmount / numberOfPayments;\n    \n    for (let i = 0; i < numberOfPayments; i++) {\n      const interestPortion = remainingBalance * monthlyRate;\n      totalPayments += fixedPrincipalPortion + interestPortion;\n      remainingBalance -= fixedPrincipalPortion;\n    }\n    \n    originalTotalInterest = totalPayments - loanAmount;\n  } else {\n    // For annuity payments, all payments are the same\n    originalTotalInterest = (originalMonthlyPayment * numberOfPayments) - loanAmount;\n  }\n  \n  // Track if we've had a reducePayment type early payment\n  let hadReducePaymentType = false;\n  \n  let currentDate = new Date(startDateObj);\n  let month = 1;\n  let remainingTerm = numberOfPayments; // Track remaining term separately\n  \n  while (month <= remainingTerm && balance > 0.01) {\n  // Calculate payment date based on payment day setting\n  const paymentDate = new Date(currentDate);\n  paymentDate.setMonth(currentDate.getMonth() + 1);\n  \n  // If a specific payment day is set, adjust the payment date\n  if (params.paymentDay !== undefined) {\n    const year = paymentDate.getFullYear();\n    const month = paymentDate.getMonth();\n    const lastDay = new Date(year, month + 1, 0).getDate();\n    // If payment day is greater than the last day of the month, use the last day\n    const adjustedDay = Math.min(params.paymentDay, lastDay);\n    paymentDate.setDate(adjustedDay);\n  }\n    \n    // Calculate interest for this period using the selected calculation method\n    const interest = calculateInterestForPeriod(\n      balance,\n      interestRate,\n      currentDate,\n      paymentDate,\n      interestCalculationMethod\n    );\n    \n    // Calculate principal and payment based on payment type\n    let principal: number;\n    let payment: number;\n    \n    if (paymentType === 'differentiated') {\n      // For differentiated payments, recalculate the payment for each month\n      // The principal portion is fixed, and the interest portion decreases over time\n      const numberOfPayments = loanTerm * 12;\n      const fixedPrincipalPortion = loanAmount / numberOfPayments;\n      principal = fixedPrincipalPortion;\n      payment = principal + interest;\n      currentMonthlyPayment = payment; // Update for this month\n    } else {\n      // For annuity payments, the total payment is fixed\n      // The principal portion increases over time, and the interest portion decreases\n      principal = currentMonthlyPayment - interest;\n      payment = currentMonthlyPayment;\n    }\n    \n    // Update the balance\n    let newBalance = balance - principal;\n    \n    // Format the date as ISO string (YYYY-MM-DD)\n    const dateStr = paymentDate.toISOString().split('T')[0];\n    \n    // Check if there's an early payment for this date\n    let extraPayment = 0;\n    let extraPaymentType: 'reduceTerm' | 'reducePayment' | undefined;\n    let isRegularPayment = false;\n    \n    if (earlyPaymentsByDate.has(dateStr)) {\n      const earlyPayment = earlyPaymentsByDate.get(dateStr)!;\n      extraPayment = earlyPayment.amount;\n      extraPaymentType = earlyPayment.type;\n    }\n    \n    // Check if this date falls within any regular payment ranges\n    const currentPaymentDate = new Date(dateStr);\n    \n    // Process all regular payments\n    for (const regularPayment of regularPayments) {\n      const startMonth = new Date(regularPayment.startMonth);\n      const endMonth = regularPayment.endMonth ? new Date(regularPayment.endMonth) : null;\n      \n      // Check if the current date is within the regular payment range\n      const isAfterStart = currentPaymentDate >= startMonth;\n      const isBeforeEnd = !endMonth || currentPaymentDate <= endMonth;\n      \n      if (isAfterStart && isBeforeEnd) {\n        // Regular payment should first cover the monthly payment\n        // Any remaining amount goes towards early repayment\n        \n        // Calculate the excess amount (if any) after covering the monthly payment\n        const excessAmount = regularPayment.amount - currentMonthlyPayment;\n        \n        // If the regular payment is greater than the monthly payment,\n        // use the excess for early repayment\n        if (excessAmount > 0) {\n          // If there's already an early payment for this date, add the excess amount\n          if (extraPayment > 0) {\n            extraPayment += excessAmount;\n            // Use the regular payment type as it takes precedence\n            extraPaymentType = regularPayment.type;\n          } else {\n            extraPayment = excessAmount;\n            extraPaymentType = regularPayment.type;\n          }\n        }\n        // Even if there's no excess, mark this as a regular payment\n        isRegularPayment = true;\n      }\n    }\n    \n    // Apply extra payment\n    if (extraPayment > 0) {\n      newBalance -= extraPayment;\n      \n      if (newBalance > 0) {\n        // If payment type is to reduce payment, recalculate the monthly payment\n        // but keep the original term\n        if (extraPaymentType === 'reducePayment') {\n          // Mark that we've had a reducePayment type\n          hadReducePaymentType = true;\n          \n          // For reducePayment, we need to calculate the remaining term from the current month\n          const remainingMonths = numberOfPayments - month + 1;\n          \n          // Update the remaining term\n          remainingTerm = remainingMonths;\n          \n          // Recalculate monthly payment for the remaining term\n          currentMonthlyPayment = \n            (newBalance * monthlyRate * Math.pow(1 + monthlyRate, remainingMonths)) / \n            (Math.pow(1 + monthlyRate, remainingMonths) - 1);\n        }\n        // If payment type is to reduce term, keep the same monthly payment\n        // which will naturally reduce the term as the balance decreases faster\n        else if (extraPaymentType === 'reduceTerm') {\n          // Keep the current monthly payment the same\n          // This will result in paying off the loan faster (reducing the term)\n          \n          // Estimate the new remaining term based on the new balance and current payment\n          // This is an approximation to help with the loop termination condition\n          const estimatedRemainingPayments = Math.ceil(\n            Math.log(currentMonthlyPayment / (currentMonthlyPayment - newBalance * monthlyRate)) / \n            Math.log(1 + monthlyRate)\n          );\n          \n          // Update the remaining term (reduce it)\n          // If we've had a reducePayment type before, we need to make sure we're using\n          // the correct remaining term calculation\n          if (hadReducePaymentType) {\n            // We've already reduced the payment, now we're reducing the term\n            remainingTerm = Math.min(remainingTerm, estimatedRemainingPayments);\n          } else {\n            // We're just reducing the term\n            remainingTerm = Math.min(remainingTerm, month + estimatedRemainingPayments);\n          }\n        }\n      }\n    }\n    \n    // Update total interest\n    totalInterest += interest;\n    \n    // Add this month to the schedule\n    schedule.push({\n      month,\n      date: dateStr,\n      payment: currentMonthlyPayment,\n      principal,\n      interest,\n      totalInterest,\n      balance: Math.max(0, newBalance),\n      extraPayment: extraPayment > 0 ? extraPayment : undefined,\n      extraPaymentType: extraPayment > 0 ? extraPaymentType : undefined,\n      isRegularPayment: isRegularPayment,\n      // Add a message if this is a regular payment but no early repayment occurred\n      regularPaymentMessage: isRegularPayment && extraPayment <= 0 ? \n        'The specified total payment is less than the monthly payment amount, so early repayment did not occur.' : \n        undefined\n    });\n    \n    // Update balance for next iteration\n    balance = newBalance;\n    \n    // Move to next month\n    currentDate = paymentDate;\n    month++;\n  }\n  \n  // Calculate summary statistics\n  const newTerm = schedule.length;\n  const newTotalInterest = totalInterest;\n  const finalMonthlyPayment = schedule[schedule.length - 1].payment;\n  \n  // Calculate total savings - this should only include interest savings\n  // The true savings is the difference between the total interest that would have been paid\n  // without early payments and the total interest actually paid\n  const totalSavings = originalTotalInterest - newTotalInterest;\n  \n  return {\n    schedule,\n    summary: {\n      originalTerm: numberOfPayments,\n      newTerm,\n      originalTotalInterest,\n      newTotalInterest,\n      originalMonthlyPayment,\n      finalMonthlyPayment,\n      totalSavings,\n      paymentType\n    }\n  };\n}\n","import { \n  IMortgageService, \n  MortgageCalculationParams, \n  MortgageCalculationResults,\n  AmortizationScheduleResults\n} from './IMortgageService';\n\n/**\n * Server implementation of the mortgage service\n * This implementation communicates with a server API for calculations\n * Currently this is a placeholder for future implementation\n */\nexport class ServerMortgageService implements IMortgageService {\n  // This field is used in the commented-out code examples\n  // @ts-ignore - This field is used in the commented-out code examples\n  private readonly _apiBaseUrl: string;\n\n  /**\n   * Create a new server mortgage service\n   * @param apiBaseUrl The base URL for the mortgage API\n   */\n  constructor(apiBaseUrl?: string) {\n    this._apiBaseUrl = apiBaseUrl || '/api/mortgage';\n  }\n\n  /**\n   * Calculate mortgage results based on input parameters\n   * @param params Mortgage calculation parameters\n   * @returns Mortgage calculation results\n   */\n  async calculateMortgage(_params: MortgageCalculationParams): Promise<MortgageCalculationResults> {\n    try {\n      // In a real implementation, this would make an API call to the server\n      // For now, we'll throw an error to indicate this is not implemented yet\n      throw new Error('Server implementation not available yet');\n      \n      // Example of how this would be implemented:\n      // const response = await fetch(`${this._apiBaseUrl}/calculate`, {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json',\n      //   },\n      //   body: JSON.stringify(_params),\n      // });\n      // \n      // if (!response.ok) {\n      //   throw new Error(`API error: ${response.status}`);\n      // }\n      // \n      // return await response.json();\n    } catch (error) {\n      console.error('Error calculating mortgage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate an amortization schedule for a loan\n   * @param params Mortgage calculation parameters\n   * @returns Amortization schedule results\n   */\n  async generateAmortizationSchedule(_params: MortgageCalculationParams): Promise<AmortizationScheduleResults> {\n    try {\n      // In a real implementation, this would make an API call to the server\n      // For now, we'll throw an error to indicate this is not implemented yet\n      throw new Error('Server implementation not available yet');\n      \n      // Example of how this would be implemented:\n      // const response = await fetch(`${this._apiBaseUrl}/amortization`, {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json',\n      //   },\n      //   body: JSON.stringify(_params),\n      // });\n      // \n      // if (!response.ok) {\n      //   throw new Error(`API error: ${response.status}`);\n      // }\n      // \n      // return await response.json();\n    } catch (error) {\n      console.error('Error generating amortization schedule:', error);\n      throw error;\n    }\n  }\n}\n","/**\n * Configuration for the mortgage service\n */\nexport const mortgageConfig = {\n  /**\n   * The type of mortgage service to use\n   * 'local': Use the local implementation (calculations done in the browser)\n   * 'server': Use the server implementation (calculations done on the server)\n   */\n  serviceType: 'local' as 'local' | 'server',\n\n  /**\n   * The base URL for the mortgage API\n   * Only used when serviceType is 'server'\n   */\n  apiBaseUrl: '/api/mortgage',\n};\n","import { IMortgageService } from './IMortgageService';\nimport { LocalMortgageService } from './LocalMortgageService';\nimport { ServerMortgageService } from './ServerMortgageService';\nimport { mortgageConfig } from '@/config/mortgage';\n\n/**\n * Factory for creating mortgage service instances\n * This factory makes it easy to switch between different implementations\n */\nexport class MortgageServiceFactory {\n  /**\n   * Create a mortgage service instance\n   * @param type The type of mortgage service to create\n   * @returns A mortgage service instance\n   */\n  static createMortgageService(type: 'local' | 'server' = 'local', apiBaseUrl?: string): IMortgageService {\n    switch (type) {\n      case 'local':\n        return new LocalMortgageService();\n      case 'server':\n        try {\n          return new ServerMortgageService(apiBaseUrl);\n        } catch (error) {\n          console.warn('Error creating server implementation, falling back to local implementation:', error);\n          return new LocalMortgageService();\n        }\n      default:\n        return new LocalMortgageService();\n    }\n  }\n}\n\n/**\n * Default mortgage service instance\n * This is a singleton instance that can be used throughout the application\n */\nexport const mortgageService = MortgageServiceFactory.createMortgageService(\n  mortgageConfig.serviceType,\n  mortgageConfig.apiBaseUrl\n);\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { PaymentType } from '@/utils/financialMath';\nimport { \n  mortgageService, \n  MortgageCalculationResults, \n  AmortizationScheduleResults \n} from '@/services/mortgage';\n\nexport interface EarlyPayment {\n  id: string;\n  date: string; // ISO date string format YYYY-MM-DD\n  amount: number;\n  type: 'reduceTerm' | 'reducePayment';\n}\n\nexport interface RegularPayment {\n  id: string;\n  amount: number;\n  startMonth: string; // Month to start regular payments\n  endMonth?: string;  // Month to end regular payments (optional)\n  type: 'reduceTerm' | 'reducePayment'; // Recalculation type\n}\n\nexport interface LoanDetailsValues {\n  loanAmount: number;\n  interestRate: number;\n  loanTerm: number;\n  startDate: string;\n  paymentType: PaymentType;\n  paymentDay: number;\n}\n\ninterface MortgageContextType {\n  loanDetails: LoanDetailsValues | null;\n  setLoanDetails: (values: LoanDetailsValues) => void;\n  earlyPayments: EarlyPayment[];\n  setEarlyPayments: (payments: EarlyPayment[]) => void;\n  regularPayments: RegularPayment[];\n  setRegularPayments: (payments: RegularPayment[]) => void;\n  mortgageResults: MortgageCalculationResults | null;\n  amortizationResult: AmortizationScheduleResults | null;\n  setMortgageResults: (mortage: MortgageCalculationResults) => void;\n  setAmortizationResult: (amortization: AmortizationScheduleResults) => void;\n}\n\nconst MortgageContext = createContext<MortgageContextType | undefined>(undefined);\n\nexport function MortgageProvider({ children }: { children: React.ReactNode }) {\n  const [loanDetails, setLoanDetails] = useState<LoanDetailsValues | null>(null);\n  const [earlyPayments, setEarlyPayments] = useState<EarlyPayment[]>([]);\n  const [regularPayments, setRegularPayments] = useState<RegularPayment[]>([]);\n  const [mortgageResults, setMortgageResults] = useState<MortgageCalculationResults | null>(null);\n  const [amortizationResult, setAmortizationResult] = useState<AmortizationScheduleResults | null>(null);\n\n  useEffect(() => {\n    if (loanDetails) {\n      try {\n        // Use the mortgage service to calculate mortgage results\n        mortgageService.calculateMortgage({\n          ...loanDetails,\n          earlyPayments,\n          regularPayments\n        }).then(results => {\n          setMortgageResults(results);\n        }).catch(error => {\n          console.error('Error calculating mortgage results:', error);\n        });\n      } catch (error) {\n        console.error('Error calculating mortgage results:', error);\n      }\n    }\n  }, [loanDetails]);\n  \n  // Generate amortization schedule when loan details, early payments, or regular payments change\n  useEffect(() => {\n    if (loanDetails) {\n      try {\n        // Use the mortgage service to generate amortization schedule\n        mortgageService.generateAmortizationSchedule({\n          ...loanDetails,\n          earlyPayments,\n          regularPayments\n        }).then(result => {\n          setAmortizationResult(result);\n        }).catch(error => {\n          console.error('Error generating amortization schedule:', error);\n        });\n      } catch (error) {\n        console.error('Error generating amortization schedule:', error);\n      }\n    }\n  }, [loanDetails, earlyPayments, regularPayments]);\n\n  return (\n    <MortgageContext.Provider\n      value={{\n        loanDetails,\n        setLoanDetails,\n        earlyPayments,\n        setEarlyPayments,\n        regularPayments,\n        setRegularPayments,\n        mortgageResults,\n        amortizationResult,\n        setMortgageResults,\n        setAmortizationResult\n      }}\n    >\n      {children}\n    </MortgageContext.Provider>\n  );\n}\n\nexport function useMortgage() {\n  const context = useContext(MortgageContext);\n  if (!context) {\n    throw new Error('useMortgage must be used within a MortgageProvider');\n  }\n  return context;\n}\n","import { lazy, memo, Suspense, useMemo } from 'react';\n\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { useMortgage } from '@/providers/MortgageProvider';\nimport { Skeleton } from '@telegram-apps/telegram-ui';\n\nconst LineChart = lazy(() => import('@/components/charts/LineChart'));\nconst PieChart = lazy(() => import('@/components/charts/PieChart'));\nconst BarChart = lazy(() => import('@/components/charts/BarChart'));\nconst DoughnutChart = lazy(() => import('@/components/charts/DoughnutChart'));\nconst RadarChart = lazy(() => import('@/components/charts/RadarChart'));\n\nconst ChartsContainer = () => {\n  const { t } = useLocalization();\n  const { amortizationResult } = useMortgage();\n\n  if (!amortizationResult || amortizationResult.schedule.length === 0) {\n    return null;\n  }\n\n  const months = useMemo(() => {\n    return amortizationResult.schedule.map((item) => {\n      const date = new Date(item.date);\n      return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date\n        .getFullYear()\n        .toString()\n        .slice(2)}`;\n    });\n  }, [amortizationResult.schedule.length]);\n\n  const principals = useMemo(() => {\n    return amortizationResult.schedule.map((item) => item.principal);\n  }, [amortizationResult.schedule.length]);\n  const interests = useMemo(() => {\n    return amortizationResult.schedule.map((item) => item.interest);\n  }, [amortizationResult.schedule.length]);\n  const balances = useMemo(() => {\n    return amortizationResult.schedule.map((item) => item.balance);\n  }, [amortizationResult.schedule.length]);\n\n  // Extract early payment information for tooltips\n  const extraPaymentInfo = useMemo(() => {\n    return amortizationResult.schedule.map((item) => ({\n      hasExtraPayment: !!item.extraPayment && item.extraPayment > 0,\n      amount: item.extraPayment || 0,\n      type: item.extraPaymentType || '',\n      isRegular: item.isRegularPayment || false, // Add flag for regular payments\n    }));\n  }, [amortizationResult.schedule]);\n\n  const lineChartData = useMemo(() => {\n    return {\n      labels: months,\n      datasets: [\n        {\n          label: t('principal'),\n          data: principals,\n          borderColor: '#4bc0c0',\n          // https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4\n          backgroundColor: '#4bc0c033',\n          fill: true,\n          yAxisID: 'y',\n        },\n        {\n          label: t('interest'),\n          data: interests,\n          borderColor: '#ff6384',\n          // https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4\n          backgroundColor: '#ff638433',\n          fill: true,\n          yAxisID: 'y',\n        },\n        {\n          label: t('balance'),\n          data: balances,\n          borderColor: '#36a2eb',\n          // https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4\n          backgroundColor: '#36a2eb33',\n          borderDash: [5, 5],\n          fill: false,\n          yAxisID: 'y1',\n        },\n      ],\n    };\n  }, [principals.length, balances.length, interests.length]);\n\n  // Calculate total principal and interest for pie chart\n  const pieChartData = useMemo(() => {\n    const totalPrincipal = principals.reduce((sum, value) => sum + value, 0);\n    const totalInterest = amortizationResult.summary.newTotalInterest;\n\n    return {\n      labels: [t('principal'), t('interest')],\n      datasets: [\n        {\n          data: [totalPrincipal, totalInterest],\n          backgroundColor: ['#4bc0c0', '#ff6384'],\n          borderColor: ['#4bc0c0', '#ff6384'],\n          borderWidth: 1,\n        },\n      ],\n    };\n  }, [principals, amortizationResult.summary.newTotalInterest, t]);\n\n  // Add comparison pie chart for early payments impact\n  const comparisonPieChartData = useMemo(() => {\n    // Only show comparison if there are early payments\n    if (\n      !amortizationResult.schedule.some(\n        (item) => item.extraPayment && item.extraPayment > 0\n      )\n    ) {\n      return null;\n    }\n\n    const originalInterest = amortizationResult.summary.originalTotalInterest;\n    const newInterest = amortizationResult.summary.newTotalInterest;\n    const interestSaved = originalInterest - newInterest;\n\n    return {\n      labels: [t('newTotalInterest'), t('interestSaved')],\n      datasets: [\n        {\n          data: [newInterest, interestSaved],\n          backgroundColor: ['#36a2eb', '#4bc0c0'],\n          borderColor: ['#36a2eb', '#4bc0c0'],\n          borderWidth: 1,\n        },\n      ],\n    };\n  }, [amortizationResult, t]);\n\n  // Bar chart data for monthly principal vs interest\n  const barChartData = useMemo(() => {\n    // Only show a subset of months for better visibility\n    const interval = Math.max(1, Math.floor(months.length / 12));\n    const filteredMonths = months.filter((_, i) => i % interval === 0);\n    const filteredPrincipals = principals.filter((_, i) => i % interval === 0);\n    const filteredInterests = interests.filter((_, i) => i % interval === 0);\n\n    return {\n      labels: filteredMonths,\n      datasets: [\n        {\n          label: t('principal'),\n          data: filteredPrincipals,\n          backgroundColor: '#4bc0c0',\n        },\n        {\n          label: t('interest'),\n          data: filteredInterests,\n          backgroundColor: '#ff6384',\n        },\n      ],\n    };\n  }, [months, principals, interests, t]);\n\n  // Doughnut chart data for total payment breakdown\n  const doughnutChartData = useMemo(() => {\n    const totalPrincipal = principals.reduce((sum, value) => sum + value, 0);\n    const totalInterest = amortizationResult.summary.newTotalInterest;\n    const totalExtraPayments = amortizationResult.schedule.reduce(\n      (sum, item) => sum + (item.extraPayment || 0),\n      0\n    );\n\n    return {\n      labels: [t('principal'), t('interest'), t('extraPayment')],\n      datasets: [\n        {\n          data: [totalPrincipal, totalInterest, totalExtraPayments],\n          backgroundColor: ['#4bc0c0', '#ff6384', '#ffcd56'],\n          borderColor: ['#4bc0c0', '#ff6384', '#ffcd56'],\n          borderWidth: 1,\n          hoverOffset: 10,\n        },\n      ],\n    };\n  }, [principals, amortizationResult, t]);\n\n  // Radar chart data for comparing mortgage metrics before and after early payments\n  const radarChartData = useMemo(() => {\n    // Only show if there are early payments\n    if (\n      !amortizationResult.schedule.some(\n        (item) => item.extraPayment && item.extraPayment > 0\n      )\n    ) {\n      return null;\n    }\n\n    // Scale values to be comparable on the same chart\n    const originalTerm = amortizationResult.summary.originalTerm;\n    const newTerm = amortizationResult.summary.newTerm;\n    const originalInterest = amortizationResult.summary.originalTotalInterest;\n    const newInterest = amortizationResult.summary.newTotalInterest;\n    const originalPayment = amortizationResult.summary.originalMonthlyPayment;\n    const finalPayment = amortizationResult.summary.finalMonthlyPayment;\n\n    // Normalize values to percentages of the original values\n    const normalizedNewTerm = (newTerm / originalTerm) * 100;\n    const normalizedNewInterest = (newInterest / originalInterest) * 100;\n    const normalizedFinalPayment = (finalPayment / originalPayment) * 100;\n\n    return {\n      labels: [t('loanTerm'), t('totalInterest'), t('monthlyPayment')],\n      datasets: [\n        {\n          label: t('original'),\n          data: [100, 100, 100], // Original values as baseline (100%)\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: 'rgb(255, 99, 132)',\n        },\n        {\n          label: t('withEarlyPayments'),\n          data: [\n            normalizedNewTerm,\n            normalizedNewInterest,\n            normalizedFinalPayment,\n          ],\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgb(54, 162, 235)',\n          pointBackgroundColor: 'rgb(54, 162, 235)',\n        },\n      ],\n    };\n  }, [amortizationResult, t]);\n\n  return (\n    <>\n      {/* Line chart showing amortization schedule */}\n      <Suspense fallback={<Skeleton visible />}>\n        <LineChart\n          data={lineChartData}\n          title={t('amortizationSchedule')}\n          extraPaymentInfo={extraPaymentInfo}\n        />\n      </Suspense>\n\n      {/* Bar chart showing principal vs interest over time */}\n      <Suspense fallback={<Skeleton visible />}>\n        <BarChart data={barChartData} title={t('monthlyPaymentBreakdown')} />\n      </Suspense>\n\n      {/* Pie chart showing payment distribution */}\n      <Suspense fallback={<Skeleton visible />}>\n        <PieChart data={pieChartData} title={t('paymentDistribution')} />\n      </Suspense>\n\n      {/* Doughnut chart showing total payment breakdown including extra payments */}\n      <Suspense fallback={<Skeleton visible />}>\n        <DoughnutChart\n          data={doughnutChartData}\n          title={t('totalPaymentBreakdown')}\n        />\n      </Suspense>\n\n      {/* Conditional charts that only appear when early payments exist */}\n      {comparisonPieChartData && (\n        <Suspense fallback={<Skeleton visible />}>\n          <PieChart\n            data={comparisonPieChartData}\n            title={t('interestSavings')}\n          />\n        </Suspense>\n      )}\n\n      {radarChartData && (\n        <Suspense fallback={<Skeleton visible />}>\n          <RadarChart data={radarChartData} title={t('mortgageComparison')} />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nexport default memo(ChartsContainer);\n","import { _ as _extends } from \"@swc/helpers/_/_extends\";\nimport { _ as _object_destructuring_empty } from \"@swc/helpers/_/_object_destructuring_empty\";\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const Icon28Stats = (_param)=>{\n    var restProps = _extends({}, _object_destructuring_empty(_param));\n    return /*#__PURE__*/ _jsx(\"svg\", _object_spread_props(_object_spread({\n        width: \"28\",\n        height: \"28\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, restProps), {\n        children: /*#__PURE__*/ _jsx(\"path\", {\n            fillRule: \"evenodd\",\n            clipRule: \"evenodd\",\n            d: \"M13.1 4.4a9.51 9.51 0 0 0-8.7 9.41 9.53 9.53 0 0 0 9.6 9.46c5 0 9.1-3.76 9.55-8.56h-7.29c-.5 0-.96 0-1.33-.05a2.04 2.04 0 0 1-1.23-.55c-.36-.36-.5-.8-.55-1.22-.05-.38-.05-.84-.05-1.34V4.4Zm1.8 0v7.1a9.97 9.97 0 0 0 .08 1.34l.19.04c.24.03.58.03 1.15.03h7.23A9.53 9.53 0 0 0 14.9 4.4Zm.06 8.43h.01Zm.02.01v.01Zm-12.38.97C2.6 7.6 7.72 2.56 14 2.56S25.4 7.59 25.4 13.8c0 6.23-5.12 11.26-11.4 11.26S2.6 20.04 2.6 13.81Z\",\n            fill: \"currentColor\"\n        })\n    }));\n};\n\n//# sourceMappingURL=stats.js.map","import React from 'react';\n\nimport { Caption, Text } from '@telegram-apps/telegram-ui';\n\nimport styles from '@/ui.module.css';\n\ninterface TableProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const Table = ({ children, className }: TableProps) => {\n  return (\n    <div className={`${styles.tableContainer} ${className || ''}`}>\n      <table className={styles.table}>{children}</table>\n    </div>\n  );\n};\n\nexport const TableHead = ({ children }: { children: React.ReactNode }) => {\n  return <thead className={styles.tableHead}>{children}</thead>;\n};\n\nexport const TableFoot = ({ children }: { children: React.ReactNode }) => {\n  return <tfoot className={styles.tableHead}>{children}</tfoot>;\n};\n\nexport const TableBody = ({ children }: { children: React.ReactNode }) => {\n  return <tbody className={styles.tableBody}>{children}</tbody>;\n};\n\nexport const TableRow = ({\n  children,\n  highlight,\n  style,\n}: {\n  children: React.ReactNode;\n  highlight?: boolean;\n  style?: React.CSSProperties;\n}) => {\n  return (\n    <tr \n      className={`${styles.tableRow} ${highlight ? styles.highlight : ''}`}\n      style={style}\n    >\n      {children}\n    </tr>\n  );\n};\n\nexport const TableCell = ({\n  children,\n  header,\n}: {\n  children?: React.ReactNode;\n  header?: boolean;\n}) => {\n  return header ? (\n    <th className={styles.tableHeader}>\n      <Caption weight='1'>{children}</Caption>\n    </th>\n  ) : (\n    <td className={styles.tableCell}>\n      <Text weight='3'>{children}</Text>\n    </td>\n  );\n};\n","import { memo, useMemo, useState, lazy, Suspense } from 'react';\n\nimport {\n  Section,\n  Pagination,\n  IconButton,\n  Modal,\n  Skeleton,\n} from '@telegram-apps/telegram-ui';\nimport { Icon28Stats } from '@telegram-apps/telegram-ui/dist/icons/28/stats';\nimport { useSignal, viewportState } from '@telegram-apps/sdk-react';\n\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { useMortgage } from '@/providers/MortgageProvider';\n\nimport {\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@/components/Table';\n\n// Lazy load chart component\nconst PieChart = lazy(() => import('@/components/charts/PieChart'));\n\nconst itemsPerPage = 12; // Show 12 months (1 year) per page\n\nconst PaymentSchedule = () => {\n  const { height } = useSignal(viewportState);\n  const { t, formatCurrency, formatDate, formatNumber } = useLocalization();\n  const { amortizationResult } = useMortgage();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedItemIndex, setSelectedItemIndex] = useState<number | null>(\n    null\n  );\n  const [isModalOpened, setIsModalOpened] = useState(false);\n\n  if (!amortizationResult || amortizationResult.schedule.length === 0) {\n    return null;\n  }\n\n  const schedule = amortizationResult.schedule;\n\n  // Get the first payment for the pie chart\n\n  const handleIconClick = (index: number) => {\n    setSelectedItemIndex(index);\n    setIsModalOpened(true);\n  };\n\n  const firstPayment = useMemo(() => {\n    if (typeof selectedItemIndex === 'number') {\n      return amortizationResult.schedule[selectedItemIndex];\n    }\n    return null;\n  }, [selectedItemIndex]);\n\n  // Prepare data for the pie chart\n  const pieChartData = useMemo(() => {\n    if (firstPayment) {\n      return {\n        labels: [t('principal'), t('interest')],\n        datasets: [\n          {\n            data: [firstPayment.principal, firstPayment.interest],\n            backgroundColor: [\n              'rgba(75, 192, 192, 0.6)',\n              'rgba(255, 99, 132, 0.6)',\n            ],\n            borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],\n            borderWidth: 1,\n          },\n        ],\n      };\n    }\n    return null;\n  }, [selectedItemIndex]);\n\n  // Calculate pagination\n  const totalPages = Math.ceil(schedule.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = Math.min(startIndex + itemsPerPage, schedule.length);\n  const currentItems = schedule.slice(startIndex, endIndex);\n\n  const handlePageChange = (_: unknown, value: number) => {\n    setCurrentPage(value);\n  };\n\n  return (\n    <Section>\n      {pieChartData && (\n        <Modal\n          onOpenChange={(open) => {\n            if (!open) {\n              setSelectedItemIndex(null);\n            }\n          }}\n          open={isModalOpened}\n          nested\n          style={{ height: height * 0.6 }}\n        >\n          <Suspense fallback={<Skeleton visible />}>\n            <PieChart data={pieChartData} title={t('paymentBreakdown')} />\n          </Suspense>\n        </Modal>\n      )}\n      <Section.Header large>\n        {t('showingPayments', {\n          from: startIndex + 1,\n          to: endIndex,\n          total: schedule.length,\n        })}\n      </Section.Header>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell header>&nbsp;</TableCell>\n            <TableCell header>{t('month')}</TableCell>\n            <TableCell header>{t('date')}</TableCell>\n            <TableCell header>{t('payment')}</TableCell>\n            <TableCell header>{t('principal')}</TableCell>\n            <TableCell header>{t('interest')}</TableCell>\n            <TableCell header>{t('extraPayment')}</TableCell>\n            <TableCell header>{t('balance')}</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {currentItems.map((item, index) => (\n            <TableRow \n              key={item.month} \n              highlight={Boolean(item.extraPayment)}\n              style={item.isRegularPayment ? { backgroundColor: 'rgba(75, 192, 192, 0.1)' } : undefined}\n            >\n              <TableCell>\n                <IconButton\n                  size='s'\n                  onClick={() => handleIconClick(startIndex + index)}\n                >\n                  <Icon28Stats />\n                </IconButton>\n              </TableCell>\n              <TableCell>{formatNumber(item.month)}</TableCell>\n              <TableCell>{formatDate(item.date)}</TableCell>\n              <TableCell>{formatCurrency(item.payment)}</TableCell>\n              <TableCell>{formatCurrency(item.principal)}</TableCell>\n              <TableCell>{formatCurrency(item.interest)}</TableCell>\n              <TableCell>\n                {item.extraPayment ? (\n                  <span>\n                    {formatCurrency(item.extraPayment)}\n                    {item.isRegularPayment && (\n                      <span title={t('regularPayment')} style={{ marginLeft: '4px', color: 'rgba(75, 192, 192, 1)' }}>\n                        *\n                      </span>\n                    )}\n                  </span>\n                ) : item.isRegularPayment && item.regularPaymentMessage ? (\n                  <span title={item.regularPaymentMessage} style={{ color: 'rgba(255, 99, 132, 0.8)' }}>\n                    {t('insufficientPayment')}\n                  </span>\n                ) : '-'}\n              </TableCell>\n              <TableCell>{formatCurrency(item.balance)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <Section.Footer centered>\n        <Pagination\n          siblingCount={0}\n          boundaryCount={1}\n          page={currentPage}\n          count={totalPages}\n          onChange={handlePageChange}\n        />\n      </Section.Footer>\n    </Section>\n  );\n};\n\nexport default memo(PaymentSchedule);\n","import { memo, useMemo } from 'react';\n\nimport { Cell, Section, Text } from '@telegram-apps/telegram-ui';\n\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { useMortgage } from '@/providers/MortgageProvider';\n\n\nconst ResultsDisplay = () => {\n  const { t, formatCurrency, formatDate } = useLocalization();\n  const { mortgageResults, amortizationResult } = useMortgage();\n\n  if (!mortgageResults) {\n    return null;\n  }\n\n  const hasEarlyPayments = useMemo(() => {\n    if (amortizationResult && amortizationResult.schedule) {\n      // Check if there are any early payments in the schedule\n      return amortizationResult.schedule.some(item => item.extraPayment !== undefined && item.extraPayment > 0);\n    }\n    return false;\n  }, [amortizationResult]);\n\n  const { monthlyPayment, totalInterest, payoffDate } = mortgageResults;\n\n  return (\n    <Section\n      header={t('paymentSummary')}\n      footer={\n        hasEarlyPayments && (\n          <Cell readOnly before={<Text>{t('totalSavings')}</Text>}>\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {formatCurrency(amortizationResult!.summary.totalSavings)}\n            </Text>\n          </Cell>\n        )\n      }\n    >\n      <Cell\n        subtitle={\n          hasEarlyPayments &&\n          amortizationResult?.summary.finalMonthlyPayment !==\n            monthlyPayment && (\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {t('originalPayment')}:\n              {formatCurrency(monthlyPayment)}\n            </Text>\n          )\n        }\n        subhead={t('monthlyPayment')}\n        before={'💰'}\n        readOnly\n      >\n        <Text>\n          {formatCurrency(\n            hasEarlyPayments && amortizationResult?.summary.finalMonthlyPayment !== monthlyPayment\n              ? amortizationResult!.summary.finalMonthlyPayment\n              : monthlyPayment\n          )}\n        </Text>\n      </Cell>\n      <Cell\n        subtitle={\n          hasEarlyPayments && (\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {t('savings')}:\n              {formatCurrency(\n                amortizationResult!.summary.originalTotalInterest -\n                  amortizationResult!.summary.newTotalInterest\n              )}\n            </Text>\n          )\n        }\n        subhead={t('totalInterest')}\n        before={'📈'}\n        readOnly\n      >\n        <Text>\n          {formatCurrency(\n            hasEarlyPayments\n              ? amortizationResult!.summary.newTotalInterest\n              : totalInterest\n          )}\n        </Text>\n      </Cell>\n      <Cell\n        subtitle={\n          hasEarlyPayments && (\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {t('monthsSaved')}:\n              {amortizationResult!.summary.originalTerm -\n                amortizationResult!.summary.newTerm}\n            </Text>\n          )\n        }\n        subhead={t('loanTerm')}\n        before={'⏱️'}\n        readOnly\n      >\n        <Text>\n          {hasEarlyPayments\n            ? `${Math.floor(amortizationResult!.summary.newTerm / 12)} ${t(\n                'years'\n              )} ${amortizationResult!.summary.newTerm % 12} ${t('months')}`\n            : `${Math.floor(mortgageResults.loanTerm)} ${t('years')}`}\n        </Text>\n      </Cell>\n      <Cell\n        subtitle={\n          hasEarlyPayments && (\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {t('actualPayoffDate')}:\n              {formatDate(\n                amortizationResult!.schedule[\n                  amortizationResult!.schedule.length - 1\n                ].date\n              )}\n            </Text>\n          )\n        }\n        subhead={t('planPayoffDate')}\n        before={'🏁'}\n        readOnly\n      >\n        <Text>{formatDate(payoffDate)}</Text>\n      </Cell>\n      <Cell\n        subhead={t('paymentType')}\n        before={'💵'}\n        readOnly\n      >\n        <Text>\n          {mortgageResults.paymentType === 'annuity' \n            ? t('annuityPayment') \n            : t('differentiatedPayment')}\n        </Text>\n      </Cell>\n    </Section>\n  );\n};\n\nexport default memo(ResultsDisplay);\n","import { memo } from 'react';\n\nimport styles from '@/ui.module.css';\n\ninterface TabPanelProps {\n  id: string;\n  children: React.ReactNode;\n}\n\nconst TabPanel = ({ children }: TabPanelProps) => {\n  return <div className={styles.tabPanel}>{children}</div>;\n};\n\nexport default memo(TabPanel);\n","import React, { memo, useState } from 'react';\n\nimport { SegmentedControlItem } from '@telegram-apps/telegram-ui/dist/components/Navigation/SegmentedControl/components/SegmentedControlItem/SegmentedControlItem';\nimport { IconContainer, SegmentedControl } from '@telegram-apps/telegram-ui';\n\n\ninterface Tab {\n  id: string;\n  label?: string;\n  icon?: React.ReactNode;\n}\n\ninterface TabViewProps {\n  tabs: Tab[];\n  children: React.ReactNode;\n  defaultTab?: string;\n}\n\nconst TabView = ({ tabs, children, defaultTab }: TabViewProps) => {\n  const [activeTab, setActiveTab] = useState(defaultTab || tabs[0].id);\n\n\n  const childrenArray = React.Children.toArray(children);\n  const activeChild = childrenArray.find(\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    (child) => React.isValidElement(child) && child.props.id === activeTab\n  );\n\n  return (\n    <>\n      <SegmentedControl >\n        {tabs.map((tab) => (\n          <SegmentedControlItem\n            key={tab.id}\n            selected={tab.id === activeTab}\n            onClick={() => setActiveTab(tab.id)}\n          >\n            {tab.label && tab.label}\n            {tab.icon && <IconContainer>{tab.icon}</IconContainer>}\n          </SegmentedControlItem>\n        ))}\n      </SegmentedControl>\n      {activeChild}\n    </>\n  );\n}\n\nexport default memo(TabView);\n\n","import { memo, PropsWithChildren, useEffect } from 'react';\n\nimport { backButton, useSignal, viewport } from '@telegram-apps/sdk-react';\nimport { useNavigate } from 'react-router-dom';\n\nconst Page = ({\n  children,\n  back = true,\n}: PropsWithChildren<{\n  /**\n   * True if it is allowed to go back from this page.\n   */\n  back?: boolean;\n}>) => {\n  const navigate = useNavigate();\n\n  const inset = useSignal(viewport.safeAreaInsets);\n  const contentInset = useSignal(viewport.contentSafeAreaInsets);\n\n  useEffect(() => {\n    if (back) {\n      backButton.show();\n      return backButton.onClick(() => {\n        navigate(-1);\n      });\n    }\n    backButton.hide();\n  }, [back]);\n\n  return (\n    <div\n      style={{\n        paddingTop: inset.top + contentInset.top,\n        paddingLeft: inset.left,\n        paddingRight: inset.right,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default memo(Page);\n","import { List } from '@telegram-apps/telegram-ui';\n\nimport ChartsContainer from '@/components/ChartsContainer';\nimport PaymentSchedule from '@/components/PaymentSchedule';\nimport ResultsDisplay from '@/components/ResultsDisplay';\nimport TabPanel from '@/components/TabPanel';\nimport TabView from '@/components/TabView';\nimport Page from '../../components/Page';\n\nconst tabs = [\n  {\n    id: 'charts',\n    icon: '📊 ',\n  },\n  {\n    id: 'schedule',\n    icon: '📅',\n  },\n];\n\nconst MortageResult = () => {\n  return (\n    <Page>\n      <List>\n        <ResultsDisplay />\n        <TabView tabs={tabs} defaultTab='charts'>\n          <TabPanel id='charts'>\n            <ChartsContainer />\n          </TabPanel>\n          <TabPanel id='schedule'>\n            <PaymentSchedule />\n          </TabPanel>\n        </TabView>\n      </List>\n    </Page>\n  );\n};\n\nexport default MortageResult;\n","import { forwardRef } from 'react';\nimport {\n  Caption,\n  Spinner,\n  Input as TGInput,\n  InputProps as TGInputProps,\n} from '@telegram-apps/telegram-ui';\nimport type { AnyFieldApi } from '@tanstack/react-form';\n\nexport type InputPropsType = {\n  field: AnyFieldApi;\n} & TGInputProps;\n\nconst Input = forwardRef<HTMLInputElement, InputPropsType>(\n  (props, forwardedRef) => {\n    const { field, ...rest } = props;\n\n    const { isTouched, errors, isValidating } = field.state.meta;\n\n    return (\n      <>\n        <TGInput\n          {...rest}\n          ref={forwardedRef}\n          id={field.name}\n          name={field.name}\n          value={field.state.value}\n          onBlur={field.handleBlur}\n          onChange={(e) => field.handleChange(e.target.value)}\n          status={errors.length ? 'error' : 'default'}\n          after={isValidating ? <Spinner size='s' /> : rest.after}\n        />\n        {isTouched && errors.length ? (\n          <Caption\n            style={{\n              color: 'var(--tg-theme-destructive-text-color)',\n              padding: '0 24px',\n            }}\n          >\n            {errors.map((error) => error.message).join(', ')}\n          </Caption>\n        ) : null}\n      </>\n    );\n  }\n);\n\nexport default Input;\n","import { FC } from 'react';\nimport { InputNumberFormat as RIInputNumberFormat, InputNumberFormatProps as RIInputNumberFormatProps } from '@react-input/number-format';\nimport Input, { InputPropsType } from './Input';\n\n\nexport type InputNumberFormatPropsType = InputPropsType & RIInputNumberFormatProps\n\nconst InputNumberFormat: FC<InputNumberFormatPropsType> = (props) => {\n    return (\n        <RIInputNumberFormat {...props} component={Input} />\n    );\n};\n\nexport default InputNumberFormat;","import { forwardRef } from 'react';\nimport {\n  Caption,\n  Select as TGSelect,\n  SelectProps as TGSelectProps,\n} from '@telegram-apps/telegram-ui';\n\nimport type { AnyFieldApi } from '@tanstack/react-form';\n\nexport type SelectOptionType = {\n  label: string;\n  value: string;\n};\n\nexport type SelectPropsType = {\n  field: AnyFieldApi;\n  options: SelectOptionType[];\n} & Omit<TGSelectProps, 'children'>;\n\nconst Select = forwardRef<HTMLSelectElement, SelectPropsType>((props) => {\n  const { field, options, ...rest } = props;\n  const { isTouched, errors } = field.state.meta;\n\n  return (\n    <>\n      <TGSelect\n        {...rest}\n        id={field.name}\n        name={field.name}\n        value={field.state.value}\n        onBlur={field.handleBlur}\n        onChange={(e) => field.handleChange(e.target.value)}\n      >\n        {options.map(({ value, label }) => (\n          <option key={value} value={value}>\n            {label}\n          </option>\n        ))}\n      </TGSelect>\n      {isTouched && errors.length ? (\n        <Caption\n          style={{\n            color: 'var(--tg-theme-destructive-text-color)',\n            padding: '0 24px',\n          }}\n        >\n          {errors.join(', ')}\n        </Caption>\n      ) : null}\n    </>\n  );\n});\n\nexport default Select;\n","export type EarlyPaymentType = {\n  id: string;\n  date: string;\n  amount: string;\n  type: 'reduceTerm' | 'reducePayment';\n};\n\nexport type RegularPaymentType = {\n  id: string;\n  amount: string;\n  startMonth: string; // Month to start regular payments\n  endMonth: string;   // Month to end regular payments (optional)\n  type: 'reduceTerm' | 'reducePayment'; // Recalculation type\n};\n\nexport type LoanDetailsType = {\n  loanAmount: string;\n  interestRate: string;\n  loanTerm: string;\n  startDate: string;\n  paymentType: 'annuity' | 'differentiated';\n  paymentDay: string;\n  earlyPayments: EarlyPaymentType[];\n  regularPayments: RegularPaymentType[];\n};\n\nexport const defaultLoanDetails: LoanDetailsType = {\n  loanAmount: '',\n  interestRate: '',\n  loanTerm: '',\n  startDate: new Date().toISOString().split('T')[0],\n  paymentType: 'annuity',\n  paymentDay: new Date().getDate().toLocaleString(),\n  earlyPayments: [],\n  regularPayments: [],\n};\n","import { z } from 'zod';\nimport { unformat } from '@react-input/number-format';\n\n// Type for the localization function\ntype TranslationFunction = (key: string, params?: Record<string, string | number>) => string;\n\n/**\n * Creates localized schema factory functions\n * @param t Translation function\n * @returns Object with schema creation functions\n */\nexport const createLocalizedSchemas = (t: TranslationFunction) => {\n  // Create a custom error map for Zod\n  const customErrorMap: z.ZodErrorMap = (issue, ctx) => {\n    // Use the default error map as fallback\n    const defaultError = z.defaultErrorMap(issue, ctx);\n    \n    // Return localized error messages based on error code\n    switch (issue.code) {\n      case z.ZodIssueCode.invalid_type:\n        if (issue.expected === 'number') {\n          return { message: t('invalidNumber') };\n        }\n        break;\n      case z.ZodIssueCode.too_small:\n        if (issue.type === 'number' && issue.minimum === 0) {\n          return { message: t('mustBePositive') };\n        }\n        break;\n      // Add more cases as needed\n    }\n    \n    // Fallback to default error message\n    return defaultError;\n  };\n\n  // Set the error map for this instance\n  z.setErrorMap(customErrorMap);\n\n  // Factory functions for common schema patterns\n  return {\n    /**\n     * Creates a localized number schema with common validations\n     */\n    createNumberSchema: (options: {\n      fieldName: string;\n      min?: number;\n      max?: number;\n    }) => {\n      const { fieldName, min = 0, max } = options;\n      \n      return z.string()\n        .transform((val) => {\n          const unformatted = unformat(val);\n          return parseFloat(unformatted);\n        })\n        .refine((val) => !isNaN(val), t('mustBeNumber', { field: t(fieldName) }))\n        .refine((val) => val > min, t('mustBeGreaterThan', { field: t(fieldName), value: min }))\n        .refine(\n          (val) => max === undefined || val <= max, \n          max !== undefined ? t('mustBeLessThan', { field: t(fieldName), value: max }) : ''\n        );\n    },\n\n    /**\n     * Creates a localized date schema\n     */\n    createDateSchema: (options: {\n      fieldName: string;\n    }) => {\n      const { fieldName } = options;\n      \n      return z.string().refine((date) => {\n        const dateObj = new Date(date);\n        return !isNaN(dateObj.getTime());\n      }, t('invalidDate', { field: t(fieldName) }));\n    },\n\n    /**\n     * Creates a localized date range validation\n     */\n    createDateRangeRefinement: (options: {\n      startField: string;\n      endField: string;\n      endIsOptional?: boolean;\n    }) => {\n      const { startField, endField, endIsOptional = false } = options;\n      \n      return (data: any) => {\n        // If end date is optional and not provided, validation passes\n        if (endIsOptional && !data[endField]) return true;\n        \n        const startDate = new Date(data[startField]);\n        const endDate = new Date(data[endField]);\n        \n        return endDate >= startDate;\n      };\n    },\n\n    /**\n     * Returns localized date range error message\n     */\n    getDateRangeErrorMessage: (options: {\n      startField: string;\n      endField: string;\n    }) => {\n      const { startField, endField } = options;\n      \n      return {\n        message: t('endDateAfterStart', { \n          startField: t(startField), \n          endField: t(endField) \n        }),\n        path: [endField],\n      };\n    }\n  };\n};\n","import { useMemo } from 'react';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { createLocalizedSchemas } from '@/validation/createLocalizedSchemas';\n\n/**\n * Hook that provides localized schema factory functions\n * @returns Object with schema creation functions\n */\nexport const useLocalizedSchemas = () => {\n  const { t, language } = useLocalization();\n  \n  // Create localized schemas using the current language\n  const schemas = useMemo(() => {\n    return createLocalizedSchemas(t);\n  }, [t, language]);\n  \n  return schemas;\n};\n","import {\n  createFormHook,\n  formOptions,\n  createFormHookContexts,\n} from '@tanstack/react-form';\nimport { defaultLoanDetails } from '@/types/form';\nimport { unformatFormValues } from '@/utils/unformatFormValues';\nimport { useMortgage } from '@/providers/MortgageProvider';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocalizedFormSchemas } from '@/schemas/localizedSchemas';\nimport { useEffect } from 'react';\nimport { cloudStorage } from '@telegram-apps/sdk-react';\n\nexport const { fieldContext, formContext, useFieldContext, useFormContext } =\n  createFormHookContexts();\n\nexport const { useAppForm, withForm } = createFormHook({\n  fieldContext,\n  formContext,\n  fieldComponents: {},\n  formComponents: {},\n});\n\nexport const formOpts = formOptions({\n  defaultValues: defaultLoanDetails,\n});\n\nexport const useLoanForm = () => {\n  const navigate = useNavigate();\n  // const [formData, setFormData] = useState<null | LoanDetailsType>(null);\n\n  const { setLoanDetails, setEarlyPayments, setRegularPayments } =\n    useMortgage();\n  const { formSchema } = useLocalizedFormSchemas();\n\n  useEffect(() => {\n    const getKeys = async () => {\n      console.log(cloudStorage.isSupported(), 'isSupported');\n\n      try {\n        if (cloudStorage.isSupported()) {\n          console.log('1');\n          const keys = await cloudStorage.getKeys();\n          const test = await cloudStorage.getItem('form');\n          console.log('2');\n          alert(keys);\n          alert(test);\n        }\n      } catch (error) {\n        console.log(error, 'erorororor');\n      }\n    };\n\n    getKeys();\n  }, []);\n\n  return useAppForm({\n    ...formOpts,\n    validators: {\n      onChange: formSchema,\n    },\n    onSubmit: async ({ value }) => {\n      try {\n        const loanDetails = unformatFormValues(value);\n        console.log(loanDetails, 'loanDetails');\n        if (cloudStorage.isSupported()) {\n          console.log('hi');\n          cloudStorage.setItem('form', JSON.stringify(loanDetails));\n          console.log('hi2');\n        }\n        const { earlyPayments, regularPayments, ...rest } = loanDetails;\n        setLoanDetails(rest);\n        setEarlyPayments(earlyPayments);\n        setRegularPayments(regularPayments);\n        navigate('result');\n      } catch (error) {\n        console.error('Form submission error:', error);\n      }\n    },\n  });\n};\n","import { z } from 'zod';\nimport { useLocalizedSchemas } from '@/hooks/useLocalizedSchemas';\n\n/**\n * Hook that provides localized schemas for form validation\n * @returns Object with localized schemas\n */\nexport const useLocalizedFormSchemas = () => {\n  const schemas = useLocalizedSchemas();\n  \n  // Loan details schema\n  const loanDetailsSchema = z.object({\n    loanAmount: schemas.createNumberSchema({\n      fieldName: 'loanAmount',\n      min: 0,\n      max: 1000000000\n    }),\n    \n    interestRate: schemas.createNumberSchema({\n      fieldName: 'interestRate',\n      min: 0,\n      max: 100\n    }),\n    \n    loanTerm: schemas.createNumberSchema({\n      fieldName: 'loanTerm',\n      min: 0,\n      max: 50\n    }),\n    \n    startDate: schemas.createDateSchema({\n      fieldName: 'startDate'\n    }),\n    \n    paymentType: z.enum(['annuity', 'differentiated']),\n    \n    paymentDay: z.string()\n      .transform((val) => parseInt(val))\n      .refine((val) => !isNaN(val), 'validation.mustBeNumber')\n      .refine((val) => val >= 1 && val <= 31, 'validation.dayOfMonth'),\n  });\n  \n  // Early payment schema\n  const earlyPaymentSchema = z.object({\n    date: schemas.createDateSchema({\n      fieldName: 'earlyPaymentDate'\n    }),\n    \n    amount: schemas.createNumberSchema({\n      fieldName: 'earlyPaymentAmount',\n      min: 0\n    }),\n    \n    type: z.enum(['reduceTerm', 'reducePayment']),\n  });\n  \n  // Regular payment schema\n  const regularPaymentSchema = z.object({\n    id: z.string(),\n    \n    amount: schemas.createNumberSchema({\n      fieldName: 'regularPaymentAmount',\n      min: 0\n    }),\n    \n    startMonth: schemas.createDateSchema({\n      fieldName: 'startMonth'\n    }),\n    \n    endMonth: schemas.createDateSchema({\n      fieldName: 'endMonth'\n    }),\n    \n    type: z.enum(['reduceTerm', 'reducePayment']),\n  }).refine(\n    schemas.createDateRangeRefinement({\n      startField: 'startMonth',\n      endField: 'endMonth'\n    }),\n    schemas.getDateRangeErrorMessage({\n      startField: 'startMonth',\n      endField: 'endMonth'\n    })\n  );\n  \n  // Regular early payment schema\n  const regularEarlyPaymentSchema = z.object({\n    amount: schemas.createNumberSchema({\n      fieldName: 'regularPaymentAmount',\n      min: 0\n    }),\n    \n    startMonth: schemas.createDateSchema({\n      fieldName: 'startMonth'\n    }),\n    \n    endMonth: schemas.createDateSchema({\n      fieldName: 'endMonth'\n    }).optional(),\n    \n    type: z.enum(['reduceTerm', 'reducePayment']),\n  }).refine(\n    schemas.createDateRangeRefinement({\n      startField: 'startMonth',\n      endField: 'endMonth',\n      endIsOptional: true\n    }),\n    schemas.getDateRangeErrorMessage({\n      startField: 'startMonth',\n      endField: 'endMonth'\n    })\n  );\n  \n  // Main form schema\n  const formSchema = z.object({\n    loanAmount: loanDetailsSchema.shape.loanAmount,\n    interestRate: loanDetailsSchema.shape.interestRate,\n    loanTerm: loanDetailsSchema.shape.loanTerm,\n    startDate: loanDetailsSchema.shape.startDate,\n    paymentType: loanDetailsSchema.shape.paymentType,\n    paymentDay: loanDetailsSchema.shape.paymentDay,\n    earlyPayments: z.array(earlyPaymentSchema.extend({ id: z.string() })),\n    regularPayments: z.array(regularPaymentSchema),\n  });\n  \n  return {\n    loanDetailsSchema,\n    earlyPaymentSchema,\n    regularPaymentSchema,\n    regularEarlyPaymentSchema,\n    formSchema\n  };\n};\n\n// Types for the validated schemas\nexport type LocalizedLoanDetailsSchema = ReturnType<typeof useLocalizedFormSchemas>['loanDetailsSchema'];\nexport type LocalizedEarlyPaymentSchema = ReturnType<typeof useLocalizedFormSchemas>['earlyPaymentSchema'];\nexport type LocalizedRegularPaymentSchema = ReturnType<typeof useLocalizedFormSchemas>['regularPaymentSchema'];\nexport type LocalizedRegularEarlyPaymentSchema = ReturnType<typeof useLocalizedFormSchemas>['regularEarlyPaymentSchema'];\nexport type LocalizedFormSchema = ReturnType<typeof useLocalizedFormSchemas>['formSchema'];\n\n// Type for the validated form data\nexport type LocalizedFormSchemaType = z.infer<LocalizedFormSchema>;\n","import { unformat } from '@react-input/number-format';\nimport { LoanDetailsType } from '@/types/form';\n\n/**\n * Transforms form values from strings to numbers\n * @param values Form values with string types\n * @returns Transformed values with number types\n */\nexport function unformatFormValues(values: LoanDetailsType) {\n  return {\n    loanAmount: parseFloat(unformat(values.loanAmount)),\n    interestRate: parseFloat(unformat(values.interestRate)),\n    loanTerm: parseFloat(unformat(values.loanTerm)),\n    startDate: values.startDate,\n    paymentType: values.paymentType,\n    paymentDay: parseInt(values.paymentDay),\n    earlyPayments: values.earlyPayments.map((earlyPayment) => ({\n      ...earlyPayment,\n      amount: parseFloat(unformat(earlyPayment.amount))\n    })),\n    regularPayments: values.regularPayments.map((regularPayment) => ({\n      ...regularPayment,\n      amount: parseFloat(unformat(regularPayment.amount))\n    })),\n  }\n}\n","import { memo } from 'react';\nimport { List, Section } from '@telegram-apps/telegram-ui';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport InputNumberFormat from '@/components/ui/InputNumberFormat';\nimport Select from '@/components/ui/Select';\nimport Input from '@/components/ui/Input';\nimport { formOpts, withForm } from '@/hooks/useLoanForm';\n\nconst LoanDetailsForm = withForm({\n  ...formOpts,\n  render: function Render({ form }) {\n    const { t, language } = useLocalization();\n\n    return (\n      <Section header={t('loanDetails')}>\n        <List>\n          <form.Field\n            name={'loanAmount'}\n            children={(field) => (\n              <InputNumberFormat\n                header={t('loanAmount')}\n                placeholder={t('loanAmount')}\n                field={field}\n                inputMode='decimal'\n                maximumFractionDigits={2}\n              />\n            )}\n          />\n          <form.Field\n            name={'interestRate'}\n            children={(field) => (\n              <InputNumberFormat\n                header={t('interestRate')}\n                placeholder={t('interestRate')}\n                field={field}\n                format='percent'\n                inputMode='decimal'\n                maximumFractionDigits={2}\n              />\n            )}\n          />\n          <form.Field\n            name={'loanTerm'}\n            children={(field) => (\n              <InputNumberFormat\n                format='unit'\n                unit='year'\n                locales={language}\n                header={t('loanTerm')}\n                placeholder={t('loanTerm')}\n                field={field}\n                inputMode='numeric'\n                maximumIntegerDigits={2}\n              />\n            )}\n          />\n          <form.Field\n            name={'startDate'}\n            children={(field) => (\n              <Input\n                header={t('startDate')}\n                placeholder={t('startDate')}\n                field={field}\n                type='date'\n              />\n            )}\n          />\n          <form.Field\n            name={'paymentType'}\n            children={(field) => (\n              <Select\n                header={t('paymentType')}\n                field={field}\n                options={[\n                  {\n                    label: t('annuityPayment'),\n                    value: 'annuity',\n                  },\n                  {\n                    label: t('differentiatedPayment'),\n                    value: 'differentiated',\n                  },\n                ]}\n              />\n            )}\n          />\n          <form.Field\n            name={'paymentDay'}\n            children={(field) => (\n              <Select\n                header={t('paymentDay')}\n                field={field}\n                options={Array.from({ length: 31 }, (_, i) => i + 1).map(\n                  (day) => ({\n                    label: String(day),\n                    value: String(day),\n                  })\n                )}\n              />\n            )}\n          />\n        </List>\n      </Section>\n    );\n  },\n});\n\nexport default memo(LoanDetailsForm);\n","import { memo, useState } from 'react';\nimport { Accordion, Badge, Button, List, Section } from '@telegram-apps/telegram-ui';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport InputNumberFormat from '@/components/ui/InputNumberFormat';\nimport Select from '@/components/ui/Select';\nimport Input from '@/components/ui/Input';\nimport { formOpts, withForm } from '@/hooks/useLoanForm';\n\nconst EarlyPaymentsForm = withForm({\n  ...formOpts,\n  render: function Render({ form }) {\n    const [open, setOpen] = useState(false);\n    const { t } = useLocalization();\n\n    return (\n      <Section>\n        <form.Field name='earlyPayments' mode='array'>\n          {(field) => {\n            return (\n              <Accordion\n                expanded={open}\n                onChange={() => setOpen((prev) => !prev)}\n              >\n                <Accordion.Summary>\n                  {t('earlyPayment')}\n                  {Boolean(field.state.value.length) && (\n                    <Badge large type='dot'>\n                      {field.state.value.length}\n                    </Badge>\n                  )}\n                </Accordion.Summary>\n                <Accordion.Content style={{ background: 'transparent' }}>\n                  <Section>\n                    {field.state.value.map((_, i) => {\n                      return (\n                        <List key={i}>\n                          <form.Field\n                            name={`earlyPayments[${i}].amount`}\n                            children={(field) => (\n                              <InputNumberFormat\n                                header={t('earlyPaymentAmount')}\n                                placeholder={t('earlyPaymentAmount')}\n                                field={field}\n                                inputMode='decimal'\n                                maximumFractionDigits={2}\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`earlyPayments[${i}].date`}\n                            children={(field) => (\n                              <Input\n                                header={t('earlyPaymentDate')}\n                                placeholder={t('earlyPaymentDate')}\n                                field={field}\n                                type='date'\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`earlyPayments[${i}].type`}\n                            children={(field) => (\n                              <Select\n                                header={t('earlyPaymentType')}\n                                field={field}\n                                options={[\n                                  {\n                                    label: t('typeReduceTerm'),\n                                    value: 'reduceTerm',\n                                  },\n                                  {\n                                    label: t('typeReducePayment'),\n                                    value: 'reducePayment',\n                                  },\n                                ]}\n                              />\n                            )}\n                          />\n                          <form.Subscribe\n                            selector={(state) => [\n                              state.isFieldsValid,\n                              state.isValid,\n                            ]}\n                            children={([isFieldsValid, isValid]) => (\n                              <Button\n                                size='s'\n                                mode='outline'\n                                disabled={!isFieldsValid || !isValid}\n                                stretched\n                                onClick={() => field.removeValue(i)}\n                              >\n                                {t('remove')}\n                              </Button>\n                            )}\n                          />\n                        </List>\n                      );\n                    })}\n                    <form.Subscribe\n                      selector={(state) => [state.isFieldsValid, state.isValid]}\n                      children={([isFieldsValid, isValid]) => (\n                        <Button\n                          disabled={!isFieldsValid || !isValid}\n                          stretched\n                          onClick={() =>\n                            field.pushValue({\n                              amount: '',\n                              date: new Date().toISOString().split('T')[0],\n                              id: Date.now().toString(),\n                              type: 'reduceTerm',\n                            })\n                          }\n                        >\n                          {t('addEarlyPayment')}\n                        </Button>\n                      )}\n                    />\n                  </Section>\n                </Accordion.Content>\n              </Accordion>\n            );\n          }}\n        </form.Field>\n      </Section>\n    );\n  },\n});\n\nexport default memo(EarlyPaymentsForm); ","import { memo, useState } from 'react';\nimport { Accordion, Badge, Button, List, Section } from '@telegram-apps/telegram-ui';\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport InputNumberFormat from '@/components/ui/InputNumberFormat';\nimport Select from '@/components/ui/Select';\nimport Input from '@/components/ui/Input';\nimport { formOpts, withForm } from '@/hooks/useLoanForm';\n\n/**\n * Form component for regular payments\n * Allows users to set up recurring monthly payments with a specified amount,\n * date range, and recalculation type (reduce term or reduce payment)\n */\nconst RegularPaymentsForm = withForm({\n  ...formOpts,\n  render: function Render({ form }) {\n    const [open, setOpen] = useState(false);\n    const { t } = useLocalization();\n\n    return (\n      <Section>\n        <form.Field name='regularPayments' mode='array'>\n          {(field) => {\n            return (\n              <Accordion\n                expanded={open}\n                onChange={() => setOpen((prev) => !prev)}\n              >\n                <Accordion.Summary>\n                  {t('regularPayment')}\n                  {Boolean(field.state.value.length) && (\n                    <Badge large type='dot'>\n                      {field.state.value.length}\n                    </Badge>\n                  )}\n                </Accordion.Summary>\n                <Accordion.Content style={{ background: 'transparent' }}>\n                  <Section>\n                    {field.state.value.map((_, i) => {\n                      return (\n                        <List key={i}>\n                          <form.Field\n                            name={`regularPayments[${i}].amount`}\n                            children={(field) => (\n                              <InputNumberFormat\n                                header={t('regularPaymentAmount')}\n                                placeholder={t('regularPaymentAmount')}\n                                field={field}\n                                inputMode='decimal'\n                                maximumFractionDigits={2}\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`regularPayments[${i}].startMonth`}\n                            children={(field) => (\n                              <Input\n                                header={t('startMonth')}\n                                placeholder={t('startMonth')}\n                                field={field}\n                                type='date'\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`regularPayments[${i}].endMonth`}\n                            children={(field) => (\n                              <Input\n                                header={t('endMonth')}\n                                placeholder={t('endMonth')}\n                                field={field}\n                                type='date'\n                              />\n                            )}\n                          />\n                          <form.Field\n                            name={`regularPayments[${i}].type`}\n                            children={(field) => (\n                              <Select\n                                header={t('earlyPaymentType')}\n                                field={field}\n                                options={[\n                                  {\n                                    label: t('typeReduceTerm'),\n                                    value: 'reduceTerm',\n                                  },\n                                  {\n                                    label: t('typeReducePayment'),\n                                    value: 'reducePayment',\n                                  },\n                                ]}\n                              />\n                            )}\n                          />\n                          <form.Subscribe\n                            selector={(state) => [\n                              state.isFieldsValid,\n                              state.isValid,\n                            ]}\n                            children={([isFieldsValid, isValid]) => (\n                              <Button\n                                size='s'\n                                mode='outline'\n                                disabled={!isFieldsValid || !isValid}\n                                stretched\n                                onClick={() => field.removeValue(i)}\n                              >\n                                {t('remove')}\n                              </Button>\n                            )}\n                          />\n                        </List>\n                      );\n                    })}\n                    <form.Subscribe\n                      selector={(state) => [state.isFieldsValid, state.isValid]}\n                      children={([isFieldsValid, isValid]) => (\n                        <Button\n                          disabled={!isFieldsValid || !isValid}\n                          stretched\n                          onClick={() => {\n                            const today = new Date();\n                            const nextMonth = new Date(today);\n                            nextMonth.setMonth(today.getMonth() + 1);\n                            \n                            field.pushValue({\n                              amount: '',\n                              startMonth: today.toISOString().split('T')[0],\n                              endMonth: nextMonth.toISOString().split('T')[0],\n                              id: Date.now().toString(),\n                              type: 'reduceTerm',\n                            });\n                          }}\n                        >\n                          {t('addRegularPayment')}\n                        </Button>\n                      )}\n                    />\n                  </Section>\n                </Accordion.Content>\n              </Accordion>\n            );\n          }}\n        </form.Field>\n      </Section>\n    );\n  },\n});\n\nexport default memo(RegularPaymentsForm);\n","import { FC, memo } from 'react';\n\nimport { List, Section, Button } from '@telegram-apps/telegram-ui';\n\nimport LoanDetailsForm from '@/components/form/LoanDetailsForm';\nimport EarlyPaymentsForm from '@/components/form/EarlyPaymentsForm';\nimport RegularPaymentsForm from '@/components/form/RegularPaymentsForm';\n\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { useLoanForm } from '@/hooks/useLoanForm';\nimport Page from '@/components/Page';\n\nconst LoanForm: FC = () => {\n  const { t } = useLocalization();\n  const form = useLoanForm();\n\n  return (\n    <Page back={false}>\n      <List\n        Component='form'\n        onSubmit={(event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          form.handleSubmit();\n        }}\n      >\n        <LoanDetailsForm form={form} />\n        <EarlyPaymentsForm form={form} />\n        <RegularPaymentsForm form={form} />\n        <Section>\n          <form.Subscribe\n            selector={(state) => [state.canSubmit, state.isSubmitting]}\n            children={([canSubmit, isSubmitting]) => (\n              <Button\n                type='submit'\n                stretched\n                disabled={!canSubmit}\n                loading={isSubmitting}\n              >\n                {t('calculate')}\n              </Button>\n            )}\n          />\n        </Section>\n      </List>\n    </Page>\n  );\n};\n\nexport default memo(LoanForm);\n","export function isRecord(v: unknown): v is Record<string, unknown> {\n  return !!v && typeof v === 'object' && !Array.isArray(v);\n}\n\n/**\n * Function which joins passed values with space following these rules:\n * 1. If value is non-empty string, it will be added to output.\n * 2. If value is object, only those keys will be added, which values are truthy.\n * 3. If value is array, classNames will be called with this value spread.\n * 4. All other values are ignored.\n *\n * You can find this function to similar one from the package {@link https://www.npmjs.com/package/classnames|classnames}.\n * @param values - values array.\n * @returns Final class name.\n */\nexport function classNames(...values: any[]): string {\n  return values\n    .map((value) => {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (isRecord(value)) {\n        return classNames(Object.entries(value).map((entry) => entry[1] && entry[0]));\n      }\n\n      if (Array.isArray(value)) {\n        return classNames(...value);\n      }\n    })\n    .filter(Boolean)\n    .join(' ');\n}\n\ntype UnionStringKeys<U> = U extends U\n  ? { [K in keyof U]-?: U[K] extends string | undefined ? K : never }[keyof U]\n  : never;\n\ntype UnionRequiredKeys<U> = U extends U\n  ? { [K in UnionStringKeys<U>]: (object extends Pick<U, K> ? never : K) }[UnionStringKeys<U>]\n  : never;\n\ntype UnionOptionalKeys<U> = Exclude<UnionStringKeys<U>, UnionRequiredKeys<U>>;\n\nexport type MergeClassNames<Tuple extends any[]> =\n// Removes all types from union that will be ignored by the mergeClassNames function.\n  Exclude<Tuple[number], number | string | null | undefined | any[] | boolean> extends infer Union\n    ?\n    & { [K in UnionRequiredKeys<Union>]: string; }\n    & { [K in UnionOptionalKeys<Union>]?: string; }\n    : never;\n\n/**\n * Merges two sets of classnames.\n *\n * The function expects to pass an array of objects with values that could be passed to\n * the `classNames` function.\n * @returns An object with keys from all objects with merged values.\n * @see classNames\n */\nexport function mergeClassNames<T extends any[]>(...partials: T): MergeClassNames<T> {\n  return partials.reduce<MergeClassNames<T>>((acc, partial) => {\n    if (isRecord(partial)) {\n      Object.entries(partial).forEach(([key, value]) => {\n        const className = classNames((acc as any)[key], value);\n        if (className) {\n          (acc as any)[key] = className;\n        }\n      });\n    }\n    return acc;\n  }, {} as MergeClassNames<T>);\n}","import { classNames, isRecord } from '@/css/classnames.js';\n\nexport interface BlockFn {\n  (...mods: any): string;\n}\n\nexport interface ElemFn {\n  (elem: string, ...mods: any): string;\n}\n\n/**\n * Applies mods to the specified element.\n * @param element - element name.\n * @param mod - mod to apply.\n */\nfunction applyMods(element: string, mod: any): string {\n  if (Array.isArray(mod)) {\n    return classNames(mod.map(m => applyMods(element, m)));\n  }\n  if (isRecord(mod)) {\n    return classNames(\n      Object.entries(mod).map(([mod, v]) => v && applyMods(element, mod)),\n    );\n  }\n  const v = classNames(mod);\n  return v && `${element}--${v}`;\n}\n\n/**\n * Computes final classname for the specified element.\n * @param element - element name.\n * @param mods - mod to apply.\n */\nfunction computeClassnames(element: string, ...mods: any): string {\n  return classNames(element, applyMods(element, mods));\n}\n\n/**\n * @returns A tuple, containing two functions. The first one generates classnames list for the\n * block, the second one generates classnames for its elements.\n * @param block - BEM block name.\n */\nexport function bem(block: string): [BlockFn, ElemFn] {\n  return [\n    (...mods) => computeClassnames(block, mods),\n    (elem, ...mods) => computeClassnames(`${block}__${elem}`, mods),\n  ];\n}","import type { RGB as RGBType } from '@telegram-apps/sdk-react';\nimport type { FC } from 'react';\n\nimport { bem } from '@/css/bem.ts';\nimport { classNames } from '@/css/classnames.ts';\n\nimport './RGB.css';\n\nconst [b, e] = bem('rgb');\n\nexport type RGBProps = JSX.IntrinsicElements['div'] & {\n  color: RGBType;\n};\n\nexport const RGB: FC<RGBProps> = ({ color, className, ...rest }) => (\n  <span {...rest} className={classNames(b(), className)}>\n    <i className={e('icon')} style={{ backgroundColor: color }}/>\n    {color}\n  </span>\n);\n","import { openLink } from '@telegram-apps/sdk-react';\nimport { type FC, type MouseEventHandler, useCallback } from 'react';\nimport { Link as RouterLink, type LinkProps } from 'react-router-dom';\n\nimport { classNames } from '@/css/classnames.ts';\n\nimport './Link.css';\n\nexport const Link: FC<LinkProps> = ({\n  className,\n  onClick: propsOnClick,\n  to,\n  ...rest\n}) => {\n  const onClick = useCallback<MouseEventHandler<HTMLAnchorElement>>((e) => {\n    propsOnClick?.(e);\n\n    // Compute if target path is external. In this case we would like to open\n    // link using TMA method.\n    let path: string;\n    if (typeof to === 'string') {\n      path = to;\n    } else {\n      const { search = '', pathname = '', hash = '' } = to;\n      path = `${pathname}?${search}#${hash}`;\n    }\n\n    const targetUrl = new URL(path, window.location.toString());\n    const currentUrl = new URL(window.location.toString());\n    const isExternal = targetUrl.protocol !== currentUrl.protocol\n      || targetUrl.host !== currentUrl.host;\n\n    if (isExternal) {\n      e.preventDefault();\n      openLink(targetUrl.toString());\n    }\n  }, [to, propsOnClick]);\n\n  return (\n    <RouterLink\n      {...rest}\n      to={to}\n      onClick={onClick}\n      className={classNames(className, 'link')}\n    />\n  );\n};\n","import { isRGB } from '@telegram-apps/sdk-react';\nimport { Cell, Checkbox, Section } from '@telegram-apps/telegram-ui';\nimport type { FC, ReactNode } from 'react';\n\nimport { RGB } from '@/components/RGB/RGB.tsx';\nimport { Link } from '@/components/Link/Link.tsx';\nimport { bem } from '@/css/bem.ts';\n\nimport './DisplayData.css';\n\nconst [, e] = bem('display-data');\n\nexport type DisplayDataRow =\n  & { title: string }\n  & (\n  | { type: 'link'; value?: string }\n  | { value: ReactNode }\n  )\n\nexport interface DisplayDataProps {\n  header?: ReactNode;\n  footer?: ReactNode;\n  rows: DisplayDataRow[];\n}\n\nexport const DisplayData: FC<DisplayDataProps> = ({ header, rows }) => (\n  <Section header={header}>\n    {rows.map((item, idx) => {\n      let valueNode: ReactNode;\n\n      if (item.value === undefined) {\n        valueNode = <i>empty</i>;\n      } else {\n        if ('type' in item) {\n          valueNode = <Link to={item.value}>Open</Link>;\n        } else if (typeof item.value === 'string') {\n          valueNode = isRGB(item.value)\n            ? <RGB color={item.value}/>\n            : item.value;\n        } else if (typeof item.value === 'boolean') {\n          valueNode = <Checkbox checked={item.value} disabled/>;\n        } else {\n          valueNode = item.value;\n        }\n      }\n\n      return (\n        <Cell\n          className={e('line')}\n          subhead={item.title}\n          readOnly\n          multiline={true}\n          key={idx}\n        >\n          <span className={e('line-value')}>\n            {valueNode}\n          </span>\n        </Cell>\n      );\n    })}\n  </Section>\n);\n","import { type FC, useMemo } from 'react';\nimport {\n  initDataRaw as _initDataRaw,\n  initDataState as _initDataState,\n  type User,\n  useSignal,\n} from '@telegram-apps/sdk-react';\nimport { List, Placeholder } from '@telegram-apps/telegram-ui';\n\nimport {\n  DisplayData,\n  type DisplayDataRow,\n} from '@/components/DisplayData/DisplayData.tsx';\nimport Page from '@/components/Page.tsx';\n\nfunction getUserRows(user: User): DisplayDataRow[] {\n  return Object.entries(user).map(([title, value]) => ({ title, value }));\n}\n\nexport const InitDataPage: FC = () => {\n  const initDataRaw = useSignal(_initDataRaw);\n  const initDataState = useSignal(_initDataState);\n\n  const initDataRows = useMemo<DisplayDataRow[] | undefined>(() => {\n    if (!initDataState || !initDataRaw) {\n      return;\n    }\n    return [\n      { title: 'raw', value: initDataRaw },\n      ...Object.entries(initDataState).reduce<DisplayDataRow[]>(\n        (acc, [title, value]) => {\n          if (value instanceof Date) {\n            acc.push({ title, value: value.toISOString() });\n          } else if (!value || typeof value !== 'object') {\n            acc.push({ title, value });\n          }\n          return acc;\n        },\n        []\n      ),\n    ];\n  }, [initDataState, initDataRaw]);\n\n  const userRows = useMemo<DisplayDataRow[] | undefined>(() => {\n    return initDataState && initDataState.user\n      ? getUserRows(initDataState.user)\n      : undefined;\n  }, [initDataState]);\n\n  const receiverRows = useMemo<DisplayDataRow[] | undefined>(() => {\n    return initDataState && initDataState.receiver\n      ? getUserRows(initDataState.receiver)\n      : undefined;\n  }, [initDataState]);\n\n  const chatRows = useMemo<DisplayDataRow[] | undefined>(() => {\n    return !initDataState?.chat\n      ? undefined\n      : Object.entries(initDataState.chat).map(([title, value]) => ({\n          title,\n          value,\n        }));\n  }, [initDataState]);\n\n  if (!initDataRows) {\n    return (\n      <Page>\n        <Placeholder\n          header='Oops'\n          description='Application was launched with missing init data'\n        >\n          <img\n            alt='Telegram sticker'\n            src='https://xelene.me/telegram.gif'\n            style={{ display: 'block', width: '144px', height: '144px' }}\n          />\n        </Placeholder>\n      </Page>\n    );\n  }\n  return (\n    <Page>\n      <List>\n        <DisplayData header={'Init Data'} rows={initDataRows} />\n        {userRows && <DisplayData header={'User'} rows={userRows} />}\n        {receiverRows && (\n          <DisplayData header={'Receiver'} rows={receiverRows} />\n        )}\n        {chatRows && <DisplayData header={'Chat'} rows={chatRows} />}\n      </List>\n    </Page>\n  );\n};\n","import type { ComponentType, JSX } from 'react';\n\nimport { MortageResult } from '@/pages/MortageResult';\nimport { LoanForm } from '@/pages/LoanForm';\nimport { InitDataPage } from '@/pages/InitDataPage';\nimport { ThemeParamsPage } from '@/pages/ThemeParamsPage';\nimport { LaunchParamsPage } from '@/pages/LaunchParamsPage';\n\ninterface Route {\n  path: string;\n  Component: ComponentType;\n  title?: string;\n  icon?: JSX.Element;\n}\n\nexport const routes: Route[] = [\n  { path: '/', Component: LoanForm },\n  { path: '/result', Component: MortageResult, title: 'Mortage Result' },\n  { path: '/init-data', Component: InitDataPage, title: 'Init Data' },\n  { path: '/theme-params', Component: ThemeParamsPage, title: 'Theme Params' },\n  {\n    path: '/launch-params',\n    Component: LaunchParamsPage,\n    title: 'Launch Params',\n  },\n];\n","import { themeParams, useSignal } from '@telegram-apps/sdk-react';\nimport type { FC } from 'react';\nimport { List } from '@telegram-apps/telegram-ui';\n\nimport { DisplayData } from '@/components/DisplayData/DisplayData.tsx';\nimport Page from '@/components/Page.tsx';\n\nexport const ThemeParamsPage: FC = () => {\n  const tp = useSignal(themeParams.state);\n\n  return (\n    <Page>\n      <List>\n        <DisplayData\n          rows={Object.entries(tp).map(([title, value]) => ({\n            title: title\n              .replace(/[A-Z]/g, (m) => `_${m.toLowerCase()}`)\n              .replace(/background/, 'bg'),\n            value,\n          }))}\n        />\n      </List>\n    </Page>\n  );\n};\n","import { retrieveLaunchParams } from '@telegram-apps/sdk-react';\nimport { List } from '@telegram-apps/telegram-ui';\nimport { type FC, useMemo } from 'react';\n\nimport { DisplayData } from '@/components/DisplayData/DisplayData.tsx';\nimport Page  from '@/components/Page.tsx';\n\nexport const LaunchParamsPage: FC = () => {\n  const lp = useMemo(() => retrieveLaunchParams(), []);\n\n  return (\n    <Page>\n      <List>\n        <DisplayData\n          rows={[\n            { title: 'tgWebAppPlatform', value: lp.tgWebAppPlatform },\n            { title: 'tgWebAppShowSettings', value: lp.tgWebAppShowSettings },\n            { title: 'tgWebAppVersion', value: lp.tgWebAppVersion },\n            { title: 'tgWebAppBotInline', value: lp.tgWebAppBotInline },\n            { title: 'tgWebAppStartParam', value: lp.tgWebAppStartParam },\n            { title: 'tgWebAppData', type: 'link', value: '/init-data' },\n            { title: 'tgWebAppThemeParams', type: 'link', value: '/theme-params' },\n          ]}\n        />\n      </List>\n    </Page>\n  );\n};\n","import { memo } from 'react';\nimport { HashRouter, Navigate, Route, Routes } from 'react-router-dom';\n\nimport { routes } from './routes';\n\nconst Router = () => {\n  return (\n    <HashRouter>\n      <Routes>\n        {routes.map((route) => (\n          <Route key={route.path} {...route} />\n        ))}\n        <Route path='*' element={<Navigate to='/' />} />\n      </Routes>\n    </HashRouter>\n  );\n};\n\nexport default memo(Router);\n","import { useMemo } from 'react';\nimport { retrieveLaunchParams, useSignal, isMiniAppDark } from '@telegram-apps/sdk-react';\nimport { AppRoot } from '@telegram-apps/telegram-ui';\n\nimport Router from '@/navigation/Router';\n\nconst App = () => {\n  const lp = useMemo(() => retrieveLaunchParams(), []);\n  const isDark = useSignal(isMiniAppDark);\n\n  return (\n    <AppRoot\n      appearance={isDark ? 'dark' : 'light'}\n      platform={['macos', 'ios'].includes(lp.tgWebAppPlatform) ? 'ios' : 'base'}\n    >\n     <Router />\n    </AppRoot>\n  );\n};\n\nexport default App;\n\n","import { memo } from 'react';\n\nimport ErrorBoundaryFallback from '@/components/ErrorBoundaryFallback';\nimport ErrorBoundary from '@/components/ErrorBoundary.tsx';\nimport App from '@/components/App.tsx';\n\nimport { LocalizationProvider } from '@/providers/LocalizationProvider';\nimport { MortgageProvider } from '@/providers/MortgageProvider';\n\nconst Root = () => {\n  return (\n    <ErrorBoundary fallback={ErrorBoundaryFallback}>\n      <LocalizationProvider>\n        <MortgageProvider>\n          <App />\n        </MortgageProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default memo(Root);\n","import { memo } from 'react';\n\nimport { retrieveLaunchParams, useSignal, miniApp } from '@telegram-apps/sdk-react';\nimport { Placeholder, AppRoot } from '@telegram-apps/telegram-ui';\n\nconst EnvUnsupported = () => {\n  const platform = retrieveLaunchParams().tgWebAppPlatform;\n  const isDark = useSignal(miniApp.isDark)\n\n  return (\n    <AppRoot\n      appearance={isDark ? 'dark' : 'light'}\n      platform={['macos', 'ios'].includes(platform) ? 'ios' : 'base'}\n    >\n      <Placeholder\n        header=\"Oops\"\n        description=\"You are using too old Telegram client to run this application\"\n      >\n        <img\n          alt=\"Telegram sticker\"\n          src=\"https://xelene.me/telegram.gif\"\n          style={{ display: 'block', width: '144px', height: '144px' }}\n        />\n      </Placeholder>\n    </AppRoot>\n  );\n};\n\nexport default memo(EnvUnsupported);","// Include Telegram UI styles first to allow our code override the package CSS.\nimport '@telegram-apps/telegram-ui/dist/styles.css';\n\nimport ReactDOM from 'react-dom/client';\nimport { retrieveLaunchParams } from '@telegram-apps/sdk-react';\n\nimport Root from '@/components/Root';\nimport EnvUnsupported from '@/components/EnvUnsupported';\nimport { init } from '@/init.ts';\n\nimport './index.css';\n\n// Mock the environment in case, we are outside Telegram.\nimport './mockEnv.ts';\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\ntry {\n  const launchParams = retrieveLaunchParams();\n  const { tgWebAppPlatform: platform } = launchParams;\n  const debug =\n    (launchParams.tgWebAppStartParam || '').includes('platformer_debug') ||\n    import.meta.env.DEV;\n\n  // Configure all application dependencies.\n  await init({\n    debug,\n    eruda: debug && ['ios', 'android'].includes(platform),\n    mockForMacOS: platform === 'macos',\n  }).then(() => {\n    root.render(<Root />);\n  });\n} catch (e) {\n  console.log(e);\n  root.render(<EnvUnsupported />);\n}\n","import {\n  setDebug,\n  restoreInitData,\n  init as initSDK,\n  bindThemeParamsCssVars,\n  bindViewportCssVars,\n  mockTelegramEnv,\n  type ThemeParams,\n  themeParamsState,\n  retrieveLaunchParams,\n  emitEvent,\n  bindMiniAppCssVars,\n  miniApp,\n  viewport,\n  enableClosingConfirmation,\n  swipeBehavior,\n  closingBehavior,\n  backButton,\n} from '@telegram-apps/sdk-react';\n\n/**\n * Initializes the application and configures its dependencies.\n */\nexport async function init(options: {\n  debug: boolean;\n  eruda: boolean;\n  mockForMacOS: boolean;\n}): Promise<void> {\n  // Set @telegram-apps/sdk-react debug mode and initialize it.\n  setDebug(options.debug);\n  initSDK();\n\n  // Add Eruda if needed.\n  options.eruda && void import('eruda').then(({ default: eruda }) => {\n    eruda.init();\n    eruda.position({ x: window.innerWidth - 50, y: 0 });\n  });\n\n  // Telegram for macOS has a ton of bugs, including cases, when the client doesn't\n  // even response to the \"web_app_request_theme\" method. It also generates an incorrect\n  // event for the \"web_app_request_safe_area\" method.\n  if (options.mockForMacOS) {\n    let firstThemeSent = false;\n    mockTelegramEnv({\n      onEvent(event, next) {\n        if (event[0] === 'web_app_request_theme') {\n          let tp: ThemeParams = {};\n          if (firstThemeSent) {\n            tp = themeParamsState();\n          } else {\n            firstThemeSent = true;\n            tp ||= retrieveLaunchParams().tgWebAppThemeParams;\n          }\n          return emitEvent('theme_changed', { theme_params: tp });\n        }\n\n        if (event[0] === 'web_app_request_safe_area') {\n          return emitEvent('safe_area_changed', { left: 0, top: 0, right: 0, bottom: 0 });\n        }\n\n        next();\n      },\n    });\n  }\n\n  // Mount all components used in the project.\n  restoreInitData();\n  miniApp.mountSync()\n  await Promise.all([\n    viewport.mount().then(() => {\n      backButton.isSupported() && backButton.mount();\n      bindViewportCssVars();\n      bindMiniAppCssVars();\n      bindThemeParamsCssVars();\n      swipeBehavior.mount();\n      swipeBehavior.disableVertical();\n      closingBehavior.mount();\n      closingBehavior.enableConfirmation();\n      enableClosingConfirmation();\n\n    }),\n  ]);\n}"],"file":"assets/index-CAl2qGq2.js"}