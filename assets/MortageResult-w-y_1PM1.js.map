{"version":3,"mappings":"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","names":["LineChart","lazy","import","__VITE_PRELOAD__","PieChart","BarChart","DoughnutChart","RadarChart","memo","t","useLocalization","amortizationResult","useMortgage","schedule","length","months","useMemo","map","item","date","Date","getMonth","toString","padStart","getFullYear","slice","principals","principal","interests","interest","balances","balance","extraPaymentInfo","hasExtraPayment","extraPayment","amount","type","extraPaymentType","isRegular","isRegularPayment","lineChartData","labels","datasets","label","data","borderColor","backgroundColor","fill","yAxisID","borderDash","pieChartData","totalPrincipal","reduce","sum","value","totalInterest","summary","newTotalInterest","borderWidth","comparisonPieChartData","some","originalInterest","originalTotalInterest","newInterest","interestSaved","barChartData","interval","Math","max","floor","filteredMonths","filter","_","i","filteredPrincipals","filteredInterests","doughnutChartData","totalExtraPayments","hoverOffset","radarChartData","originalTerm","newTerm","originalPayment","originalMonthlyPayment","normalizedNewTerm","normalizedNewInterest","normalizedFinalPayment","finalMonthlyPayment","pointBackgroundColor","jsxs","Fragment","children","jsx","Suspense","fallback","Skeleton","visible","title","Icon28Stats","_param","restProps","_extends","_object_destructuring_empty","_jsx","_object_spread_props","_object_spread","width","height","xmlns","fillRule","clipRule","d","Table","className","styles","tableContainer","table","TableHead","tableHead","TableBody","tableBody","TableRow","highlight","style","tableRow","TableCell","header","tableHeader","Caption","weight","tableCell","Text","useSignal","viewportState","formatCurrency","formatDate","formatNumber","currentPage","setCurrentPage","useState","selectedItemIndex","setSelectedItemIndex","isModalOpened","setIsModalOpened","firstPayment","totalPages","ceil","startIndex","endIndex","min","currentItems","Section","Modal","onOpenChange","open","nested","Header","large","from","to","total","index","Boolean","IconButton","size","onClick","handleIconClick","month","payment","marginLeft","color","regularPaymentMessage","Footer","centered","Pagination","siblingCount","boundaryCount","page","count","onChange","mortgageResults","hasEarlyPayments","monthlyPayment","payoffDate","footer","Cell","readOnly","before","totalSavings","subtitle","subhead","loanTerm","paymentType","tabPanel","tabs","defaultTab","activeTab","setActiveTab","id","activeChild","React","Children","toArray","find","child","isValidElement","props","SegmentedControl","tab","SegmentedControlItem","selected","icon","IconContainer","MortageResult","Page","List","ResultsDisplay","TabView","TabPanel","ChartsContainer","PaymentSchedule"],"ignoreList":[1],"sources":["../../src/components/ChartsContainer.tsx","../../node_modules/@telegram-apps/telegram-ui/dist/icons/28/stats.js","../../src/components/Table.tsx","../../src/components/PaymentSchedule.tsx","../../src/components/ResultsDisplay.tsx","../../src/components/TabPanel.tsx","../../src/components/TabView.tsx","../../src/components/MortageResult.tsx"],"sourcesContent":["import { lazy, memo, Suspense, useMemo } from 'react';\n\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { useMortgage } from '@/providers/MortgageProvider';\nimport { Skeleton } from '@telegram-apps/telegram-ui';\n\nconst LineChart = lazy(() => import('@/components/charts/LineChart'));\nconst PieChart = lazy(() => import('@/components/charts/PieChart'));\nconst BarChart = lazy(() => import('@/components/charts/BarChart'));\nconst DoughnutChart = lazy(() => import('@/components/charts/DoughnutChart'));\nconst RadarChart = lazy(() => import('@/components/charts/RadarChart'));\n\nconst ChartsContainer = () => {\n  const { t } = useLocalization();\n  const { amortizationResult } = useMortgage();\n\n  if (!amortizationResult || amortizationResult.schedule.length === 0) {\n    return null;\n  }\n\n  const months = useMemo(() => {\n    return amortizationResult.schedule.map((item) => {\n      const date = new Date(item.date);\n      return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date\n        .getFullYear()\n        .toString()\n        .slice(2)}`;\n    });\n  }, [amortizationResult.schedule.length]);\n\n  const principals = useMemo(() => {\n    return amortizationResult.schedule.map((item) => item.principal);\n  }, [amortizationResult.schedule.length]);\n  const interests = useMemo(() => {\n    return amortizationResult.schedule.map((item) => item.interest);\n  }, [amortizationResult.schedule.length]);\n  const balances = useMemo(() => {\n    return amortizationResult.schedule.map((item) => item.balance);\n  }, [amortizationResult.schedule.length]);\n\n  // Extract early payment information for tooltips\n  const extraPaymentInfo = useMemo(() => {\n    return amortizationResult.schedule.map((item) => ({\n      hasExtraPayment: !!item.extraPayment && item.extraPayment > 0,\n      amount: item.extraPayment || 0,\n      type: item.extraPaymentType || '',\n      isRegular: item.isRegularPayment || false, // Add flag for regular payments\n    }));\n  }, [amortizationResult.schedule]);\n\n  const lineChartData = useMemo(() => {\n    return {\n      labels: months,\n      datasets: [\n        {\n          label: t('principal'),\n          data: principals,\n          borderColor: '#4bc0c0',\n          // https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4\n          backgroundColor: '#4bc0c033',\n          fill: true,\n          yAxisID: 'y',\n        },\n        {\n          label: t('interest'),\n          data: interests,\n          borderColor: '#ff6384',\n          // https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4\n          backgroundColor: '#ff638433',\n          fill: true,\n          yAxisID: 'y',\n        },\n        {\n          label: t('balance'),\n          data: balances,\n          borderColor: '#36a2eb',\n          // https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4\n          backgroundColor: '#36a2eb33',\n          borderDash: [5, 5],\n          fill: false,\n          yAxisID: 'y1',\n        },\n      ],\n    };\n  }, [principals.length, balances.length, interests.length]);\n\n  // Calculate total principal and interest for pie chart\n  const pieChartData = useMemo(() => {\n    const totalPrincipal = principals.reduce((sum, value) => sum + value, 0);\n    const totalInterest = amortizationResult.summary.newTotalInterest;\n\n    return {\n      labels: [t('principal'), t('interest')],\n      datasets: [\n        {\n          data: [totalPrincipal, totalInterest],\n          backgroundColor: ['#4bc0c0', '#ff6384'],\n          borderColor: ['#4bc0c0', '#ff6384'],\n          borderWidth: 1,\n        },\n      ],\n    };\n  }, [principals, amortizationResult.summary.newTotalInterest, t]);\n\n  // Add comparison pie chart for early payments impact\n  const comparisonPieChartData = useMemo(() => {\n    // Only show comparison if there are early payments\n    if (\n      !amortizationResult.schedule.some(\n        (item) => item.extraPayment && item.extraPayment > 0\n      )\n    ) {\n      return null;\n    }\n\n    const originalInterest = amortizationResult.summary.originalTotalInterest;\n    const newInterest = amortizationResult.summary.newTotalInterest;\n    const interestSaved = originalInterest - newInterest;\n\n    return {\n      labels: [t('newTotalInterest'), t('interestSaved')],\n      datasets: [\n        {\n          data: [newInterest, interestSaved],\n          backgroundColor: ['#36a2eb', '#4bc0c0'],\n          borderColor: ['#36a2eb', '#4bc0c0'],\n          borderWidth: 1,\n        },\n      ],\n    };\n  }, [amortizationResult, t]);\n\n  // Bar chart data for monthly principal vs interest\n  const barChartData = useMemo(() => {\n    // Only show a subset of months for better visibility\n    const interval = Math.max(1, Math.floor(months.length / 12));\n    const filteredMonths = months.filter((_, i) => i % interval === 0);\n    const filteredPrincipals = principals.filter((_, i) => i % interval === 0);\n    const filteredInterests = interests.filter((_, i) => i % interval === 0);\n\n    return {\n      labels: filteredMonths,\n      datasets: [\n        {\n          label: t('principal'),\n          data: filteredPrincipals,\n          backgroundColor: '#4bc0c0',\n        },\n        {\n          label: t('interest'),\n          data: filteredInterests,\n          backgroundColor: '#ff6384',\n        },\n      ],\n    };\n  }, [months, principals, interests, t]);\n\n  // Doughnut chart data for total payment breakdown\n  const doughnutChartData = useMemo(() => {\n    const totalPrincipal = principals.reduce((sum, value) => sum + value, 0);\n    const totalInterest = amortizationResult.summary.newTotalInterest;\n    const totalExtraPayments = amortizationResult.schedule.reduce(\n      (sum, item) => sum + (item.extraPayment || 0),\n      0\n    );\n\n    return {\n      labels: [t('principal'), t('interest'), t('extraPayment')],\n      datasets: [\n        {\n          data: [totalPrincipal, totalInterest, totalExtraPayments],\n          backgroundColor: ['#4bc0c0', '#ff6384', '#ffcd56'],\n          borderColor: ['#4bc0c0', '#ff6384', '#ffcd56'],\n          borderWidth: 1,\n          hoverOffset: 10,\n        },\n      ],\n    };\n  }, [principals, amortizationResult, t]);\n\n  // Radar chart data for comparing mortgage metrics before and after early payments\n  const radarChartData = useMemo(() => {\n    // Only show if there are early payments\n    if (\n      !amortizationResult.schedule.some(\n        (item) => item.extraPayment && item.extraPayment > 0\n      )\n    ) {\n      return null;\n    }\n\n    // Scale values to be comparable on the same chart\n    const originalTerm = amortizationResult.summary.originalTerm;\n    const newTerm = amortizationResult.summary.newTerm;\n    const originalInterest = amortizationResult.summary.originalTotalInterest;\n    const newInterest = amortizationResult.summary.newTotalInterest;\n    const originalPayment = amortizationResult.summary.originalMonthlyPayment;\n    const finalPayment = amortizationResult.summary.finalMonthlyPayment;\n\n    // Normalize values to percentages of the original values\n    const normalizedNewTerm = (newTerm / originalTerm) * 100;\n    const normalizedNewInterest = (newInterest / originalInterest) * 100;\n    const normalizedFinalPayment = (finalPayment / originalPayment) * 100;\n\n    return {\n      labels: [t('loanTerm'), t('totalInterest'), t('monthlyPayment')],\n      datasets: [\n        {\n          label: t('original'),\n          data: [100, 100, 100], // Original values as baseline (100%)\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: 'rgb(255, 99, 132)',\n        },\n        {\n          label: t('withEarlyPayments'),\n          data: [\n            normalizedNewTerm,\n            normalizedNewInterest,\n            normalizedFinalPayment,\n          ],\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgb(54, 162, 235)',\n          pointBackgroundColor: 'rgb(54, 162, 235)',\n        },\n      ],\n    };\n  }, [amortizationResult, t]);\n\n  return (\n    <>\n      {/* Line chart showing amortization schedule */}\n      <Suspense fallback={<Skeleton visible />}>\n        <LineChart\n          data={lineChartData}\n          title={t('amortizationSchedule')}\n          extraPaymentInfo={extraPaymentInfo}\n        />\n      </Suspense>\n\n      {/* Bar chart showing principal vs interest over time */}\n      <Suspense fallback={<Skeleton visible />}>\n        <BarChart data={barChartData} title={t('monthlyPaymentBreakdown')} />\n      </Suspense>\n\n      {/* Pie chart showing payment distribution */}\n      <Suspense fallback={<Skeleton visible />}>\n        <PieChart data={pieChartData} title={t('paymentDistribution')} />\n      </Suspense>\n\n      {/* Doughnut chart showing total payment breakdown including extra payments */}\n      <Suspense fallback={<Skeleton visible />}>\n        <DoughnutChart\n          data={doughnutChartData}\n          title={t('totalPaymentBreakdown')}\n        />\n      </Suspense>\n\n      {/* Conditional charts that only appear when early payments exist */}\n      {comparisonPieChartData && (\n        <Suspense fallback={<Skeleton visible />}>\n          <PieChart\n            data={comparisonPieChartData}\n            title={t('interestSavings')}\n          />\n        </Suspense>\n      )}\n\n      {radarChartData && (\n        <Suspense fallback={<Skeleton visible />}>\n          <RadarChart data={radarChartData} title={t('mortgageComparison')} />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nexport default memo(ChartsContainer);\n","import { _ as _extends } from \"@swc/helpers/_/_extends\";\nimport { _ as _object_destructuring_empty } from \"@swc/helpers/_/_object_destructuring_empty\";\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const Icon28Stats = (_param)=>{\n    var restProps = _extends({}, _object_destructuring_empty(_param));\n    return /*#__PURE__*/ _jsx(\"svg\", _object_spread_props(_object_spread({\n        width: \"28\",\n        height: \"28\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, restProps), {\n        children: /*#__PURE__*/ _jsx(\"path\", {\n            fillRule: \"evenodd\",\n            clipRule: \"evenodd\",\n            d: \"M13.1 4.4a9.51 9.51 0 0 0-8.7 9.41 9.53 9.53 0 0 0 9.6 9.46c5 0 9.1-3.76 9.55-8.56h-7.29c-.5 0-.96 0-1.33-.05a2.04 2.04 0 0 1-1.23-.55c-.36-.36-.5-.8-.55-1.22-.05-.38-.05-.84-.05-1.34V4.4Zm1.8 0v7.1a9.97 9.97 0 0 0 .08 1.34l.19.04c.24.03.58.03 1.15.03h7.23A9.53 9.53 0 0 0 14.9 4.4Zm.06 8.43h.01Zm.02.01v.01Zm-12.38.97C2.6 7.6 7.72 2.56 14 2.56S25.4 7.59 25.4 13.8c0 6.23-5.12 11.26-11.4 11.26S2.6 20.04 2.6 13.81Z\",\n            fill: \"currentColor\"\n        })\n    }));\n};\n\n//# sourceMappingURL=stats.js.map","import React from 'react';\n\nimport { Caption, Text } from '@telegram-apps/telegram-ui';\n\nimport styles from '@/ui.module.css';\n\ninterface TableProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const Table = ({ children, className }: TableProps) => {\n  return (\n    <div className={`${styles.tableContainer} ${className || ''}`}>\n      <table className={styles.table}>{children}</table>\n    </div>\n  );\n};\n\nexport const TableHead = ({ children }: { children: React.ReactNode }) => {\n  return <thead className={styles.tableHead}>{children}</thead>;\n};\n\nexport const TableFoot = ({ children }: { children: React.ReactNode }) => {\n  return <tfoot className={styles.tableHead}>{children}</tfoot>;\n};\n\nexport const TableBody = ({ children }: { children: React.ReactNode }) => {\n  return <tbody className={styles.tableBody}>{children}</tbody>;\n};\n\nexport const TableRow = ({\n  children,\n  highlight,\n  style,\n}: {\n  children: React.ReactNode;\n  highlight?: boolean;\n  style?: React.CSSProperties;\n}) => {\n  return (\n    <tr \n      className={`${styles.tableRow} ${highlight ? styles.highlight : ''}`}\n      style={style}\n    >\n      {children}\n    </tr>\n  );\n};\n\nexport const TableCell = ({\n  children,\n  header,\n}: {\n  children?: React.ReactNode;\n  header?: boolean;\n}) => {\n  return header ? (\n    <th className={styles.tableHeader}>\n      <Caption weight='1'>{children}</Caption>\n    </th>\n  ) : (\n    <td className={styles.tableCell}>\n      <Text weight='3'>{children}</Text>\n    </td>\n  );\n};\n","import { memo, useMemo, useState, lazy, Suspense } from 'react';\n\nimport {\n  Section,\n  Pagination,\n  IconButton,\n  Modal,\n  Skeleton,\n} from '@telegram-apps/telegram-ui';\nimport { Icon28Stats } from '@telegram-apps/telegram-ui/dist/icons/28/stats';\nimport { useSignal, viewportState } from '@telegram-apps/sdk-react';\n\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { useMortgage } from '@/providers/MortgageProvider';\n\nimport {\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@/components/Table';\n\n// Lazy load chart component\nconst PieChart = lazy(() => import('@/components/charts/PieChart'));\n\nconst itemsPerPage = 12; // Show 12 months (1 year) per page\n\nconst PaymentSchedule = () => {\n  const { height } = useSignal(viewportState);\n  const { t, formatCurrency, formatDate, formatNumber } = useLocalization();\n  const { amortizationResult } = useMortgage();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedItemIndex, setSelectedItemIndex] = useState<number | null>(\n    null\n  );\n  const [isModalOpened, setIsModalOpened] = useState(false);\n\n  if (!amortizationResult || amortizationResult.schedule.length === 0) {\n    return null;\n  }\n\n  const schedule = amortizationResult.schedule;\n\n  // Get the first payment for the pie chart\n\n  const handleIconClick = (index: number) => {\n    setSelectedItemIndex(index);\n    setIsModalOpened(true);\n  };\n\n  const firstPayment = useMemo(() => {\n    if (typeof selectedItemIndex === 'number') {\n      return amortizationResult.schedule[selectedItemIndex];\n    }\n    return null;\n  }, [selectedItemIndex]);\n\n  // Prepare data for the pie chart\n  const pieChartData = useMemo(() => {\n    if (firstPayment) {\n      return {\n        labels: [t('principal'), t('interest')],\n        datasets: [\n          {\n            data: [firstPayment.principal, firstPayment.interest],\n            backgroundColor: [\n              'rgba(75, 192, 192, 0.6)',\n              'rgba(255, 99, 132, 0.6)',\n            ],\n            borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],\n            borderWidth: 1,\n          },\n        ],\n      };\n    }\n    return null;\n  }, [selectedItemIndex]);\n\n  // Calculate pagination\n  const totalPages = Math.ceil(schedule.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = Math.min(startIndex + itemsPerPage, schedule.length);\n  const currentItems = schedule.slice(startIndex, endIndex);\n\n  const handlePageChange = (_: unknown, value: number) => {\n    setCurrentPage(value);\n  };\n\n  return (\n    <Section>\n      {pieChartData && (\n        <Modal\n          onOpenChange={(open) => {\n            if (!open) {\n              setSelectedItemIndex(null);\n            }\n          }}\n          open={isModalOpened}\n          nested\n          style={{ height: height * 0.6 }}\n        >\n          <Suspense fallback={<Skeleton visible />}>\n            <PieChart data={pieChartData} title={t('paymentBreakdown')} />\n          </Suspense>\n        </Modal>\n      )}\n      <Section.Header large>\n        {t('showingPayments', {\n          from: startIndex + 1,\n          to: endIndex,\n          total: schedule.length,\n        })}\n      </Section.Header>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell header>&nbsp;</TableCell>\n            <TableCell header>{t('month')}</TableCell>\n            <TableCell header>{t('date')}</TableCell>\n            <TableCell header>{t('payment')}</TableCell>\n            <TableCell header>{t('principal')}</TableCell>\n            <TableCell header>{t('interest')}</TableCell>\n            <TableCell header>{t('extraPayment')}</TableCell>\n            <TableCell header>{t('balance')}</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {currentItems.map((item, index) => (\n            <TableRow \n              key={item.month} \n              highlight={Boolean(item.extraPayment)}\n              style={item.isRegularPayment ? { backgroundColor: 'rgba(75, 192, 192, 0.1)' } : undefined}\n            >\n              <TableCell>\n                <IconButton\n                  size='s'\n                  onClick={() => handleIconClick(startIndex + index)}\n                >\n                  <Icon28Stats />\n                </IconButton>\n              </TableCell>\n              <TableCell>{formatNumber(item.month)}</TableCell>\n              <TableCell>{formatDate(item.date)}</TableCell>\n              <TableCell>{formatCurrency(item.payment)}</TableCell>\n              <TableCell>{formatCurrency(item.principal)}</TableCell>\n              <TableCell>{formatCurrency(item.interest)}</TableCell>\n              <TableCell>\n                {item.extraPayment ? (\n                  <span>\n                    {formatCurrency(item.extraPayment)}\n                    {item.isRegularPayment && (\n                      <span title={t('regularPayment')} style={{ marginLeft: '4px', color: 'rgba(75, 192, 192, 1)' }}>\n                        *\n                      </span>\n                    )}\n                  </span>\n                ) : item.isRegularPayment && item.regularPaymentMessage ? (\n                  <span title={item.regularPaymentMessage} style={{ color: 'rgba(255, 99, 132, 0.8)' }}>\n                    {t('insufficientPayment')}\n                  </span>\n                ) : '-'}\n              </TableCell>\n              <TableCell>{formatCurrency(item.balance)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <Section.Footer centered>\n        <Pagination\n          siblingCount={0}\n          boundaryCount={1}\n          page={currentPage}\n          count={totalPages}\n          onChange={handlePageChange}\n        />\n      </Section.Footer>\n    </Section>\n  );\n};\n\nexport default memo(PaymentSchedule);\n","import { memo, useMemo } from 'react';\n\nimport { Cell, Section, Text } from '@telegram-apps/telegram-ui';\n\nimport { useLocalization } from '@/providers/LocalizationProvider';\nimport { useMortgage } from '@/providers/MortgageProvider';\n\n\nconst ResultsDisplay = () => {\n  const { t, formatCurrency, formatDate } = useLocalization();\n  const { mortgageResults, amortizationResult } = useMortgage();\n\n  if (!mortgageResults) {\n    return null;\n  }\n\n  const hasEarlyPayments = useMemo(() => {\n    if (amortizationResult && amortizationResult.schedule) {\n      // Check if there are any early payments in the schedule\n      return amortizationResult.schedule.some(item => item.extraPayment !== undefined && item.extraPayment > 0);\n    }\n    return false;\n  }, [amortizationResult]);\n\n  const { monthlyPayment, totalInterest, payoffDate } = mortgageResults;\n\n  return (\n    <Section\n      header={t('paymentSummary')}\n      footer={\n        hasEarlyPayments && (\n          <Cell readOnly before={<Text>{t('totalSavings')}</Text>}>\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {formatCurrency(amortizationResult!.summary.totalSavings)}\n            </Text>\n          </Cell>\n        )\n      }\n    >\n      <Cell\n        subtitle={\n          hasEarlyPayments &&\n          amortizationResult?.summary.finalMonthlyPayment !==\n            monthlyPayment && (\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {t('originalPayment')}:\n              {formatCurrency(monthlyPayment)}\n            </Text>\n          )\n        }\n        subhead={t('monthlyPayment')}\n        before={'💰'}\n        readOnly\n      >\n        <Text>\n          {formatCurrency(\n            hasEarlyPayments && amortizationResult?.summary.finalMonthlyPayment !== monthlyPayment\n              ? amortizationResult!.summary.finalMonthlyPayment\n              : monthlyPayment\n          )}\n        </Text>\n      </Cell>\n      <Cell\n        subtitle={\n          hasEarlyPayments && (\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {t('savings')}:\n              {formatCurrency(\n                amortizationResult!.summary.originalTotalInterest -\n                  amortizationResult!.summary.newTotalInterest\n              )}\n            </Text>\n          )\n        }\n        subhead={t('totalInterest')}\n        before={'📈'}\n        readOnly\n      >\n        <Text>\n          {formatCurrency(\n            hasEarlyPayments\n              ? amortizationResult!.summary.newTotalInterest\n              : totalInterest\n          )}\n        </Text>\n      </Cell>\n      <Cell\n        subtitle={\n          hasEarlyPayments && (\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {t('monthsSaved')}:\n              {amortizationResult!.summary.originalTerm -\n                amortizationResult!.summary.newTerm}\n            </Text>\n          )\n        }\n        subhead={t('loanTerm')}\n        before={'⏱️'}\n        readOnly\n      >\n        <Text>\n          {hasEarlyPayments\n            ? `${Math.floor(amortizationResult!.summary.newTerm / 12)} ${t(\n                'years'\n              )} ${amortizationResult!.summary.newTerm % 12} ${t('months')}`\n            : `${Math.floor(mortgageResults.loanTerm)} ${t('years')}`}\n        </Text>\n      </Cell>\n      <Cell\n        subtitle={\n          hasEarlyPayments && (\n            <Text style={{ color: 'var(--tgui--green)' }}>\n              {t('actualPayoffDate')}:\n              {formatDate(\n                amortizationResult!.schedule[\n                  amortizationResult!.schedule.length - 1\n                ].date\n              )}\n            </Text>\n          )\n        }\n        subhead={t('planPayoffDate')}\n        before={'🏁'}\n        readOnly\n      >\n        <Text>{formatDate(payoffDate)}</Text>\n      </Cell>\n      <Cell\n        subhead={t('paymentType')}\n        before={'💵'}\n        readOnly\n      >\n        <Text>\n          {mortgageResults.paymentType === 'annuity' \n            ? t('annuityPayment') \n            : t('differentiatedPayment')}\n        </Text>\n      </Cell>\n    </Section>\n  );\n};\n\nexport default memo(ResultsDisplay);\n","import { memo } from 'react';\n\nimport styles from '@/ui.module.css';\n\ninterface TabPanelProps {\n  id: string;\n  children: React.ReactNode;\n}\n\nconst TabPanel = ({ children }: TabPanelProps) => {\n  return <div className={styles.tabPanel}>{children}</div>;\n};\n\nexport default memo(TabPanel);\n","import React, { memo, useState } from 'react';\n\nimport { SegmentedControlItem } from '@telegram-apps/telegram-ui/dist/components/Navigation/SegmentedControl/components/SegmentedControlItem/SegmentedControlItem';\nimport { IconContainer, SegmentedControl } from '@telegram-apps/telegram-ui';\n\n\ninterface Tab {\n  id: string;\n  label?: string;\n  icon?: React.ReactNode;\n}\n\ninterface TabViewProps {\n  tabs: Tab[];\n  children: React.ReactNode;\n  defaultTab?: string;\n}\n\nconst TabView = ({ tabs, children, defaultTab }: TabViewProps) => {\n  const [activeTab, setActiveTab] = useState(defaultTab || tabs[0].id);\n\n\n  const childrenArray = React.Children.toArray(children);\n  const activeChild = childrenArray.find(\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    (child) => React.isValidElement(child) && child.props.id === activeTab\n  );\n\n  return (\n    <>\n      <SegmentedControl >\n        {tabs.map((tab) => (\n          <SegmentedControlItem\n            key={tab.id}\n            selected={tab.id === activeTab}\n            onClick={() => setActiveTab(tab.id)}\n          >\n            {tab.label && tab.label}\n            {tab.icon && <IconContainer>{tab.icon}</IconContainer>}\n          </SegmentedControlItem>\n        ))}\n      </SegmentedControl>\n      {activeChild}\n    </>\n  );\n}\n\nexport default memo(TabView);\n\n","import { List } from '@telegram-apps/telegram-ui';\n\nimport ChartsContainer from '@/components/ChartsContainer';\nimport PaymentSchedule from '@/components/PaymentSchedule';\nimport ResultsDisplay from '@/components/ResultsDisplay';\nimport TabPanel from '@/components/TabPanel';\nimport TabView from '@/components/TabView';\nimport Page from './Page';\n\nconst tabs = [\n  {\n    id: 'charts',\n    icon: '📊 ',\n  },\n  {\n    id: 'schedule',\n    icon: '📅',\n  },\n];\n\nconst MortageResult = () => {\n  return (\n    <Page>\n      <List>\n        <ResultsDisplay />\n        <TabView tabs={tabs} defaultTab='charts'>\n          <TabPanel id='charts'>\n            <ChartsContainer />\n          </TabPanel>\n          <TabPanel id='schedule'>\n            <PaymentSchedule />\n          </TabPanel>\n        </TabView>\n      </List>\n    </Page>\n  );\n};\n\nexport default MortageResult;\n"],"file":"assets/MortageResult-w-y_1PM1.js"}